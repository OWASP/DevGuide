{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the OWASP Development Guide.</p> <p>The Open Worldwide Application Security Project (OWASP) is a nonprofit foundation that works to improve the security of software. It is an open community dedicated to enabling organizations to conceive, develop, acquire, operate, and maintain applications that can be trusted.</p> <p>Along with the OWASP Top Ten, the Developer Guide is one of the original resources published soon after the OWASP foundation was formed in 2001. Version 1.0 of the Developer Guide was released in 2002 and since then there have been various releases culminating in version 2.0 in 2005. Since then the guide has been revised extensively to bring it up to date. The latest versions are 4.x because version 3.0 was never released.</p> <p>The purpose of this guide is to provide an introduction to security concepts and a handy reference for application / system developers. Generally it describes security practices using the advice given in the OWASP Software Assurance Maturity Model (SAMM) and describes the OWASP projects referenced in the OWASP Application Security Wayfinder project.</p> <p>This guide does not seek to replicate the many excellent sources on specific security topics; it rarely tries to go into detail on a subject and instead provides links for greater depth on these security topics. Instead the content of the Developer Guide aims to be accessible, introducing  practical security concepts and providing enough detail to get developers started on various OWASP tools and documents.</p> <p>All of the OWASP projects and tools described in this guide are free to download and use. All OWASP projects are open source; please do get involved if you are interested in improving application security.</p>"},{"location":"#audience","title":"Audience","text":"<p>Developers should use this OWASP Developer Guide to help write applications that are more secure. The guide has been written by the security community to help software developers write solid, safe and secure applications. Most of the contributors to this guide are also software developers as well as security engineers, and this helps to keep the focus developer-centric.</p> <p>If you are in a hurry and want information on a specific subject then try the OpenCRE chat LLM for immediate answers.</p>"},{"location":"#what-is-the-developer-guide","title":"What is the Developer Guide?","text":"<p>You can think of this guide as a cross-reference source to the many tools and documents that OWASP provides for developers.</p> <p>Or you can regard the purpose of this guide as answering the question: \u201cI am a developer and I need a reference guide to navigate the numerous security tools and security activities that I know I should be doing.\"</p> <p>Or think of it as a collection of articles that introduce developers to the wide domain of application security.</p> <p>Or you can regard this guide as a companion document to the OWASP Integration Standards project: the Application Security Wayfinder maps out the many tools, projects and documents within OWASP and the Developer Guide provides some 'wordy' context for this.</p> <p></p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/02-foundations/","title":"Overview","text":"<p>There are various foundational concepts and terminology that are commonly used in software security. Although many of these concepts are complex to implement and are based on heavy-duty theory, the principles are often fairly straight forward and are accessible for every software engineer.</p> <p>A reasonable grasp of these foundational concepts allows development teams to understand and implement software security for the application or system under development. This Developer Guide can only give a brief overview of these concepts, for in-depth knowledge refer to the many texts on security such as the The Cyber Security Body Of Knowledge.</p> <p>If changes are being introduced to the security culture of an organization then make sure there is management buy-in and clear goals to achieve. Without these then attempts to improve the security posture will probably fail - see the Security Culture project for the importance of getting management, security and development teams working together.</p> <p>The OWASP Developer Guide is a community effort; if you see something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/02-foundations/01-security-fundamentals/","title":"Security fundamentals","text":"<p>The fundamental principles of application security rely on the security concepts referenced in this developer guide. This section aims to provide an introduction to fundamental principles that any development team must be familiar with.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#software-assurance-maturity-model","title":"Software Assurance Maturity Model","text":"<p>The Software Assurance Maturity Model (SAMM) provides context for the scope of software security and the foundations of good security practice:</p> <ul> <li>Governance</li> <li>Design</li> <li>Implementation</li> <li>Verification</li> <li>Operations</li> </ul> <p>The SAMM model describes these foundations of software security as Business Functions, which are further divided into Business Practices. The OWASP Software Assurance Maturity Model (SAMM) is used throughout this Developer Guide; most of the sections in the Developer Guide reference at least one of the Business Functions or Practices from SAMM.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#cia-triad","title":"CIA triad","text":"<p>Security is simply about controlling who can interact with your information, what they can do with it, and when they can interact with it. These characteristics of security can be described using the CIA triad.</p> <p>CIA stands for Confidentiality, Integrity and Availability, and it is usually depicted as a triangle representing the strong bonds between its three tenets. This triad is considered the pillars of application security, often Confidentiality, Integrity or Availability are used as a properties of data or processes within a given system. The CIA triad can be extended with the AAA triad: Authorization, Authentication and Auditing.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#confidentiality","title":"Confidentiality","text":"<p>Confidentiality is the protection of data against unauthorized disclosure; it is about ensuring that only those with the correct authorization can access the data and applies to both data at rest and to data in transit. Confidentiality is also related to the broader concept of data privacy.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#integrity","title":"Integrity","text":"<p>Integrity is about protecting data against unauthorized modification, or assuring data trustworthiness. The concept contains the notion of data integrity (data has not been changed accidentally or deliberately) and the notion of source integrity (data came from or was changed by a legitimate source).</p>"},{"location":"en/02-foundations/01-security-fundamentals/#availability","title":"Availability","text":"<p>Availability is about ensuring the presence of information or resources. This concept relies not just on the availability of the data itself, for example by using replication of data, but also on the protection of the services that provide access to the data, for example by using load balancing.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#aaa-triad","title":"AAA triad","text":"<p>The CIA triad is often extended with Authentication, Authorization and Auditing as these are closely linked to CIA concepts. CIA has a strong dependency on Authentication and Authorization; the confidentiality and integrity of sensitive data can not be assured without them. Auditing is added as it can provide the mechanism to ensure proof of any interaction with the system.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#authentication","title":"Authentication","text":"<p>Authentication is about confirming the identity of the entity that wants to interact with a secure system. For example the entity could be an automated client or a human actor; in either case authentication is required for a secure application.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#authorization","title":"Authorization","text":"<p>Authorization is about specifying access rights to secure resources (data, services, files, applications, etc). These rights describe the privileges or access levels related to the resources that are being secured. Authorization is usually preceded by successful authentication.</p>"},{"location":"en/02-foundations/01-security-fundamentals/#auditing","title":"Auditing","text":"<p>Auditing is about keeping track of implementation-level events, as well as domain-level events taking place in a system. This helps to provide non-repudiation, which means that changes or actions on the protected system are undeniable. Auditing can provide not only technical information about the running system, but also proof that particular actions have been performed. The typical questions that are answered by auditing are \"Who did What, When and potentially How?\"</p>"},{"location":"en/02-foundations/01-security-fundamentals/#vulnerabilities","title":"Vulnerabilities","text":"<p>NIST defines a vulnerability as 'Weakness in an information system, system security procedures, internal controls, or implementation that could be exploited or triggered by a threat source.'</p> <p>There are many weaknesses or bugs in every large application, but the term vulnerability is generally reserved for those weaknesses or bugs where there is a risk that a threat actor could exploit it using a threat vector.</p> <p>Well known security vulnerabilities are :</p> <ul> <li>Clickjacking</li> <li>Credential Stuffing</li> <li>Cross-site leaks</li> <li>Denial of Service (DoS) attacks</li> <li>DOM based XSS attacks including DOM Clobbering</li> <li>IDOR (Insecure Direct Object Reference)</li> <li>Injection including OS Command injection and XXE</li> <li>LDAP specific injection attacks</li> <li>Prototype pollution</li> <li>SSRF attacks</li> <li>SQL injection and the use of Query Parameterization</li> <li>Unvalidated redirects and forwards</li> <li>XSS attacks and XSS Filter Evasion</li> </ul>"},{"location":"en/02-foundations/01-security-fundamentals/#http-and-html","title":"HTTP and HTML","text":"<p>Although not a security fundamental as such, web applications rely on HTTP communications and HTML. Both application developers and security engineers should have a good understanding of HTTP and the HTML language along with their various security controls.</p> <p>Most application development teams will be familiar with HTTP communications and the HTML standard, but if necessary refer to the training from the W3 Consortium or the W3 Schools. The OWASP Cheat Sheet Series provide web application developers with the information needed to produce secure software :</p> <ul> <li>The HTML5 Security cheat sheet describes a wide range of controls,   aligned with the current HTML Living Standard</li> <li>Refer to the Securing Cascading Style Sheets cheat sheet for CSS</li> <li>The HTTP headers need to be secure, see the HTTP Security Response Headers cheat sheet</li> <li>Strongly consider HTTP Strict Transport Security</li> <li>If the application has a file upload feature, follow the File Upload cheat sheet</li> <li>Ensure content security policy is in place with the Content Security Policy cheat sheet</li> <li>Using JWTs for a Java application? Refer to the JSON Web Token cheat sheet</li> <li>Storing or sending objects? Check out the Deserialization cheat sheet</li> </ul>"},{"location":"en/02-foundations/01-security-fundamentals/#references","title":"References","text":"<ul> <li>WHATWG HTML Living Standard</li> <li>OWASP Cheat Sheet Series</li> <li>OWASP Software Assurance Maturity Model (SAMM)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/02-foundations/02-secure-development/","title":"Secure development and integration","text":"<p>Secure development is described in the OWASP Software Assurance Maturity Model (SAMM) Design, Implementation and Verification business functions. Also refer to the Security Culture for a good explanation on why adding security into the software development lifecycle is important.</p>"},{"location":"en/02-foundations/02-secure-development/#prelude","title":"Prelude","text":"<p>The best introduction to practical secure software development is the OWASP Application Security Fragmentation article :</p> <p>Or how I worried less and stood on the shoulders of giants. - Spyros Gasteratos, Elie Saad</p> <p>Much of the material in this section is drawn from this OWASP Integration Standards project.</p>"},{"location":"en/02-foundations/02-secure-development/#overview","title":"Overview","text":"<p>Almost all modern software is developed in an iterative manner passing through phase to phase, such as identifying customer requirements, implementation and test. These phases are revisited in a cyclic manner throughout the lifetime of the application. A notional Software Development LifeCycle (SDLC) is shown below, in practice there may be more or less phases according to the processes adopted by the organization.</p> <p></p> <p>With the increasing number and sophistication of exploits against almost every application or business system, most companies have adopted a secure Software Development LifeCycle (SDLC). The secure SDLC should never be a separate lifecycle from an existing software development lifecycle, it must always be the same development lifecycle as before but with security actions built into each phase, otherwise security actions may well be set aside by busy development teams. Note that although the Secure SDLC could be written as 'SSDLC' it is almost always written as 'SDLC'.</p> <p>DevOps integrates and automates many of the SDLC phases and implements Continuous Integration (CI) and Continuous Delivery/Deployment (CD) pipelines to provide much of the SDLC automation.</p> <p>DevOps and pipelines have been successfully exploited with serious large scale consequences and so, in a similar manner to the SDLC, much of the DevOps actions have also had security built in to them. Secure DevOps, or DevSecOps, builds security practices into the DevOps activities to guard against attack and to provide the SDLC with automated security testing.</p> <p>Examples of how DevSecOps is 'building security in' is the provision of Interactive, Static and Dynamic Application Security Testing (IAST, SAST &amp; DAST) and implementing supply chain security, and there are many other security activities that can be applied. Refer to the CI/CD Security Cheat Sheet for the latest DevSecOps security controls.</p>"},{"location":"en/02-foundations/02-secure-development/#secure-development-lifecycle","title":"Secure development lifecycle","text":"<p>Referring to the OWASP Application Security Wayfinder development cycle there are four iterative phases during application development: Requirements, Design, Implementation and Verification. The other phases are done less iteratively in the development cycle but these form an equally important part of the SDLC: Gap Analysis, Metrics, Operation and Training &amp; Culture Building.</p> <p>All of these phases of the SDLC should have security activities built into them, rather than done as separate activities. If security is built into these phases then the overhead becomes much less and the resistance from the development teams decreases. The goal is for the secure SDLC to become as familiar a process as before, with the development teams taking ownership of the security activities within each phase.</p> <p>There are many OWASP tools and resources to help build security into the SDLC.</p> <ul> <li>Requirements: this phase determines the functional, non-functional and security requirements for the application.     Requirements should be revisited periodically and checked for completeness and validity,     and it is worth considering various OWASP tools to help with this;</li> <li>the Application Security Verification Standard (ASVS) provides developers       with a list of requirements for secure development,</li> <li> <p>the Mobile Application Security project provides a security standard for mobile applications       and SecurityRAT helps identify an initial set of security requirements.</p> </li> <li> <p>Design: it is important to design security into the application - it is never too late to do this     but the earlier the better and easier to do. OWASP provides two tools, Pythonic Threat Modeling     and Threat Dragon, for threat modeling along with security gamification using Cornucopia.</p> </li> <li> <p>Implementation: the OWASP Top 10 Proactive Controls project states that they are     \"the most important control and control categories that every architect and developer should absolutely,     100% include in every project\" and this is certainly good advice. Implementing these controls can provide     a high degree of confidence that the application or system will be reasonably secure.     OWASP provides two libraries that can be incorporated in web applications,     the Enterprise Security API (ESAPI) security control library     and CSRFGuard to mitigate the risk of Cross-Site Request Forgery (CSRF) attacks,     that help implement these proactive controls. In addition the OWASP Cheat Sheet Series     is a valuable source of information and advice on all aspects of applications security.</p> </li> <li> <p>Verification: OWASP provides a relatively large number of projects that help with testing and verification.    This is the subject of a section in this Developer Guide, and the projects are listed at the end of this section.</p> </li> <li> <p>Training: development teams continually need security training.    Although not part of the inner SDLC iterative loop training should still be factored into the project lifecycle.    OWASP provides many training environments and materials - see the list at the end of this section.</p> </li> <li> <p>Culture Building: a good security culture within a business organization will help greatly in keeping    the applications and systems secure. There are many activities that all add up to create the    security culture, the OWASP Security Culture project goes into more detail on these activities,    and a good Security Champion program within the business is foundational to a good security posture.    The OWASP Security Champions Guide provides guidance and material to create security champions    within the development teams - ideally every team should have a security champion that has    a special interest in security and has received further training, enabling the team to build security in.</p> </li> <li> <p>Operations: the OWASP DevSecOps Guideline explains how to best implement a secure pipeline,     using best practices and automation tools to help 'shift-left' security issues.     Refer to the DevSecOps Guideline for more information on any of the topics within DevSecOps     and in particular sections on Operations.</p> </li> <li> <p>Supply chain: attacks that leverage the supply chain can be devastating     and there have been several high profile of products being successfully exploited.     A Software Bill of Materials (SBOM) is the first step in avoiding these attacks and     it is well worth using the OWASP CycloneDX full-stack Bill of Materials (BOM) standard     for risk reduction in the supply chain.     In addition the OWASP Dependency-Track project is a Continuous SBOM Analysis Platform     which can help prevent these supply chain exploits by providing control of the SBOM.</p> </li> <li> <p>Third party dependencies: keeping track of what third party libraries are included in the application,     and what vulnerabilities they have, is easily automated. Many public repositories such as github     and gitlab offer this service along with some commercial vendors.     OWASP provides the Dependency-Check Software Composition Analysis (SCA) tool     to track external libraries.</p> </li> <li> <p>Application security testing: there are various types of security testing that can be automated on pull-request,    merge or nightlies - or indeed manually but they are most powerful when automated. Commonly there is    Static Application Security Testing (SAST), which analyzes the code without running it,    and Dynamic Application Security Testing (DAST), which applies input to the application while running it in a sandbox    or other isolated environments.    Interactive Application Security Testing (IAST) is designed to be run manually as well as being automated,    and provides instant feedback on the tests as they are run.</p> </li> </ul>"},{"location":"en/02-foundations/02-secure-development/#further-reading-from-owasp","title":"Further reading from OWASP","text":"<ul> <li>Cheat Sheet Series</li> <li>CI/CD Security Cheat Sheet</li> <li>Cornucopia</li> <li>CycloneDX Bill of Materials (BOM) standard</li> <li>DevSecOps Guideline</li> <li>Security Champions Guide</li> <li>Security Culture project</li> <li>Top 10 Proactive Controls</li> </ul>"},{"location":"en/02-foundations/02-secure-development/#owasp-verification-projects","title":"OWASP verification projects","text":"<ul> <li>Application Security Verification Standard (ASVS)</li> <li>Amass project</li> <li>Code Pulse</li> <li>Defect Dojo</li> <li>Mobile Application Security (MAS)</li> <li>Nettacker</li> <li>Offensive Web Testing Framework (OWTF)</li> <li>Web Security Testing Guide (WSTG)</li> </ul>"},{"location":"en/02-foundations/02-secure-development/#owasp-training-projects","title":"OWASP training projects","text":"<ul> <li>API Security Project (API Top 10)</li> <li>Juice Shop</li> <li>Mobile Top 10</li> <li>Security Shepherd</li> <li>Snakes And Ladders</li> <li>Top Ten Web Application security risks</li> <li>WebGoat</li> </ul>"},{"location":"en/02-foundations/02-secure-development/#owasp-resources","title":"OWASP resources","text":"<ul> <li>CSRFGuard library</li> <li>Dependency-Check Software Composition Analysis (SCA)</li> <li>Dependency-Track Continuous SBOM Analysis Platform</li> <li>Enterprise Security API (ESAPI)</li> <li>Integration Standards project Application Security Wayfinder</li> <li>Mobile Application Security (MAS)</li> <li>Pythonic Threat Modeling</li> <li>Threat Dragon</li> <li>SecurityRAT (Requirement Automation Tool)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/02-foundations/03-security-principles/","title":"Principles of security","text":"<p>This section is a very brief introduction to some concepts used within the software security domain, as these may not be familiar to many application developers. The OWASP Cheat Sheet Series provides more in depth explanations for these security principles, see the further reading at the end of this section.</p>"},{"location":"en/02-foundations/03-security-principles/#overview","title":"Overview","text":"<p>There are various concepts and terms used in the security domain that are fundamental to the understanding and discussion of application security. Security architects and security engineers will be familiar with these terms and development teams will also need this understanding to implement secure applications.</p>"},{"location":"en/02-foundations/03-security-principles/#security-by-design","title":"Security by Design","text":"<p>Security should not be an afterthought or add-on. When developing systems, you should begin with identifying relevant security requirements and treat them as an integral part of the overall process and system design. Begin with establishing and adopting relevant principles and policies as a foundation for your design, then build security into your development life cycle. Keep also in mind that the system you are building also will be needing maintenance and that system operators will need to securely manage and even shutdown and dispose of the system. Therefore, commit to secure operations by developing secure \"operational management\"[^1] principles and practices.</p>"},{"location":"en/02-foundations/03-security-principles/#security-by-default","title":"Security by Default","text":"<p>Secure by default means that the default configuration settings are the most secure settings possible. This is not necessarily the most user-friendly settings. Evaluate what the settings should be, based on both risk analysis and usability tests. As a result, the precise meaning is up to you to decide. Nevertheless, configure the system to only provide the least functionality and to specifically prohibit and/or restrict the use of all other functions, ports, protocols, and/or services. Also configure the defaults to be as restrictive as possible, according to best practices, without compromising the \"Psychological acceptability\" and \"Usability and Manageability\" of the system.</p>"},{"location":"en/02-foundations/03-security-principles/#no-security-guarantee","title":"No security guarantee","text":"<p>One of the most important principles of software security is that no application or system is totally 100% guaranteed to be secure from all attacks. This may seem an unusually pessimistic starting point but it is merely acknowledging the real world; given enough time and enough resources any system can be compromised. The goal of software security is not '100% secure' but to make it hard enough and the rewards small enough that malicious actors look elsewhere for systems to exploit.</p>"},{"location":"en/02-foundations/03-security-principles/#defense-in-depth","title":"Defense in Depth","text":"<p>Also known as layered defense, defense in depth is a security principle where defense against attack is provided by multiple security controls. The aim is that single points of complete compromise are eliminated or mitigated by the incorporation of a series or multiple layers of security safeguards and risk-mitigation countermeasures.</p> <p>If one layer of defense turns out to be inadequate then, if diverse defensive strategies are in place, another layer of defense may prevent a full breach and if that one is circumvented then the next layer may block the exploit.</p>"},{"location":"en/02-foundations/03-security-principles/#fail-safe","title":"Fail Safe","text":"<p>This is a security principle that aims to maintain confidentiality, integrity and availability when an error condition is detected. These error conditions may be a result of an attack, or may be due to design or implementation failures, in any case the system / applications should default to a secure state rather than an unsafe state.</p> <p>For example unless an entity is given explicit access to an object, it should be denied access to that object by default. This is often described as 'Fail Safe Defaults' or 'Secure by Default'.</p> <p>In the context of software security, the term 'fail secure' is commonly used interchangeably with fail safe, which comes from physical security terminology. Failing safe also helps software resiliency in that the system / application can rapidly recover upon design or implementation flaws.</p>"},{"location":"en/02-foundations/03-security-principles/#least-privilege","title":"Least Privilege","text":"<p>A security principle in which a person or process is given only the minimum level of access rights (privileges) that is necessary for that person or process to complete an assigned operation. This right must be given only for a minimum amount of time that is necessary to complete the operation.</p> <p>This helps to limits the damage when a system is compromised by minimizing the ability of an attacker to escalate privileges both laterally or vertically. In order to apply this principle of least privilege proper granularity of privileges and permissions should be established.</p>"},{"location":"en/02-foundations/03-security-principles/#compartmentalize","title":"Compartmentalize","text":"<p>The principle of least privilege works better if access rights are not an \"all or nothing\" access model. Instead, compartmentalize the access to information on a \"need-to-know\" basis in order to perform certain tasks. The compartmentalization principle helps in minimizing the impact of a security breach in case of a successful breach attempt but must be used in moderation in order to prevent the system from becoming unmanageable. Therefore, follow also the principle of \"Economy of Mechanism\".</p>"},{"location":"en/02-foundations/03-security-principles/#separation-of-duties","title":"Separation of Duties","text":"<p>Also known as separation of privilege, separation of duties is a security principle which requires that the successful completion of a single task is dependent upon two or more conditions that are insufficient, individually by themselves, for completing the task.</p> <p>There are many applications for this principle, for example limiting the damage an aggrieved or malicious insider can do, or by limiting privilege escalation.</p>"},{"location":"en/02-foundations/03-security-principles/#economy-of-mechanism","title":"Economy of Mechanism","text":"<p>Also known as 'keep it simple', if there are multiple implementations then the simplest and most easily understood implementation should be chosen.</p> <p>The likelihood of vulnerabilities increases with the complexity of the software architectural design and code, and increases further if it is hard to follow or review the code. The attack surface of the software is reduced by keeping the software design and implementation details simple and understandable.</p>"},{"location":"en/02-foundations/03-security-principles/#complete-mediation","title":"Complete Mediation","text":"<p>A security principle that ensures that authority is not circumvented in subsequent requests of an object by a subject, by checking for authorization (rights and privileges) upon every request for the object.</p> <p>In other words, the access requests by a subject for an object are completely mediated every time, so that all accesses to objects must be checked to ensure that they are allowed.</p>"},{"location":"en/02-foundations/03-security-principles/#open-design","title":"Open Design","text":"<p>The open design security principle states that the implementation details of the design should be independent of the design itself, allowing the design to remain open while the implementation can be kept secret. This is in contrast to security by obscurity where the security of the software is dependent upon the obscuring of the design itself.</p> <p>When software is architected using the open design concept, the review of the design itself will not result in the compromise of the safeguards in the software.</p>"},{"location":"en/02-foundations/03-security-principles/#least-common-mechanism","title":"Least Common Mechanism","text":"<p>The security principle of least common mechanisms disallows the sharing of mechanisms that are common to more than one user or process if the users or processes are at different levels of privilege. This is important when defending against privilege escalation.</p>"},{"location":"en/02-foundations/03-security-principles/#psychological-acceptability","title":"Psychological acceptability","text":"<p>A security principle that aims at maximizing the usage and adoption of the security functionality in the software by ensuring that the security functionality is easy to use and at the same time transparent to the user. Ease of use and transparency are essential requirements for this security principle to be effective.</p> <p>Security controls should not make the resource significantly more difficult to access than if the security control were not present. If a security control provides too much friction for the users then they may look for ways to defeat the control and \u201cprop the doors open\u201d.</p>"},{"location":"en/02-foundations/03-security-principles/#usability-and-manageability","title":"Usability and Manageability","text":"<p>Is a principle related to psychological acceptability, but goes beyond just the perceived psychological acceptability to also include the design, implementation and operation of security controls. The configuration, administration and integration of security components should not be overly complex or obscure. Therefore, always use open standards for portability and interoperability, use common language in developing security requirements, design security to allow for regular adoption of new technology, ensure a secure and logical upgrade process exist, automate security management activities and strive for operational ease of use.</p>"},{"location":"en/02-foundations/03-security-principles/#secure-the-weakest-link","title":"Secure the Weakest Link","text":"<p>This security principle states that the resiliency of your software against hacker attempts will depend heavily on the protection of its weakest components, be it the code, service or an interface. Therefore, identifying the weakest component and addressing the most serious risk first, until an acceptable level of risk is attained, is considered good security practice.</p>"},{"location":"en/02-foundations/03-security-principles/#leveraging-existing-components","title":"Leveraging Existing Components","text":"<p>This is a security principle that focuses on ensuring that the attack surface is not increased and no new vulnerabilities are introduced by promoting the reuse of existing software components, code and functionality.</p> <p>Existing components are more likely to be tried and tested, and hence more secure, and also should have security patches available. In addition components developed within the open source community have the further benefit of 'many eyes' and are therefore likely to be even more secure.</p>"},{"location":"en/02-foundations/03-security-principles/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet series</li> <li>Authentication Cheat Sheet</li> <li>Authorization Cheat Sheet</li> <li>Secure Product Design Cheat Sheet</li> <li>OWASP Top 10 Proactive Controls</li> <li>C5: Secure by Default Configurations</li> <li>Other</li> <li>Compartmentalization (information security), (Wikipedia)</li> <li>Least Functionality, (NIST)</li> <li>Security by Design, (Open Group)</li> <li>Usability and Manageability, (Open Group)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p> <p>[^1]: Operational Management, (SAMM)</p>"},{"location":"en/02-foundations/04-crypto-principles/","title":"Principles of cryptography","text":"<p>Cryptography is fundamental to the Confidentiality and Integrity of applications and systems. The OWASP Cheat Sheet series describes the use of cryptography and some of these are listed in the further reading at the end of this section.</p>"},{"location":"en/02-foundations/04-crypto-principles/#overview","title":"Overview","text":"<p>This section provides a brief introduction to cryptography (often simply referred to as \"crypto\") and the terms used. Cryptography is a large subject and can get very mathematical, but fortunately for the majority of development teams a general understanding of the concepts is sufficient. This general understanding, with the guidance of security architects, should allow implementation of cryptography by the development team for the application or system.</p>"},{"location":"en/02-foundations/04-crypto-principles/#uses-of-cryptography","title":"Uses of cryptography","text":"<p>Although cryptography was initially restricted primarily to the military and the realm of academia, cryptography has become ubiquitous in securing software applications. Common every day uses of cryptography include mobile phones, passwords, SSL VPNs, smart cards, and DVDs. Cryptography has permeated through everyday life, and is heavily used by many web applications.</p> <p>Cryptography is one of the more advanced topics of information security, and one whose understanding requires the most schooling and experience. It is difficult to get right because there are many approaches to encryption, each with advantages and disadvantages that need to be thoroughly understood by solution architects.</p> <p>The proper and accurate implementation of cryptography is extremely critical to its efficacy. A small mistake in configuration or coding will result in removing most of the protection and rending the crypto implementation useless.</p> <p>A good understanding of crypto is required to be able to discern between solid products and snake oil. The inherent complexity of crypto makes it easy to fall for fantastic claims from vendors about their product. Typically, these are \"a breakthrough in cryptography\" or \"unbreakable\" or provide \"military grade\" security. If a vendor says \"trust us, we have had experts look at this,\" chances are they weren't experts!</p>"},{"location":"en/02-foundations/04-crypto-principles/#confidentiality","title":"Confidentiality","text":"<p>For the purposes of this section, confidentiality is defined as \"no unauthorized disclosure of information\". Cryptography addresses this via encryption of either the data at rest or data in transit by protecting the information from all who do not hold the decryption key. Cryptographic hashes (secure, one way hashes) to prevent passwords from disclosure.</p>"},{"location":"en/02-foundations/04-crypto-principles/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying a claim that a subject is who it says it is via some provided corroborating evidence. Cryptography is central to authentication:</p> <ol> <li>to protect the provided corroborating evidence (for example hashing of passwords for subsequent storage)</li> <li>in authentication protocols often use cryptography to either directly authenticate entities     or to exchange credentials in a secure manner</li> <li>to verify the identity one or both parties in exchanging messages,     for example identity verification within Transport Layer Security (TLS)</li> </ol> <p>OpenID Connect is widely used as an identity layer on top of the OAuth 2.0 protocol, see the OAuth 2.0 Protocol Cheat Sheet.</p>"},{"location":"en/02-foundations/04-crypto-principles/#integrity","title":"Integrity","text":"<p>Integrity ensures that even authorized users have performed no accidental or malicious alternation of information. Cryptography can be used to prevent tampering by means of Message Authentication Codes (MACs) or digital signatures.</p> <p>The term 'message authenticity' refers to ensuring the integrity of information, often using symmetric encryption and shared keys, but does not authenticate the sending party.</p> <p>The term 'authenticated encryption' also ensures the integrity of information, and, if asymmetric encryption is used, can authenticate the sender.</p>"},{"location":"en/02-foundations/04-crypto-principles/#non-repudiation","title":"Non-repudiation","text":"<p>Non-repudiation of sender ensures that someone sending a message should not be able to deny later that they have sent it. Non-repudiation of receiver means that the receiver of a message should not be able to deny that they have received it. Cryptography can be used to provide non-repudiation by providing unforgeable messages or replies to messages.</p> <p>Non-repudiation is useful for financial, e-commerce, and contractual exchanges. It can be accomplished by having the sender or recipient digitally sign some unique transactional record.</p>"},{"location":"en/02-foundations/04-crypto-principles/#attestation","title":"Attestation","text":"<p>Attestation is the act of \"bearing witness\" or certifying something for a particular use or purpose. Attestation is generally discussed in the context of a Trusted Platform Module (TPM), Digital Rights Management (DRM), and UEFI Secure Boot.</p> <p>For example, Digital Rights Management is interested in attesting that your device or system hasn't been compromised with some back-door to allow someone to illegally copy DRM-protected content.</p> <p>Cryptography can be used to provide a chain of evidence that everything is as it is expected to be, to prove to a challenger that everything is in accordance with the challenger's expectations. For example, remote attestation can be used to prove to a challenger that you are indeed running the software that you claim that you are running. Most often attestation is done by providing a chain of digital signatures starting with a trusted (digitally signed) boot loader.</p>"},{"location":"en/02-foundations/04-crypto-principles/#cryptographic-hashes","title":"Cryptographic hashes","text":"<p>Cryptographic hashes, also known as message digests, are functions that map arbitrary length bit strings to some fixed length bit string known as the 'hash value' or 'digest value'. These hash functions are many-to-one mappings that are compression functions.</p> <p>Cryptographic hash functions are used to provide data integrity (i.e., to detect intentional data tampering), to store passwords or pass phrases, and to provide digital signatures in a more efficient manner than using asymmetric ciphers. Cryptographic hash functions are also used to extend a relatively small bit of entropy so that secure random number generators can be constructed.</p> <p>When used to provide data integrity, cryptographic functions provide two types of integrity: keyed hashes, often called 'message authentication codes', and unkeyed hashes called 'message integrity codes'.</p>"},{"location":"en/02-foundations/04-crypto-principles/#ciphers","title":"Ciphers","text":"<p>A cipher is an algorithm that performs encryption or decryption. Modern ciphers can be categorized in a couple of different ways. The most common distinctions between them are:</p> <ul> <li>Whether they work on fixed size number of bits (block ciphers) or on a continuous stream of bits (stream ciphers)</li> <li>Whether the same key is used for both encryption and decryption (symmetric ciphers)     or separate keys for encryption and decryption (asymmetric ciphers)</li> </ul>"},{"location":"en/02-foundations/04-crypto-principles/#symmetric-ciphers","title":"Symmetric Ciphers","text":"<p>Symmetric ciphers encrypt and decrypt using the same key. This implies that if one party encrypts data that a second party must decrypt, those two parties must share a common key.</p> <p>Symmetric ciphers come in two main types:</p> <ol> <li>Block ciphers, which operate on a block of characters (typically 8 or 16 octets) at a time.     An example of a block cipher is AES</li> <li>Stream ciphers, which operate on a single bit (or occasionally a single byte) at a time.     Examples of a stream ciphers are RC4 (aka, ARC4) and Salsa20</li> </ol> <p>Note that all block ciphers can also operate in 'streaming mode' by selecting the appropriate cipher mode.</p>"},{"location":"en/02-foundations/04-crypto-principles/#cipher-modes","title":"Cipher Modes","text":"<p>Block ciphers can function in different modes of operations known as \"cipher modes\". This cipher mode algorithmically describes how a cipher operates to repeatedly apply its encryption or decryption mechanism to a given cipher block. Cipher modes are important because they have an enormous impact on both the confidentiality and the message authenticity of the resulting ciphertext messages.</p> <p>Almost all cryptographic libraries support the four original DES cipher modes of ECB, CBC (Cipher Block Chaining) OFB (Output Feedback), and CFB (Cipher Feedback). Many also support CTR (Counter) mode.</p>"},{"location":"en/02-foundations/04-crypto-principles/#initialization-vector","title":"Initialization vector","text":"<p>A cryptographic initialization vector (IV) is a fixed size input to a block cipher's encryption / decryption primitive. The IV is recommended (and in many cases, required) to be random or at least pseudo-random.</p>"},{"location":"en/02-foundations/04-crypto-principles/#padding","title":"Padding","text":"<p>Except when they are operating in a streaming mode, block ciphers generally operate on fixed size blocks. These block ciphers must also operate on messages of any size, not just those that are an integral multiple of the cipher's block size, and so the message can be padded to fit into the next fixed-size block.</p>"},{"location":"en/02-foundations/04-crypto-principles/#asymmetric-ciphers","title":"Asymmetric ciphers","text":"<p>Asymmetric ciphers  encrypt and decrypt  with two different keys. One key generally is designated as the private key and the other is designated as the public key. Generally the public key is widely shared and the private key is kept secure.</p> <p>Asymmetric ciphers are several orders of magnitude slower than symmetric ciphers. For this reason they are used frequently in hybrid cryptosystems, which combine asymmetric and symmetric ciphers. In such hybrid cryptosystems, a random symmetric session key is generated which is only used for the duration of the encrypted communication. This random session key is then encrypted using an asymmetric cipher and the recipient's private key. The plaintext data itself is encrypted with the session key. Then the entire bundle (encrypted session key and encrypted message) is all sent together. Both TLS and S/MIME are common cryptosystems using hybrid cryptography.</p>"},{"location":"en/02-foundations/04-crypto-principles/#digital-signature","title":"Digital signature","text":"<p>Digital signatures are a cryptographically unique data string that is used to ensure data integrity and prove the authenticity of some digital message, and that associates some input message with an originating entity. A digital signature generation algorithm is a cryptographically strong algorithm that is used to generate a digital signature.</p>"},{"location":"en/02-foundations/04-crypto-principles/#key-agreement-protocol","title":"Key agreement protocol","text":"<p>Key agreement protocols are protocols whereby N parties (usually two) can agree on a common key without actually exchanging the key. When designed and implemented properly, key agreement protocols prevent adversaries from learning the key or forcing their own key choice on the participating parties.</p>"},{"location":"en/02-foundations/04-crypto-principles/#application-level-encryption","title":"Application level encryption","text":"<p>Application level encryption refers to encryption that is considered part of the application itself; it implies nothing about where in the application code the encryption is actually done.</p>"},{"location":"en/02-foundations/04-crypto-principles/#key-derivation","title":"Key derivation","text":"<p>A key derivation function (KDF) is a deterministic algorithm to derive a key of a given size from some secret value. If two parties use the same shared secret value and the same KDF, they should always derive exactly the same key.</p>"},{"location":"en/02-foundations/04-crypto-principles/#key-wrapping","title":"Key wrapping","text":"<p>Key wrapping is a construction used with symmetric ciphers to protect cryptographic key material by encrypting it in a special manner. Key wrap algorithms are intended to protect keys while held in untrusted storage or while transmitting keys over insecure communications networks.</p>"},{"location":"en/02-foundations/04-crypto-principles/#key-exchange-algorithms","title":"Key exchange algorithms","text":"<p>Key exchange algorithms (also referred to as key establishment algorithms) are protocols that are used to exchange secret cryptographic keys between a sender and receiver in a manner that meets certain security constraints. Key exchange algorithms attempt to address the problem of securely sharing a common secret key with two parties over an insecure communication channel in a manner that no other party can gain access to a copy of the secret key.</p> <p>The most familiar key exchange algorithm is Diffie-Hellman Key Exchange. There are also password authenticated key exchange algorithms. RSA key exchange using PKI or webs-of-trust or trusted key servers are also commonly used.</p>"},{"location":"en/02-foundations/04-crypto-principles/#key-transport-protocols","title":"Key transport protocols","text":"<p>Key Transport protocols are where one party generates the key and sends it securely to the recipient(s).</p>"},{"location":"en/02-foundations/04-crypto-principles/#key-agreement-protocols","title":"Key agreement protocols","text":"<p>Key Agreement protocols are protocols whereby N parties (usually two) can agree on a common key with all parties contributing to the key value. These protocols prevent adversaries from learning the key or forcing their own key choice on the participating parties.</p>"},{"location":"en/02-foundations/04-crypto-principles/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet series</li> <li>Authentication</li> <li>Authorization</li> <li>Cryptographic Storage</li> <li>Key Management</li> <li>OAuth 2.0 Protocol</li> <li>SAML Security</li> <li>Secure Product Design</li> <li>User Privacy Protection</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/02-foundations/05-top-ten/","title":"OWASP Top 10","text":"<p>The OWASP Top Ten is a very well known list of web application security risks, and is included by the OWASP Software Assurance Maturity Model (SAMM) in the Education &amp; Guidance practice within the Governance business function.</p>"},{"location":"en/02-foundations/05-top-ten/#overview","title":"Overview","text":"<p>The OWASP Top 10 Web Application Security Risks project is probably the most well known security concept within the security community, achieving wide spread acceptance and fame soon after its release in 2003. Often referred to as just the 'OWASP Top Ten', it is a list that identifies the most important threats to web applications and seeks to rank them in importance and severity.</p> <p>The list has changed over time, with some threat types becoming more of a problem to web applications and other threats becoming less of a risk as technologies change. The latest version was issued in 2021 and each category is summarized below.</p> <p>Note that there are various 'OWASP Top Ten' projects, for example the 'OWASP Top 10 for Large Language Model Applications', so to avoid confusion the context should be noted when referring to these lists.</p>"},{"location":"en/02-foundations/05-top-ten/#a012021-broken-access-control","title":"A01:2021 Broken Access Control","text":"<p>Access control involves the use of protection mechanisms that can be categorized as:</p> <ul> <li>Authentication (proving the identity of an actor)</li> <li>Authorization (ensuring that a given actor can access a resource)</li> <li>Accountability (tracking of activities that were performed)</li> </ul> <p>Broken Access Control is where the product does not restrict, or incorrectly restricts, access to a resource from an unauthorized or malicious actor. When a security control fails or is not applied then attackers can compromise the security of the product by gaining privileges, reading sensitive information, executing commands, evading detection, etc.</p> <p>Broken Access Control can take many forms, such as path traversal or elevation of privilege, so refer to both the Common Weakness Enumeration CWE-284 and A01 Broken Access Control and also follow the various OWASP Cheat Sheets related to access controls.</p>"},{"location":"en/02-foundations/05-top-ten/#a022021-cryptographic-failures","title":"A02:2021 Cryptographic Failures","text":"<p>Referring to OWASP Top 10 A02:2021, sensitive data should be protected when at rest and in transit. Cryptographic failures occur when the cryptographic security control is either broken or not applied, and the data is exposed to unauthorized actors - malicious or not.</p> <p>It is important to protect data both at rest, when it is stored in an area  of memory, and also when it is in transit such as being transmitted across a communication channel or being transformed. A good example of protecting data transformation is given by A02 Cryptographic Failures where sensitive data is properly encrypted in a database, but the export function automatically decrypts the data leading to sensitive data exposure.</p> <p>Crypto failures can take many forms and may be subtle - a security control that looks secure may be easily broken. Follow the crypto OWASP Cheat Sheets to get the basic crypto controls in place and consider putting a crypto audit in place.</p>"},{"location":"en/02-foundations/05-top-ten/#a032021-injection","title":"A03:2021 Injection","text":"<p>A lack of input validation and sanitization can lead to injection exploits, and this risk has been a constant feature of the OWASP Top Ten since the first version was published in 2003. These vulnerabilities occur when hostile data is directly used within the application and can result in malicious data being used to subvert the application; see A03 Injection for further explanations.</p> <p>The security control is straight forward: all input from untrusted sources should be sanitized and validated. See the Injection Cheat Sheets for the various types of input and their controls.</p>"},{"location":"en/02-foundations/05-top-ten/#a042021-insecure-design","title":"A04:2021 Insecure Design","text":"<p>It is important that security is built into applications from the beginning and not applied as an afterthought. The A04 Insecure Design category recognizes this and advises that the use of threat modeling, secure design patterns, and reference architectures should be incorporated within the application design and architecture activities.</p> <p>In practice this involves establishing a secure development lifecycle that encourages the identification of security requirements, the periodic use of threat modeling and consideration of existing secure libraries and frameworks. This category was introduced in the 2021 version and for now the supporting cheat sheets only cover threat modeling; as this category becomes more established it is expected that more supporting information will become available.</p>"},{"location":"en/02-foundations/05-top-ten/#a052021-security-misconfiguration","title":"A05:2021 Security Misconfiguration","text":"<p>Systems and large applications can be configurable, and this configuration is often used to secure the system/application. If this configuration is misapplied then the application may no longer be secure, and instead be vulnerable to well-known exploits. The A05 Security Misconfiguration page contains a common example of misconfiguration where default accounts and their passwords are still enabled and unchanged. These passwords and accounts are usually well-known and provide an easy way for malicious actors to compromise applications.</p> <p>Both the OWASP Top 10 A05:2021 and the linked OWASP Cheat Sheets provide strategies to establish a concerted, repeatable application security configuration process to minimize misconfiguration.</p>"},{"location":"en/02-foundations/05-top-ten/#a062021-vulnerable-and-outdated-components","title":"A06:2021 Vulnerable and Outdated Components","text":"<p>Perhaps one of the easiest and most effective security activities is keeping all the third party software dependencies up to date. If a vulnerable dependency is identified by a malicious actor during the reconnaissance phase of an attack then there are databases available, such as Exploit Database, that will provide a description of any exploit. These databases can also provide ready made scripts and techniques for attacking a given vulnerability, making it easy for vulnerable third party software dependencies to be exploited .</p> <p>Risk A06 Vulnerable and Outdated Components underlines the importance of this activity, and recommends that fixes and upgrades to the underlying platform, frameworks, and dependencies are based on a risk assessment and done in a 'timely fashion'. Several tools can used to analyze dependencies and flag vulnerabilities, refer to the Cheat Sheets for these.</p>"},{"location":"en/02-foundations/05-top-ten/#a072021-identification-and-authentication-failures","title":"A07:2021 Identification and Authentication Failures","text":"<p>Confirmation of the user's identity, authentication, and session management is critical to protect the system or application against authentication related attacks. Referring to risk A07 Identification and Authentication Failures, authorization can fail in several ways that often involve other OWASP Top Ten risks:</p> <ul> <li>broken access controls (A01)</li> <li>cryptographic failure (A02)</li> <li>default passwords (A05)</li> <li>out-dated libraries (A06)</li> </ul> <p>Refer to the Cheat Sheets for the several good practices that are needed for secure authorization. There are also third party suppliers of Identity and Access Management (IAM) that will provide this as a service, consider the cost / benefit of using these (often commercial) suppliers.</p>"},{"location":"en/02-foundations/05-top-ten/#a082021-software-and-data-integrity-failures","title":"A08:2021 Software and Data Integrity Failures","text":"<p>Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. This is a wide ranging category that describes supply chain attacks, compromised auto-update and use of untrusted components for example. A07 Software and Data Integrity Failures was a new category introduced in 2021 so there is little information available from the Cheat Sheets, but this is sure to change for such an important threat.</p>"},{"location":"en/02-foundations/05-top-ten/#a092021-security-logging-and-monitoring-failures","title":"A09:2021 Security Logging and Monitoring Failures","text":"<p>Logging and monitoring helps detect, escalate, and respond to active breaches; without it breaches will not be detected. A09 Security Logging and Monitoring Failures lists various logging and monitoring techniques that should be familiar, but also others that may not be so common; for example monitoring the DevOps supply chain may be just as important as monitoring the application or system. The Cheat Sheets provide guidance on sufficient logging and also provide for a common logging vocabulary. The aim of this common vocabulary is to provide logging that uses a common set of terms, formats and key words; and this allows for easier monitoring, analysis and alerting.</p>"},{"location":"en/02-foundations/05-top-ten/#a102021-server-side-request-forgery","title":"A10:2021 Server-Side Request Forgery","text":"<p>Referring to A10 Server-Side Request Forgery (SSRF), these vulnerabilities can occur whenever a web application is fetching a remote resource without validating the user-supplied URL. These exploits allow an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list. Fetching a URL has become a common scenario for modern web applications and as a result the incidence of SSRF is increasing, especially for cloud services and more complex application architectures.</p> <p>This is a new category introduced in 2021 with a single (for now) Cheat Sheet that deals with SSRF.</p>"},{"location":"en/02-foundations/05-top-ten/#owasp-top-tens","title":"OWASP top tens","text":"<p>There are various 'Top 10' projects created by OWASP that, depending on the context, may also be referred to as 'OWASP Top 10'. Here is a list of the stable 'OWASP Top 10' projects:</p> <ul> <li>API Security Top 10</li> <li>Data Security Top 10</li> <li>Low-Code/No-Code Top 10</li> <li>Mobile Top 10</li> <li>Serverless Top 10</li> <li>Top 10 CI/CD Security Risks</li> <li>Top 10 for Large Language Model Applications</li> <li>Top 10 Privacy Risks</li> <li>Top 10 Proactive Controls</li> <li>Top 10 Web Application Security Risks</li> </ul> <p>Other OWASP Top 10s are 'incubator' projects, which are work in progress, so this list will change over time.</p> <p>The OWASP Developer Guide is a community effort; if you see something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/","title":"Overview","text":"<p>Security requirements are statements of security functionality that ensure the different security properties of a software application are being satisfied. Security requirements are derived from industry standards, applicable laws, and a history of past vulnerabilities. Security requirements define new features or additions to existing features to solve a specific security problem or eliminate potential vulnerabilities.</p> <p>Security requirements also provide a foundation of vetted security functionality for an application. Instead of creating a custom approach to security for every application, standard security requirements allow developers to reuse the definition of security controls and best practices; those same vetted security requirements provide solutions for security issues that have occurred in the past.</p> <p>The importance of understanding key security requirements is described in the Security Requirements practice that is part of the Design business function section within the OWASP SAMM model. Ideally structured software security requirements are available within with a security a requirements framework, and these are utilized by both developer teams and product teams. In addition suppliers to the organization must meet security requirements; build security into supplier agreements in order to ensure compliance with organizational security requirements.</p> <p>In summary, security requirements exist to prevent the repeat of past security failures.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/01-requirements/","title":"Requirements in practice","text":"<p>This section deals with Security Requirements, which is a security practice in the Design business function section of the OWASP Software Assurance Maturity Model (SAMM). This security requirements practice has two activities, Software Requirements and Supplier Security, with regulatory and statutory requirements being an important subset of both these activities.</p>"},{"location":"en/03-requirements/01-requirements/#overview","title":"Overview","text":"<p>Security requirements are part of every secure development process and form the foundation for the application's security posture. Requirements will certainly help with the prevention of many types of vulnerabilities.</p> <p>Requirements come from various sources, three common ones being:</p> <ol> <li>Software-related requirements which specify objectives and expectations     to protect the service and data at the core of the application</li> <li>Requirements relative to supplier organizations that are part of the development context of the application</li> <li>Regulatory and Statutory requirements</li> </ol> <p>Ideally security requirements are built in at the beginning of development, but there is no wrong time to consider these security requirements and add new ones as necessary.</p>"},{"location":"en/03-requirements/01-requirements/#software-requirements","title":"Software requirements","text":"<p>Defining security requirements can be daunting at times, for example they may reference cryptographic techniques that can be misapplied, but it is perfectly acceptable to state these requirements in everyday language. For example a security requirement could be written as \u201cIdentify the user of the application at all times\u201d and this is certainly sufficient to require that authentication is included in the design.</p> <p>The SAMM Security Requirements practice lists maturity levels of software security requirements that specify objectives and expectations. Choose the level that is appropriate for the organization and the development team, with the understanding that any of these levels are perfectly acceptable.</p> <p>The software security requirements maturity levels are:</p> <ol> <li>High-level application security objectives are mapped to functional requirements</li> <li>Structured security requirements are available and utilized by developer teams</li> <li>Build a requirements framework for product teams to utilize</li> </ol> <p>OWASP provides projects that can help in identifying security requirements that will protect the service and data at the core of the application. The Application Security Verification Standard provides a list of requirements for secure development, and this can be used as a starting point for the security requirements. The Mobile Application Security provides a similar set of standard security requirements for mobile applications.</p> <p>Consider using Abuse Cases to identify possible attacks and the controls required to mitigate them. This can then feed into the software security requirements.</p>"},{"location":"en/03-requirements/01-requirements/#supplier-security","title":"Supplier security","text":"<p>External suppliers involved in the development process need to be assessed for their security practices and compliance. Depending on their level of involvement these suppliers can have a significant impact on the security of the application so a set of security requirements will have to be negotiated with them.</p> <p>SAMM lists maturity levels for the security requirements that will clarify the strengths and weaknesses of your suppliers. Note that supplier security is distinct from security of third-party software and libraries, and the use of third-party and open source software is discussed in its own section on dependency checking and tracking.</p> <p>The supplier security requirements maturity levels are:</p> <ol> <li>Evaluate the supplier based on organizational security requirements</li> <li>Build security into supplier agreements in order to ensure compliance with organizational requirements</li> <li>Ensure proper security coverage for external suppliers by providing clear objectives</li> </ol>"},{"location":"en/03-requirements/01-requirements/#regulatory-and-statutory-requirements","title":"Regulatory and statutory requirements","text":"<p>Regulatory requirements can include security requirements which then must be taken into account. Different industries are regulated are regulated to a lesser or greater extent, and the only general advice is to be aware and follow the regulations.</p> <p>Various jurisdictions will have different statutory requirements that may result in security requirements. Any applicable statutory security requirement should be added to the application security requirements. Similarly to regulatory requirements, the only general advice is to be familiar with and follow the appropriate statutory requirements.</p>"},{"location":"en/03-requirements/01-requirements/#periodic-review","title":"Periodic review","text":"<p>The security requirements should be identified and recorded at the beginning of any new development and also when new features are added to an existing application. These security requirements should be periodically revisited and revised as necessary; for example security standards are updated and new regulations come into force, both of which may have a direct impact on the application.</p>"},{"location":"en/03-requirements/01-requirements/#references","title":"References","text":"<ul> <li>OWASP projects:</li> <li>Software Assurance Maturity Model (SAMM)</li> <li>Top Ten Proactive Controls</li> <li>Application Security Verification Standard (ASVS)</li> <li>Mobile Application Security</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/02-risk/","title":"Risk profile","text":"<p>This section discusses the Application Risk Profile, an activity in the OWASP Software Assurance Maturity Model (SAMM). The risk profile activity is part of the Threat Assessment security practice in the Design business function.</p>"},{"location":"en/03-requirements/02-risk/#overview","title":"Overview","text":"<p>Risk management\u00a0is the identification, assessment, and prioritization of\u00a0risks\u00a0to the application or system. The objective of risk management is to ensure\u00a0that uncertainty\u00a0does not deflect development activities away from the business goals.</p> <p>Remediation is the strategy chosen in response to a risk to the business system, and these risks are identified using various techniques such as threat modeling and security requirements analysis.</p> <p>Risk management can be split into two phases. First create a risk profile for the application and then provide solutions (remediate) to those risks in a way that is best for the business; risk management should always be business driven.</p>"},{"location":"en/03-requirements/02-risk/#application-risk-profile","title":"Application risk profile","text":"<p>The application risk profile is created to understand the likelihood and also the impact of an attack. Over time various profiles could be created and these should be stored in a risk profile inventory, and ideally the risk profiles should be revisited as part of the organization's secure development strategy.</p> <p>Quantifying risks is often difficult and there are many ways of approaching this; refer to the reading list below for various strategies in creating a risk rating model. The OWASP page on Risk Rating Methodology describes some steps in identifying risks and quantifying them:</p> <ol> <li>Identifying a risk</li> <li>Factors for estimating likelihood</li> <li>Factors for estimating impact</li> <li>Determining severity of the risk</li> <li>Deciding what to fix</li> <li>Customizing the risk rating model</li> </ol> <p>The activities involved in creating a risk profile depend very much on the processes and maturity level of the organization, which is beyond the level of this Developer Guide, so refer to the further reading listed below for guidance and examples.</p>"},{"location":"en/03-requirements/02-risk/#remediation","title":"Remediation","text":"<p>Risks identified during threat assessment, for example through the risk profile or through threat modeling, should have solutions or remedies applied.</p> <p>There are four common ways to handle risk, often given the acronym TAME:</p> <ol> <li> <p>Transfer: the risk is considered serious but can be transferred to another party</p> </li> <li> <p>Acceptance: the business is aware of the risk but has decided that no action needs to be taken;     the level of risk is deemed acceptable</p> </li> <li> <p>Mitigation: the risk is considered serious enough to require implementation of security controls     to reduce the risk to an acceptable level</p> </li> <li> <p>Eliminate / Avoid: the risk can be avoided or removed completely,     often by removing the object with which the risk is associated</p> </li> </ol> <p>Examples:</p> <ol> <li> <p>Transfer: a common example of transferring risk is the use of third party insurance     in response to the risk of RansomWare.     Insurance premiums are paid but losses to the business are covered by the insurance</p> </li> <li> <p>Acceptance: sometimes a risk is low enough in priority, or the outcome bearable, that it is not worth mitigating,     an example might be where the version of software is revealed but this is acceptable (or even desirable)</p> </li> <li> <p>Mitigation: it is common to implement a security control to mitigate the impact of a risk, for example     input sanitization or output encoding may be used for information supplied by an untrusted source,     or the use of encrypted communication channels for transferring high risk information</p> </li> <li> <p>Eliminate: an example may be that an application implements legacy functionality that is no longer used,     if there is a risk of it being exploited then the risk can be eliminated by removing this legacy functionality</p> </li> </ol>"},{"location":"en/03-requirements/02-risk/#references","title":"References","text":"<ul> <li>OWASP Risk Rating Methodology</li> <li>NIST 800-30 - Guide for Conducting Risk Assessments</li> <li>Government of Canada - The Harmonized Threat and Risk Assessment Methodology</li> <li>Mozilla's Risk Assessment Summary and Rapid Risk Assessment (RRA)</li> <li>Common Vulnerability Scoring System (CVSS) used for severity and risk ranking</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/03-opencre/","title":"OpenCRE","text":"<p>The Open Common Requirement Enumeration (OpenCRE) is a catalog of security requirements: enumerating security topics and providing links to various standards, cheat sheets and guides.</p> <p>The OWASP Integration Standards project includes both the OpenCRE and Security and the Application Security Wayfinder, it is an OWASP documentation project with production status.</p>"},{"location":"en/03-requirements/03-opencre/#what-is-the-integration-standards-project","title":"What is the Integration Standards project?","text":"<p>The Integration Standards project is at the center of the OWASP project community; it provides guidance on how to navigate and use the many projects within OWASP. It does this in two ways, first is the Application Security Wayfinder which provides a visual map of the most important OWASP projects - as of August 2024 there are 345 OWASP projects so this is a really useful visualization. The second is the Open Common Requirement Enumeration (OpenCRE) which provides a consolidated reference of standards, cheat sheets, tools and other enumerations (such as CWE).</p> <p>The Integration Standards project has also produced OWASP Application Security Fragmentation write-up on OWASP and the secure Software Development LifeCycle (SDLC). This provides an overview of tools and techniques used for most SDLCs.</p>"},{"location":"en/03-requirements/03-opencre/#what-is-opencre","title":"What is OpenCRE?","text":"<p>OpenCRE is a catalog, or enumeration, of various standards and reference material, including:</p> <ul> <li>CAPEC</li> <li>CWE</li> <li>NIST Special Publications 800-53 and 800-63</li> <li>OWASP ASVS</li> <li>OWASP Top10</li> <li>OWASP Proactive Controls</li> <li>OWASP Cheat Sheets</li> <li>OWASP WSTG</li> <li>ZAP</li> </ul> <p>The aim of this project is to 'Link all the things with OpenCRE' which will:</p> <ul> <li>make it easier for engineers, security officers, testers and procurement to find relevant information</li> <li>make it easier for standards makers to create and maintain references</li> </ul>"},{"location":"en/03-requirements/03-opencre/#why-use-opencre","title":"Why use OpenCRE?","text":"<p>OpenCRE: 'Everything organized'</p> <p>OpenCRE is a powerful tool that can provide developers with links to many resources, and is easy to use. It provides a one-stop consolidated set of references on various security terms and domains, and crucially these are automatically kept up to date. The provides a handy security catalog that can be searched for various standards or security terms.</p> <p>As well as being useful for day to day security questions, the OpenCRE can also be used as the reference section in documentation; linking across to the OpenCRE rather than providing a list of references means the links are kept up to date automatically.</p>"},{"location":"en/03-requirements/03-opencre/#how-to-use-opencre","title":"How to use OpenCRE","text":"<p>The OpenCRE catalog can be accessed in traditional ways such as using searches or linking across to it. For example OpenCRE references to the Common Weakness Enumeration can be accessed using the search facility or by linking across directly to a specific Open Common Requirement.</p> <p>OpenCRE is also useful when providing references in documentation. OpenCRE can be used for these references instead of listing various references to a security concept or requirement. This will provide links to standards, cheat sheets, tools and other enumerations - along with other sources that have been added over time - and all kept up to date. So no more broken links or referring to out of date versions :)</p> <p>This is now the age of large language models, and OpenCRE has embraced this technology. Immediate answers to security questions or searches can be provided by OpenCRE Chat.</p> <p>For example, in answer to the question \"what use is the OWASP Developer Guide?\" OpenCRE Chat provides the agreeable answer:</p> <p>\"The OWASP Developer Guide provides a comprehensive overview of application security risks and how to mitigate them. It covers topics such as input validation, output encoding, secure coding practices, and secure design principles. The guide is a valuable resource for developers who want to create secure applications.\"</p>"},{"location":"en/03-requirements/03-opencre/#references","title":"References","text":"<ul> <li>OWASP OpenCRE</li> <li>Spotlight on OpenCRE</li> <li>OWASP Application Security Fragmentation</li> <li>OWASP Integration Standards project</li> <li>Understanding the Complete Chain of Application Security Using OpenCRE org</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/04-security-rat/","title":"SecurityRAT","text":"<p>The OWASP SecurityRAT (Requirement Automation Tool) is used to generate and manage security requirements using information from the OWASP ASVS project. It also provides an automated approach to requirements management during development of frontend, server and mobile applications.</p> <p>At present it is an OWASP Incubator project but it is likely to be upgraded soon to Laboratory status.</p>"},{"location":"en/03-requirements/04-security-rat/#what-is-securityrat","title":"What is SecurityRAT?","text":"<p>SecurityRAT is a companion tool for the ASVS set of requirements; it can be used to generate an initial set of requirements from the ASVS and then keep track of the status and updates for these requirements. It comes with documentation and instructions on how to install and run SecurityRAT.</p> <p>To generate the initial list of requirements, SecurityRAT needs to be provided with three attributes defined by the ASVS:</p> <ul> <li>Application Security Verification Standard chapter ID - for example 'V2 - Authentication'</li> <li>Application Security Verification Level - the compliance level, for example 'L2'</li> <li>Authentication - whether Single sign-on (SSO) authentication is used or not</li> </ul> <p>SecurityRAT then generates an initial list of recommended requirements. This list can be stored in a SecurityRAT database which allows tracking and update of the set of requirements. SecurityRAT also provides Atlassian JIRA integration for raising and tracking software issues.</p> <p>The OWASP Spotlight series provides an overview of what Security Rat can do and how to use it: 'Project 5 - OWASP SecurityRAT'.</p>"},{"location":"en/03-requirements/04-security-rat/#why-use-it","title":"Why use it?","text":"<p>At the time of writing the ASVS has more than 280 suggested requirements for secure software development. This number of requirements takes time to sort through and determine whether they are applicable to a given development project or not.</p> <p>The use of SecurityRAT to create a more manageable subset of the ASVS requirements is a direct benefit to both security architects and the development team. In addition SecurityRAT provides for the tracking and update of this set of requirements throughout the development cycle, adding to the security of the application by helping to ensure security requirements are fulfilled.</p>"},{"location":"en/03-requirements/04-security-rat/#how-to-use-securityrat","title":"How to use SecurityRAT","text":"<p>Install both Production and Development SecurityRAT applications by downloading a release and installing on the Java Development Kit JDK11. Alternatively download and run the docker image from DockerHub. Configure SecurityRAT by referring to the deployment documentation; this is not that straightforward so to get started there is an online demonstration available.</p> <p>Logging in to the demonstration site, using the credentials from the project page, you are presented with defining a set of requirements or importing an existing set. Assuming that we want a new set of requirements, give the requirements artifact a name and then either select specific ASVS sections/chapters from the list:</p> <ul> <li>V1 - Architecture, Design and Threat Modeling</li> <li>V2 - Authentication</li> <li>V3 - Session Management</li> <li>V4 - Access Control</li> <li>V5 - * Validation, Sanitization and Encoding</li> <li>V6 - Stored Cryptography</li> <li>V7 - Error Handling and Logging</li> <li>V8 - Data Protection</li> <li>V9 - Communication</li> <li>V10 - Malicious Code</li> <li>V11 - Business Logic</li> <li>V12 - Files and Resources</li> <li>V13 - API and Web Service</li> <li>V14 - Configuration</li> </ul> <p>or leave blank to include all verification requirements.</p> <p>Select the level using the ASVS defined security compliance levels:</p> <ul> <li>Level 1 is for low assurance levels and is completely penetration testable</li> <li>Level 2 is for applications that contain sensitive data and is the recommended level for most applications</li> <li>Level 3 is for the most critical applications</li> </ul> <p>Finally select whether SSO authentication is being used, and generate a list of requirements. This requirements artifact is now stored in SecurityRAT ad can be retrieved in subsequent sessions.</p> <p>SecurityRAT then presents an administration screen which allows tracking and editing of the ASVS verification requirements. Refer to the OWASP Spotlight on SecurityRAT for an explanation of how to integrate with Atlassian JIRA.</p>"},{"location":"en/03-requirements/04-security-rat/#what-is-securitycat","title":"What is SecurityCAT?","text":"<p>SecurityCAT (Compliance Automation Tool) is an extension for SecurityRAT meant for automatic testing of requirements. There is not an actual implementation of SecurityCAT, SecurityRAT provides an API that allows for a compliance tool to be created. and so this may be a future development for SecurityRAT.</p>"},{"location":"en/03-requirements/04-security-rat/#references","title":"References","text":"<ul> <li>OWASP SecurityRAT</li> <li>OWASP SecurityRAT documentation</li> <li>OWASP SecurityCAT</li> <li>OWASP Application Security Verification Standard (ASVS)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/05-asvs/","title":"ASVS","text":"<p>The Application Security Verification Standard (ASVS) is a long established OWASP flagship project, and is widely used to suggest security requirements as well as the core verification of web applications.</p> <p>It can be downloaded from the OWASP project page in various languages and formats: PDF, Word, CSV, XML and JSON. Having said that, the recommended way to consume the ASVS is to access the github markdown pages directly - this will ensure that the latest version is used.</p>"},{"location":"en/03-requirements/05-asvs/#what-is-asvs","title":"What is ASVS?","text":"<p>The ASVS is an open standard that sets out the coverage and level of rigor expected when it comes to performing web application security verification. The standard also provides a basis for testing any technical security controls that are relied on to protect against vulnerabilities in the application.</p> <p>The ASVS is split into various sections:</p> <ul> <li>V1 Architecture, Design and Threat Modeling</li> <li>V2 Authentication</li> <li>V3 Session Management</li> <li>V4 Access Control</li> <li>V5 Validation, Sanitization and Encoding</li> <li>V6 Stored Cryptography</li> <li>V7 Error Handling and Logging</li> <li>V8 Data Protection</li> <li>V9 Communication</li> <li>V10 Malicious Code</li> <li>V11 Business Logic</li> <li>V12 Files and Resources</li> <li>V13 API and Web Service</li> <li>V14 Configuration</li> </ul> <p>The ASVS defines three levels of security verification:</p> <ol> <li>applications that only need low assurance levels; these applications are completely penetration testable</li> <li>applications which contain sensitive data that require protection; the recommended level for most applications</li> <li>the most critical applications that require the highest level of trust</li> </ol> <p>Most applications will aim for Level 2, with only those applications that perform high value transactions, or contain sensitive medical data, aiming for the highest level of trust at level 3.</p>"},{"location":"en/03-requirements/05-asvs/#why-use-it","title":"Why use it?","text":"<p>The ASVS is used by many organizations as a basis for the verification of their web applications. It is well established, the earlier versions were written in 2008, and it has been continually supported since then. The ASVS is comprehensive, for example version 4.0.3 has a list of 286 verification requirements, and these verification requirements have been created and agreed to by a wide security community.</p> <p>For these reasons the ASVS is a good starting point for creating and updating security requirements for web applications. The widespread use of this open standard means that development teams and suppliers may already be familiar with the requirements, leading to easier adoption of the security requirements.</p>"},{"location":"en/03-requirements/05-asvs/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of the ASVS and its uses: 'Project 19 - OWASP Application Security Verification standard (ASVS)'.</p> <p>The appropriate level of verification should be chosen from the ASVS levels:</p> <ul> <li>Level 1: First steps, automated, or whole of portfolio view</li> <li>Level 2: Most applications</li> <li>Level 3: High value, high assurance, or high safety</li> </ul> <p>Tools such as SecurityRAT can help create a more manageable subset of the ASVS security requirements, allowing focus and decisions on whether each one is applicable to the web application or not.</p> <p>The OWASP Cheat Sheets have been indexed specifically for each section of the ASVS, which can be used as documentation to help decide if a requirements category is to be included in the test scheme.</p>"},{"location":"en/03-requirements/05-asvs/#references","title":"References","text":"<ul> <li>OWASP Application Security Verification Standard (ASVS)</li> <li>OWASP Cheat Sheets for ASVS</li> <li>OWASP SecurityRAT</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/06-mas/","title":"MAS","text":"<p>The OWASP Mobile Application Security (MAS) flagship project provides industry standards for mobile application security.</p> <p>The MAS project covers the processes, techniques, and tools used for security testing mobile applications. It provides a set of test cases that enables testers to deliver consistent and complete results. The OWASP MAS project provides both the Mobile Application Security Verification Standard (MASVS) for mobile applications and the Mobile Application Security Testing Guide (MASTG).</p>"},{"location":"en/03-requirements/06-mas/#what-is-masvs","title":"What is MASVS?","text":"<p>The OWASP MASVS is used by mobile software architects and developers to develop secure mobile applications, as well as security testers to ensure completeness and consistency of test results. The MAS project has several uses; when it comes to defining requirements then the MASVS contains a list of security controls for mobile applications.</p> <p>The security controls are split into several categories:</p> <ul> <li>MASVS-STORAGE / Cheat Sheets</li> <li>MASVS-CRYPTO / Cheat Sheets</li> <li>MASVS-AUTH / Cheat Sheets</li> <li>MASVS-NETWORK / Cheat Sheets</li> <li>MASVS-PLATFORM / Cheat Sheets</li> <li>MASVS-CODE / Cheat Sheets</li> <li>MASVS-RESILIENCE / Cheat Sheets</li> <li>MASVS-PRIVACY / Cheat Sheets</li> </ul> <p>The last category, MASVS-PRIVACY, is being reworked so is subject to change.</p>"},{"location":"en/03-requirements/06-mas/#why-use-masvs","title":"Why use MASVS?","text":"<p>The OWASP MASVS is the industry standard for mobile application security and it is expected that any given set of security requirements will satisfy the MASVS. When defining security requirements for mobile applications then each security control in the MASVS should be considered.</p>"},{"location":"en/03-requirements/06-mas/#how-to-use-masvs","title":"How to use MASVS","text":"<p>MASVS can be accessed online and the links followed for each security control. In addition MASVS can be downloaded as a PDF which can, for example, be used for evidence or compliance purposes. Inspect each control within MASVS and regard it as a potential security requirement.</p> <p>The OWASP Cheat Sheets have been indexed specifically for each category of the MASVS, which can be used as a guide to decide if the category should to be included in the test scheme.</p>"},{"location":"en/03-requirements/06-mas/#references","title":"References","text":"<ul> <li>OWASP Mobile Application Security (MAS)</li> <li>MAS project</li> <li>MAS Checklist</li> <li>MAS Verification Standard (MASVS)</li> <li>OWASP Mobile Application Security cheat sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/03-requirements/07-skf/","title":"SKF","text":"<p>The Security Knowledge Framework (SKF) is a system that uses draws on the material in various open source projects to support development teams and security architects in building secure applications.</p> <p>Having been an OWASP flagship project for many years the SKF is now no longer within the OWASP organization; and it will continue to be referenced in the OWASP Wayfinder and other OWASP projects because it is a flagship project for any organization.</p>"},{"location":"en/03-requirements/07-skf/#what-is-the-security-knowledge-framework","title":"What is the Security Knowledge Framework?","text":"<p>The SKF is a web application that provides context and training to help security architects identity security requirements. As their website puts it: \"Training and guidance for doing AppSec right!\"</p> <p>Note that SKF is in a process of migrating to a new repository so the download links may change.</p> <p>The SKF provides guidance for application security in several areas:</p> <ul> <li>Requirements organizer</li> <li>Learning courses:</li> <li>Developing Secure Software (LFD121)</li> <li>Understanding the OWASP Top 10 Security Threats (SKF100)</li> <li>Secure Software Development: Implementation (LFD105x)</li> <li>Practice labs</li> <li>Documentation on installing and using the SKF</li> </ul> <p>The SKF builds on the OWASP Application Security Verification Standard (ASVS) to help developers in both pre-development and post-development phases and create applications that are secure by design.</p>"},{"location":"en/03-requirements/07-skf/#why-use-the-skf-for-requirements","title":"Why use the SKF for requirements?","text":"<p>The SKF organizes security requirements into various categories that provides a good starting point for application security.</p> <ul> <li>API and Web Service</li> <li>Access Control</li> <li>Architecture Design and Threat Modeling</li> <li>Authentication</li> <li>Business Logic</li> <li>Communication</li> <li>Configuration</li> <li>Data Protection</li> <li>Error Handling and Logging</li> <li>Files and Resources</li> <li>Malicious Code</li> <li>Session Management</li> <li>Stored Cryptography</li> <li>Validation Sanitization and Encoding</li> </ul>"},{"location":"en/03-requirements/07-skf/#how-to-use-the-skf-for-requirements","title":"How to use the SKF for requirements","text":"<p>There is a demo version of SKF that is useful for exploring the multiple perspectives of the SKF.</p> <p>Follow the documentation on installing and using the SKF.</p> <p>Visit the requirements tool website and select the relevant requirements from the various categories. Export the selection to the format of your choice (Markdown, spreadsheet CSV or plain text) and use this as a starting point for the application security requirements.</p> <p>The OWASP Spotlight series provides an overview of the SKF: 'Project 7 - Security Knowledge Framework (SKF)'.</p>"},{"location":"en/03-requirements/07-skf/#references","title":"References","text":"<ul> <li>Security Knowledge Framework (SKF)</li> <li>SKF courses and labs</li> <li>SKF requirements</li> <li>OWASP Application Security Verification Standard (ASVS)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/","title":"Overview","text":"<p>Referring to the Secure Product Design Cheat Sheet, the purpose of secure architecture and design is to ensure that all products meet or exceed the security requirements laid down by the organization, focusing on the security linked to components and technologies used during the development of the application.</p> <p>Secure Architecture Design looks at the selection and composition of components that form the foundation of the solution. Technology Management looks at the security of supporting technologies used during development, deployment and operations, such as development stacks and tooling, deployment tooling, and operating systems and tooling.</p> <p>A secure design will help establish secure defaults, minimize the attack surface area and fail securely to well-defined and understood defaults. It will also consider and follow various principles, such as:</p> <ul> <li>Least Privilege and Separation of Duties</li> <li>Defense-in-Depth</li> <li>Zero Trust</li> <li>Security in the Open</li> </ul> <p>A Secure Development Lifecycle (SDLC) helps to ensure that all security decisions made about the product being developed are explicit choices and result in the correct level of security for the product design. Various secure development lifecycles can be used and they generally include threat modeling in the design process.</p> <p>Checklists and Cheat Sheets are an important tool during the design process; they provide an easy reference of knowledge and help avoid repeating design errors and mistakes.</p> <p>Software application Design is one of the major business functions described in the Software Assurance Maturity Model (SAMM), and includes security practices:</p> <ul> <li>Threat Assessment</li> <li>Security Requirements</li> <li>Security Architecture</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/03-mas-checklist/","title":"MAS checklist","text":"<p>The OWASP Mobile Application Security (MAS) flagship project provides industry standards for mobile application security.</p> <p>The OWASP MAS project provides the Mobile Application Security Verification Standard (MASVS) for mobile applications and a comprehensive Mobile Application Security Testing Guide (MASTG).</p> <p>The Mobile Application Security Checklist contains links to the MASTG test cases for each MASVS control.</p>"},{"location":"en/04-design/03-mas-checklist/#what-is-mas-checklist","title":"What is MAS Checklist?","text":"<p>The MAS Checklist provides a checklist that keeps track of the MASTG test cases for a given MASVS control. This MAS Checklist is split out into categories that match the MASVS categories:</p> <ul> <li>MASVS-STORAGE sensitive data storage</li> <li>MASVS-CRYPTO cryptography best practices</li> <li>MASVS-AUTH authentication and authorization mechanisms</li> <li>MASVS-NETWORK network communications</li> <li>MASVS-PLATFORM interactions with the mobile platform</li> <li>MASVS-CODE platform and data entry points along with third-party software</li> <li>MASVS-RESILIENCE integrity and running on a trusted platform</li> <li>MASVS-PRIVACY privacy of users, data and resources</li> </ul> <p>In addition to the web links there is a downloadable spreadsheet.</p>"},{"location":"en/04-design/03-mas-checklist/#why-use-it","title":"Why use it?","text":"<p>The OWASP MASVS is the industry standard for mobile application security. If the MASTG is being applied to a mobile application then the MAS Checklist is a handy reference that can also be used for compliance purposes.</p>"},{"location":"en/04-design/03-mas-checklist/#how-to-use-it","title":"How to use it","text":"<p>The online version is useful to list the MASVS controls and which MASTG tests apply. Follow the links to access the individual controls and tests.</p> <p>The spreadsheet download allows the status of each test to be recorded, with a separate sheet for each MASVS category. This record of test results can be used as evidence for compliance purposes.</p>"},{"location":"en/04-design/03-mas-checklist/#references","title":"References","text":"<ul> <li>Mobile Application Security (MAS) project</li> <li>MAS Checklist</li> <li>MAS Verification Standard (MASVS)</li> <li>MAS Testing Guide (MASTG)</li> <li>OWASP Mobile Application Security cheat sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/","title":"Overview","text":"<p>Referring to the Threat Modeling Cheat Sheet, threat modeling is a structured approach to identifying and prioritizing potential threats to a system. The threat modeling process includes determining the value that potential mitigations would have in reducing or neutralizing these threats.</p> <p>Assessing potential threats during the design phase of your project can save significant resources if during a later phase of the project refactoring is required to include risk mitigations. The outcomes from the threat modeling activities generally include:</p> <ul> <li>Documenting how data flows through a system to identify where the system might be attacked</li> <li>Identifying as many potential threats to the system as possible</li> <li>Suggesting security controls that may be put in place to reduce the likelihood or impact of a potential threat</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/","title":"Threat modeling in practice","text":"<p>This section discusses Threat Modeling, an activity described in the OWASP Software Assurance Maturity Model (SAMM). Threat modeling is part of the Threat Assessment security practice in the Design business function.</p> <p>Much of the material in this section is drawn from the OWASP Threat Model project, and the philosophy of this section tries to follow the Threat Modeling Manifesto.</p> <p></p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#overview","title":"Overview","text":"<p>Threat modeling activities try to discover what can go wrong with a system and determine what to do about it. The deliverables from threat modeling take various forms including system models and diagrams, lists of threats, mitigations or assumptions, meeting notes, and more. This may be assembled into a single threat model document; a structured representation of all the information that affects the security of an application. A good overview of this activity is given in the Security Culture project section on threat modeling.</p> <p>In essence, it is a view of the application and its environment through security glasses.</p> <p>Threat modeling is a process for capturing, organizing, and analyzing all of this information and enables informed decision-making about application security risk. In addition to producing a model, typical threat modeling efforts also produce a prioritized list of potential security vulnerabilities in the concept, requirements, design, or implementation. Any potential vulnerabilities that have been identified from the model should then be remediated using one of the common strategies: mitigate, eliminate, transfer or accept the threat of being exploited.</p> <p>There are many reasons for doing threat modeling but the most important one is that this activity is useful , it is probably the only stage in a development lifecycle where a team sits back and asks: 'What can go wrong?'.</p> <p>There are other reasons for threat modeling, for example standards compliance or analysis for disaster recovery, but the main aim of threat modeling is to remedy (possible) vulnerabilities before the malicious actors can exploit them.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#what-is-threat-modeling","title":"What is threat modeling","text":"<p>Threat modeling works to identify, communicate, and understand threats and mitigations within the context of protecting something of value.</p> <p>Threat modeling can be applied to a wide range of things, including software, applications, systems, networks, distributed systems, things in the Internet of things, business processes, etc. There are very few technical products which cannot be threat modeled; more or less rewarding, depending on how much it communicates, or interacts, with the world.</p> <p>A threat model document is a record of the threat modeling process, and often includes:</p> <ul> <li>a description / design / model of what you\u2019re worried about</li> <li>a list of assumptions that can be checked or challenged in the future as the threat landscape changes</li> <li>potential threats to the system</li> <li>remediation / actions to be taken for each threat</li> <li>ways of validating the model and threats, and verification of success of actions taken</li> </ul> <p>The threat model should be in a form that can be easily revised and modified during subsequent threat modeling discussions.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#why-do-it","title":"Why do it","text":"<p>Like all engineering activities, effort spent on threat modeling has to be justifiable. Rarely any project or development has engineering effort that is going 'spare', and the benefits of threat modeling have to outweigh the engineering cost of this activity. Usually this is difficult to quantify; an easier way to approach it may be to ask what are the costs of not doing threat modeling? These costs may consist of a lack of compliance, an increased risk of being exploited, harm to reputation and so on.</p> <p>The inclusion of threat modeling in the secure development activities can help:</p> <ul> <li>Build a secure design</li> <li>Efficient investment of resources; appropriately prioritize security, development, and other tasks</li> <li>Bring Security and Development together to collaborate on a shared understanding, informing development of the system</li> <li>Identify threats and compliance requirements, and evaluate their risk</li> <li>Define and build required controls.</li> <li>Balance risks, controls, and usability</li> <li>Identify where building a control is unnecessary, based on acceptable risk</li> <li>Document threats and mitigation</li> <li>Ensure business requirements (or goals) are adequately protected in the face of     a malicious actor, accidents, or other causes of impact</li> <li>Identification of security test cases / security test scenarios to test the security requirements</li> </ul> <p>Threat modeling also provides a clear 'line of sight' across a project that can be used to justify other security efforts. The threat model allows security decisions to be made rationally, with all the information available, so that security decisions can be properly supported. The threat modeling process naturally produces an assurance argument that can be used to explain and defend the security of an application. An assurance argument starts with a few high level claims and then justifies them with either sub-claims or evidence.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#when-to-threat-model","title":"When to threat model","text":"<p>There is no wrong time to do threat modeling; the earlier it is done in the development lifecycle the more beneficial it is, but it threat modeling is also useful at any time during application development.</p> <p>Threat modeling is best applied continuously throughout a software development project. The process is essentially the same at different levels of abstraction, although the information gets more and more granular throughout the development lifecycle. Ideally, a high-level threat model should be defined in the concept or planning phase, and then refined during the development phases. As more details are added to the system new attack vectors are identified, so the ongoing threat modeling process should examine, diagnose, and address these threats.</p> <p>Note that it is a natural part of refining a system for new threats to be exposed. When you select a particular technology, such as Java for example, you take on the responsibility to identify the new threats that are created by that choice. Even implementation choices such as using regular expressions for validation introduce potential new threats to deal with.</p> <p>Threat modeling: the sooner the better, but never too late</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#questions-to-ask","title":"Questions to ask","text":"<p>Often threat modeling is a conceptual activity rather than a rigorous process, where development teams are brought together and asked to think up ways of subverting their system. To provide some structure it is useful to start with Shostack's Four Question Framework:</p> <p>1 What are we working on?</p> <p>As a starting point the scope of the Threat Model should be defined. This will require an understanding of the application that is being built, and some examples of inputs for the threat model could be:</p> <ul> <li>Architecture diagrams</li> <li>Dataflow transitions</li> <li>Data classifications</li> </ul> <p>It is common to represent the answers to this question with one or more data flow diagrams and often supplemental diagrams like message sequence diagrams.</p> <p>It is best to gather people from different roles with sufficient technical and risk awareness so that they can agree on the framework to be used during the threat modeling exercise.</p> <p>2 What can go wrong?</p> <p>This is a research activity to find the main threats that apply to your application. There are many ways to approach the question, including open discussion or using a structure to help think it through. Techniques and methodologies to consider include CIA, STRIDE, LINDDUN, cyber kill chains, PASTA, common attack patterns (CAPEC) and others.</p> <p>There are resources available that will help with identifying threats and vulnerabilities. OWASP provide a set of cards, Cornucopia, that provide suggestions and explanations for general vulnerabilities. The game Elevation of Privileges threat modeling card game is an easy way to get started with threat modeling, and there is the OWASP version of Snakes and Ladders that truly gamifies these activities.</p> <p>3 What are we going to do about that?</p> <p>In this phase turn the threat model findings into specific actions. Consider the appropriate remediation for each threat identified: Transfer, Avoid, Mitigate or Eliminate.</p> <p>4 Did we do a good enough job?</p> <p>Finally, carry out a retrospective activity over the work identified to check quality, feasibility, progress, or planning.</p> <p>The OWASP Threat Modeling Playbook goes into these practicalities in more detail and provides strategies for maintaining threat modeling within an organization.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#how-to-do-it","title":"How to do it","text":"<p>There is no one process for threat modeling. How it is done in practice will vary according to the organization's culture, according to what type of system / application is being modeled and according to preferences of the development team itself. The various techniques and concepts are discussed in the Threat Modeling Cheat Sheet and can be summarized:</p> <ol> <li>Terminology: try to use standard terms such as actors, trust boundaries, etc as this will help convey these concepts</li> <li>Scope: be clear what is being modeled and keep within this scope</li> <li>Document: decide which tools and what outputs are required to satisfy compliance, for example</li> <li>Decompose: break the system being modeled into manageable pieces</li> <li>Trust: identify your trust boundaries, consider network segmentation</li> <li>Agents: identify who the actors are (malicious or otherwise) and what they can do</li> <li>Categorize: prioritize the threats taking into account probability, impact and any other factors</li> <li>Remediation: be sure to decide what to do about any threats identified, the whole reason for threat modeling</li> </ol> <p>It is worth saying this again: there are many ways to do threat modeling, all perfectly valid, so choose the right process that works for a specific team.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#final-advice","title":"Final advice","text":"<p>Some final words on threat modeling.</p> <p>Make it incremental:</p> <p>Strongly consider using incremental threat modeling. It is almost certainly a bad idea trying to fully model an existing application or system; it can be very time consuming modeling a whole system, and by the time such a model was completed then it would probably be out of date. Instead incrementally model new features or enhancements as and when they are being developed.</p> <p>Incremental threat modeling assumes that existing applications and features have already been attacked over time and these real world vulnerabilities have been remediated. It is the new features or new applications that pose a greater security risk; if they are vulnerable then they will reduce the security of the existing application or system. Concentrating on the new changes applies threat modeling effort at the place that it is needed most; at the very least the changes should not make the security worse - and ideally the security should be better.</p> <p>Tools are secondary:</p> <p>It is good to standardize threat modeling tools across an organization, but also allow teams to choose how they record their threat models. If one team decides to use Threat Dragon, for example, and another wants to use a drawing board, then that is usually fine. The discussions had during the threat modeling process are more important than the tool used, although you might ask the team using the drawing board how they implement change control for their models.</p> <p>Brevity is paramount:</p> <p>It is very easy to create a threat model that looks a lot like a system diagram, with many components and data flows. This makes for a convincing diagram, but it is not a model specific to the threat of exploits. Instead concentrate on the attack / threat surfaces and be robust in consolidating multiple system components into one threat model component. This will keep the number of components and dataflows manageable, and focuses the discussion on what matters most: malicious actors (external or internal) trying to subvert your system.</p> <p>Choose your methodology:</p> <p>It is a good strategy to choose a threat categorization methodology for the whole organization and then try and keep to it. For example this could be STRIDE or LINDDUN, but if the CIA triad provides enough granularity then that is also a perfectly good choice.</p>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#further-reading","title":"Further reading","text":"<ul> <li>Threat Modeling Manifesto</li> <li>OWASP Threat Model project</li> <li>OWASP Threat Modeling Cheat Sheet</li> <li>OWASP Threat Modeling Playbook (OTMP)</li> <li>OWASP Attack Surface Analysis Cheat Sheet</li> <li>OWASP community pages on Threat Modeling and the Threat Modeling Process</li> <li>The Four Question Framework For Threat Modeling 60 second video</li> <li>Lockheed's Cyber Kill Chain</li> <li>VerSprite's Process for Attack Simulation and Threat Analysis (PASTA)</li> <li>Threat Modeling: Designing for Security</li> <li>Threat Modeling: A Practical Guide for Development Teams</li> </ul>"},{"location":"en/04-design/01-threat-modeling/01-threat-modeling/#resources","title":"Resources","text":"<ul> <li>Shostack's Four Question Framework</li> <li>OWASP pytm Pythonic Threat Modeling tool</li> <li>OWASP Threat Dragon threat modeling tool using dataflow diagrams</li> <li>Threagile, an open source project that provides for Agile threat modeling</li> <li>Microsoft Threat Modeling Tool, a widely used tool throughout the security community and free to download</li> <li>threatspec, an open source tool based on comments inline with code</li> <li>MITRE's Common Attack Pattern Enumeration and Classification (CAPEC)</li> <li>NIST Common Vulnerability Scoring System Calculator</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/02-pytm/","title":"pytm","text":"<p>The OWASP pytm (Pythonic Threat Modeling) project is a framework for threat modeling and its automation. The goal of pytm is to shift threat modeling to the left, making threat modeling more automated and developer-centric.</p> <p>Pytm is an OWASP Lab Project with a community of contributors creating regular releases.</p>"},{"location":"en/04-design/01-threat-modeling/02-pytm/#what-is-pytm","title":"What is pytm?","text":"<p>Pytm is a Java library that provides programmatic way of threat modeling; the application model itself is defined as a python3 source file and follows Python program syntax. Findings are included in the application model python program with threats defined as rows in an associated text file. The threat file can be reused between projects and provides for accumulation of a knowledge base.</p> <p>Using pytm the model and threats can be programmatically output as a dot data flow diagram which is displayed using Graphviz, an open source graph visualization software utility. Alternatively the model and threats can be output as a PlantUML file which can then be displayed, using Java and the PlantUML <code>.jar</code>, as a sequence diagram.</p> <p>If a report document is required then a pytm script can output the model, threats and findings as markdown. Programs such as pandoc can then take this markdown file and provide the document in various formats such as PDF, ePub or html.</p> <p>The OWASP Spotlight series provides an overview of pytm: 'Project 6 - OWASP pytm'.</p>"},{"location":"en/04-design/01-threat-modeling/02-pytm/#why-use-pytm","title":"Why use pytm?","text":"<p>The pytm development team make the good point that traditional threat modeling often comes too late in the development process, and sometimes may not happen at all. In addition, creating manual / diagrammatic data flows and reports can be extremely time-consuming. These are certainly valid observations, and so pytm attempts to get threat modeling to 'shift-left' in the development lifecycle.</p> <p>Many traditional threat modeling tools such as OWASP Threat Dragon provide a graphical way of creating diagrams and entering threats. These applications store the models as text, for example JSON and YAML, but the main entry method is via the application.</p> <p>Pytm is different - the primary method of creating and updating the threat models is through code. This source code completely defines the model along with its findings, threats and remediations. Diagrams and reports are regarded as outputs of the model; not the inputs to the model. This makes pytm a powerful tool for describing a system or application, and allows the model to be built up over time.</p> <p>This focus on the model as code and programmatic outputs makes Pytm particularly useful in automated environments, helping the threat model to be built in to the design process from the start, as well as in more traditional threat modeling sessions.</p>"},{"location":"en/04-design/01-threat-modeling/02-pytm/#how-to-use-pytm","title":"How to use pytm","text":"<p>The best description of how to use pytm is given in chapter 4 of the book Threat Modeling: a practical guide for development teams which is written by two of the main contributors to the pytm project.</p> <p>Pytm is code based within a program environment, rather than run as a single application, so there are various components that have to be installed on the target machine to allow pytm to run. At present it does not work on Windows, only Linux or MacOS, so if you need to run Windows then use a Linux VM or follow the instructions to create a Docker container.</p> <p>The following tools and libraries need to be installed:</p> <ul> <li>Python 3.x</li> <li>Graphviz package</li> <li>Java, such as OpenJDK 10 or 11</li> <li>the PlantUML executable JAR file</li> <li>and of course pytm itself: clone the pytm project repo</li> </ul> <p>Once the environment is installed then navigate to the top directory of your local copy of the project.</p> <p>Follow the example given by the pytm project repo and run the suggested scripts to output the data flow diagram, sequence diagram and report:</p> <pre><code>mkdir -p tm\n./tm.py --report docs/basic_template.md | pandoc -f markdown -t html &gt; tm/report.html\n./tm.py --dfd | dot -Tpng -o tm/dfd.png\n./tm.py --seq | java -Djava.awt.headless=true -jar $PLANTUML_PATH -tpng -pipe &gt; tm/seq.png\n</code></pre>"},{"location":"en/04-design/01-threat-modeling/02-pytm/#references","title":"References","text":"<ul> <li>OWASP Pythonic Threat Modeling (pytm)</li> <li>Graphviz</li> <li>pandoc</li> <li>PlantUML</li> <li>pytm repository</li> <li>Spotlight on pytm</li> <li>Threat Modeling: a practical guide for development teams</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/03-threat-dragon/","title":"Threat Dragon","text":"<p>The OWASP Threat Dragon project provides a diagrammatic tool for threat modeling applications, APIs and software systems. It is an OWASP Lab Project with several releases and is in active development.</p>"},{"location":"en/04-design/01-threat-modeling/03-threat-dragon/#what-is-threat-dragon","title":"What is Threat Dragon?","text":"<p>Threat Dragon is a tool that can help development teams with their threat modeling process. It provides for creating and modifying data flow diagrams which provide the context and direction for the threat modeling activities. It also stores the details of threats identified during the threat modeling sessions, and these are stored alongside the threat model diagram in a text-based file. Threat Dragon can also output the threat model diagram and the associated threats as a PDF report.</p>"},{"location":"en/04-design/01-threat-modeling/03-threat-dragon/#why-use-it","title":"Why use it?","text":"<p>Threat Dragon is a useful tool for small teams to create threat models quickly and easily. Threat Dragon aims for:</p> <ul> <li>Simplicity - you can install and start using Threat Dragon very quickly</li> <li>Flexibility - the diagramming and threat generation allows all types of threat to be described</li> <li>Accessibility - various different types of teams can all benefit from Threat Dragon ease of use</li> </ul> <p>It supports various methodologies and threat categorizations used during the threat modeling activities:</p> <ul> <li>STRIDE</li> <li>LINDDUN</li> <li>PLOT4ai</li> <li>CIA</li> <li>DIE</li> </ul> <p>and it can be used by all sorts of development teams.</p>"},{"location":"en/04-design/01-threat-modeling/03-threat-dragon/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of Threat Dragon and how to use it: 'Project 22 - OWASP Threat Dragon'.</p> <p>It is straightforward to start using Threat Dragon; the latest version is available to use online:</p> <ol> <li>select 'Login to Local Session'</li> <li>select 'Explore a Sample Threat Model'</li> <li>select 'Version 2 Demo Model'</li> <li>you are then presented with the threat model meta-data which can be edited</li> <li>click on the diagram 'Main Request Data Flow' to display the data flow diagram</li> <li>the diagram components can be inspected, and their associated threats are displayed</li> <li>components can be added and deleted, along with editing their properties</li> </ol> <p>Threat Dragon is distributed as a cross platform desktop application as well a web application. The desktop application can be downloaded for Windows, Linux and MacOS. The web application can be run using a Docker container or from the source code.</p> <p>An important feature of Threat Dragon is the PDF report output which can be used for documentation and GRC compliance purposes; from the threat model meta-data window click on the Report button.</p>"},{"location":"en/04-design/01-threat-modeling/03-threat-dragon/#references","title":"References","text":"<ul> <li>OWASP Threat Dragon</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/","title":"Cornucopia","text":"<p>OWASP Cornucopia is a card game used to help derive application security requirements during the software development life cycle. Cornucopia is an OWASP Lab project, and can be downloaded from its project page.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#what-is-cornucopia","title":"What is Cornucopia?","text":"<p>Cornucopia provides a set of cards designed to gamify threat modeling activities, helping agile development teams to identify weaknesses in applications and then record remediations or requirements.</p> <p>There are three versions of the Cornucopia deck of threat modeling cards:</p> <ul> <li>Website App Edition</li> <li>Mobile App Edition</li> <li>Enterprise App Edition</li> </ul> <p>The decks come with several suits according to the application, and always contain an overall 'Cornucopia' suit.</p> <p>Cornucopia can be played in many different ways, there is no one way, and there is a suggested set of rules to start the game off. Cornucopia provides a score sheet to can help keep track of the game session and to record outcomes.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#website-app-edition","title":"Website App Edition","text":"<p>Each card in the Website App deck describes a common error or anti-pattern that allows systems to be vulnerable to attack. Vulnerabilities are arranged in domains as five suits with the additional Cornucopia suit ranging across these domains:</p> <ul> <li>Data Validation and Encoding</li> <li>Authentication</li> <li>Session Management</li> <li>Authorization</li> <li>Cryptography</li> <li>Cornucopia</li> </ul> <p>To provide context the Cornucopia Website App cards reference other projects:</p> <ul> <li>OWASP Application Security Verification Standard (ASVS)</li> <li>OWASP Secure Coding Practices (SCP]) quick reference guide</li> <li>OWASP AppSensor</li> <li>MITRE's Common Attack Pattern Enumeration and Classification (CAPEC)</li> <li>SAFEcode</li> </ul> <p>The SCP quick reference guide has now been incorporated as part of this Developer Guide.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#mobile-app-edition","title":"Mobile App Edition","text":"<p>Similarly to the website application deck, the mobile application deck has five domains/suits, with Cornucopia cross domain:</p> <ul> <li>Platform and Code</li> <li>Authentication and Authorization</li> <li>Network and Storage</li> <li>Resilience</li> <li>Cryptography</li> <li>Cornucopia</li> </ul> <p>For context the Cornucopia Mobile App cards reference these other projects:</p> <ul> <li>OWASP Mobile Application Security Verification Standard (MASVS)</li> <li>OWASP Mobile Application Security Testing Guide (MASTG)</li> <li>MITRE's Common Attack Pattern Enumeration and Classification (CAPEC)</li> <li>SAFEcode</li> </ul>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#ecommerce-website-edition","title":"Ecommerce Website Edition","text":"<p>This is the original Cornucopia deck and has the same domains/suits, including the Cornucopia cross domain suit, as the Website App Edition. Some of the vulnerabilities are specific to Ecommerce, but it references the same projects as the website edition.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#why-use-it","title":"Why use it?","text":"<p>Cornucopia is useful for both requirements analysis and threat modeling, providing gamification of these activities within the development lifecycle. It is targeted towards agile development teams and provides a different perspective to these tasks.</p> <p>The outcome of the game is to identify possible threats and propose remediations.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#how-to-use-cornucopia","title":"How to use Cornucopia","text":"<p>The OWASP Spotlight series provides an excellent overview of Cornucopia and how it can be used for gamification: 'Project 16 - Cornucopia'.</p> <p>Ideally Cornucopia is played in person using physical cards, with the development team and security architects in the same room. The application should already have been described by an architecture diagram or data flow diagram so that the players have something to refer to during the game.</p> <p>The suggested order of play is:</p> <ol> <li>Pre-sort: the deck, some cards may not be relevant for the web application</li> <li>Deal: the cards equally to the players</li> <li>Play: the players take turns to select a card</li> <li>Describe: the player describes the possible attack using the card played</li> <li>Convince: the other players have to be convinced that the attack is valid</li> <li>Score: award points for a successful attack</li> <li>Follow suit: the next player has to select a card from the same suit</li> <li>Winner: the player with the most points</li> <li>Follow up: each valid threat should be recorded and acted upon</li> </ol> <p>Remember that the outcome of the game is to identify possible threats and propose remediations, as well as having a good time.</p>"},{"location":"en/04-design/01-threat-modeling/04-cornucopia/#references","title":"References","text":"<ul> <li>AppSensor</li> <li>Application Security Verification Standard, ASVS</li> <li>Common Attack Pattern Enumeration and Classification, CAPEC</li> <li>Cornucopia</li> <li>Mobile Application Security Verification Standard, MASVS)</li> <li>Mobile Application Security Testing Guide, MASTG)</li> <li>Secure Coding Practices quick reference guide</li> <li>SAFEcode</li> <li>Spotlight on Cornucopia</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/05-linddun-go/","title":"LINDDUN GO","text":"<p>LINNDUN GO is a card game used to help derive privacy requirements during the software development life cycle. The LINNDUN GO card set can be downloaded as a PDF and then printed out.</p>"},{"location":"en/04-design/01-threat-modeling/05-linddun-go/#what-is-linddun-go","title":"What is LINDDUN GO?","text":"<p>LINDDUN GO helps identify potential privacy threats based on the key LINDDUN threats to privacy:</p> <ul> <li>Linking</li> <li>Identifying</li> <li>Non-repudiation</li> <li>Detecting</li> <li>Data Disclosure</li> <li>Unawareness</li> <li>Non-compliance</li> </ul> <p>LINNDUN GO is similar to OWASP Cornucopia in that it takes the form of a set of cards that can be used to gamify the process of identifying application privacy / security requirements. The deck of 33 cards are arranged in suits that match each category of threats to privacy, and there is a set of rules to structure the game sessions. Each LINDDUN GO card illustrates a single common privacy threat and suggested remediations.</p>"},{"location":"en/04-design/01-threat-modeling/05-linddun-go/#why-use-it","title":"Why use it?","text":"<p>LINDDUN is an approach to threat modeling from a privacy perspective. It is a methodology that is useful to structure and guide the identification of threats to privacy, and also helps with suggestions for the mitigation of any threats.</p> <p>LINDDUN GO gamifies this approach to privacy with a set of cards and rules to guide the identification process for threats to the privacy provided by the application. This is a change to other established processes and provides a different and useful perspective to the system.</p>"},{"location":"en/04-design/01-threat-modeling/05-linddun-go/#how-to-use-linddun-go","title":"How to use LINDDUN GO","text":"<p>The idea for a LINDDUN GO is that it is played in person by a diverse team with as varied a set of viewpoints as possible. The advice from the LINDDUN GO 'getting started' instructions is that this team contains some or all of:</p> <ul> <li>domain experts</li> <li>system architects</li> <li>developers</li> <li>the Data Protection Officer (DPO)</li> <li>legal experts</li> <li>the Chief Information Security Officer (CISO)</li> <li>privacy champions</li> </ul> <p>The application should have already been described by an architecture diagram or data flow diagram so that the players have something to refer to during the game. Download and printout the deck of cards.</p> <p>Follow the set of rules to structure the game session, record the outcome and act on it. The outcome of the game is to identify possible privacy threats and propose remediations; as well as having a good time of course.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/01-threat-modeling/06-toolkit/","title":"Threat Modeling toolkit","text":"<p>There is no one technique or tool that fits every threat modeling process. The process can be tactical or architectural, subjective or automated, attack tree or data flow diagram, all are perfectly valid for different organizations, teams and situations.</p> <p>The OWASP Threat Modeling toolkit presentation at OWASP AppSec California 2018 gives a good overview of the range of concepts and techniques that can be regarded as threat modeling.</p>"},{"location":"en/04-design/01-threat-modeling/06-toolkit/#advice-on-threat-modeling","title":"Advice on Threat Modeling","text":"<p>In addition to the Threat Modeling toolkit there are OWASP community pages on Threat Modeling and the OWASP Threat Modeling Project, both of which provide context and overviews of threat modeling - in particular Shostack's Four Question Framework.</p>"},{"location":"en/04-design/01-threat-modeling/06-toolkit/#threat-modeling-step-by-step","title":"Threat Modeling step by step","text":"<p>The Threat Modeling Process suggests steps that should be taken when threat modeling:</p> <ol> <li>Decompose the Application</li> <li>Determine and Rank Threats</li> <li>Determine Countermeasures and Mitigation</li> </ol> <p>and goes into detail on each concept :</p> <ul> <li>External Dependencies</li> <li>Entry Points</li> <li>Exit Points</li> <li>Assets</li> <li>Trust Levels</li> <li>Threat Categorization</li> <li>Threat Analysis</li> <li>Ranking of Threats</li> <li>Remediation for threats / vulnerabilities</li> </ul> <p>The OWASP Threat Modeling Playbook (OTMP) is an OWASP Incubator project that describes how to create and nurture a good threat modeling culture within the organization itself.</p>"},{"location":"en/04-design/01-threat-modeling/06-toolkit/#cheat-sheets-for-threat-modeling","title":"Cheat Sheets for Threat Modeling","text":"<p>The OWASP series of Cheat Sheets is a primary source of advice and techniques on all things security, with the OWASP Threat Modeling Cheat Sheet and OWASP Attack Surface Analysis Cheat Sheet providing practical suggestions along with explanations of both the terminology and the concepts involved.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/","title":"Overview","text":"<p>Checklists are a valuable resource for development teams. They provide structure for establishing good practices and processes and are also useful during code reviews and design activities.</p> <p>The checklists that follow are general lists that are categorized to follow the controls listed in the OWASP Top 10 Proactive Controls project. These checklists provide suggestions that certainly should be tailored to an individual project's requirements and environment; they are not meant to be followed in their entirety.</p> <p>Probably the best starting point for a checklist is given by the Application Security Verification Standard (ASVS). The ASVS can be used to provide a framework for an initial checklist, according to the security verification level, and this initial ASVS checklist can then be expanded using the following checklist sections.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/01-define-security-requirements/","title":"Define Security Requirements","text":"<p>A security requirement is a statement of security functionality that ensures software security is being satisfied. Security requirements are derived from industry standards, applicable laws, and a history of past vulnerabilities.</p> <p>Refer to proactive control C4: Address Security form the Start and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the lists below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/01-define-security-requirements/#1-system-configuration","title":"1. System configuration","text":"<ol> <li>Restrict applications, processes and service accounts to the least privileges possible</li> <li>If the application must run with elevated privileges, raise privileges as late as possible, and drop as soon as possible</li> <li>Remove all unnecessary functionality and files</li> <li>Remove test code or any functionality not intended for production, prior to deployment</li> <li>The security configuration store for the application should be available in human readable form to support auditing</li> <li>Isolate development environments from production and provide access only to authorized development and test groups</li> <li>Implement a software change control system to manage and record changes to the code both in development and production</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/01-define-security-requirements/#2-cryptographic-practices","title":"2. Cryptographic practices","text":"<ol> <li>Use peer reviewed and open solution cryptographic modules</li> <li>All cryptographic functions used to protect secrets from the application user must be implemented on a trusted system</li> <li>Cryptographic modules must fail securely</li> <li>Ensure all random elements such as numbers, file names, UUID and strings are generated     using the cryptographic module approved random number generator</li> <li>Cryptographic modules used by the application are compliant to FIPS 140-2 or an equivalent standard</li> <li>Establish and utilize a policy and process for how cryptographic keys will be managed</li> <li>Ensure that any secret key is protected from unauthorized access</li> <li>Store keys in a proper secrets vault as described below</li> <li>Use independent keys when multiple keys are required</li> <li>Build support for changing algorithms and keys when needed</li> <li>Build application features to handle a key rotation</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/01-define-security-requirements/#3-file-management","title":"3. File management","text":"<ol> <li>Do not pass user supplied data directly to any dynamic include function</li> <li>Require authentication before allowing a file to be uploaded</li> <li>Limit the type of files that can be uploaded to only those types that are needed for business purposes</li> <li>Validate uploaded files are the expected type by checking file headers rather than by file extension</li> <li>Do not save files in the same web context as the application</li> <li>Prevent or restrict the uploading of any file that may be interpreted by the web server.</li> <li>Turn off execution privileges on file upload directories</li> <li>When referencing existing files, use an allow-list of allowed file names and types</li> <li>Do not pass user supplied data into a dynamic redirect</li> <li>Do not pass directory or file paths, use index values mapped to pre-defined list of paths</li> <li>Never send the absolute file path to the client</li> <li>Ensure application files and resources are read-only</li> <li>Scan user uploaded files for viruses and malware</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/01-define-security-requirements/#references","title":"References","text":"<ul> <li>OWASP Application Security Verification Standard (ASVS)</li> <li>OWASP Mobile Application Security</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/02-frameworks-libraries/","title":"Leverage Security Frameworks and Libraries","text":"<p>Secure coding libraries and software frameworks with embedded security help software developers guard against security-related design and implementation flaws.</p> <p>Refer to proactive control C4: Address Security from the Start and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project.</p> <p>For technology specific checklists refer to the appropriate OWASP Cheat Sheets:</p> <ul> <li>AJAX_Security</li> <li>C-Based toolchain hardening</li> <li>Django security</li> <li>Django REST framework</li> <li>Docker security</li> <li>DotNet security</li> <li>GraphQL security</li> <li>Infrastructure as Code</li> <li>Java security</li> <li>Javascript management</li> <li>Kubernetes</li> <li>Laravel security</li> <li>Microservices security</li> <li>NPM security best practices</li> <li>Node.js security</li> <li>Node.js security for Docker</li> <li>PHP configuration</li> <li>REST APIs and how to assess them</li> <li>Ruby on Rails security</li> <li>Symfony framework</li> <li>Web Services</li> <li>XML security</li> </ul> <p>and use them as the starting point for a checklist that is tailored for the technology used by the project.</p> <p>In addition consider the following extra checks for frameworks and libraries.</p>"},{"location":"en/04-design/02-web-app-checklist/02-frameworks-libraries/#1-security-frameworks-and-libraries","title":"1. Security Frameworks and Libraries","text":"<ol> <li>Ensure servers, frameworks and system components are running the latest approved versions and patches</li> <li>Use libraries and frameworks from trusted sources that are actively maintained and widely used</li> <li>Review all secondary applications and third party libraries to determine business necessity</li> <li>Validate safe functionality for all secondary applications and third party libraries</li> <li>Create and maintain an inventory catalog of all third party libraries using Software Composition Analysis (SCA)</li> <li>Proactively keep all third party libraries and components up to date</li> <li>Reduce the attack surface by encapsulating the library and expose only the required behavior into your software</li> <li>Use tested and approved managed code rather than creating new unmanaged code for common tasks</li> <li>Utilize task specific built-in APIs to conduct operating system tasks</li> <li>Do not allow the application to issue commands directly to the Operating System</li> <li>Use checksums or hashes to verify the integrity of interpreted code, libraries, executables, and configuration files</li> <li>Restrict users from generating new code or altering existing code</li> <li>Implement safe updates using encrypted channels</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/02-frameworks-libraries/#references","title":"References","text":"<ul> <li>OWASP Dependency Check</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/03-secure-database-access/","title":"Secure Database Access","text":"<p>Ensure that access to all data stores is secure, including both relational databases and NoSQL databases.</p> <p>Refer to proactive control C3: Validate all Input &amp; Handle Exceptions and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/03-secure-database-access/#1-secure-queries","title":"1. Secure queries","text":"<ol> <li>Use Query Parameterization to prevent untrusted input being interpreted as part of a SQL command</li> <li>Use strongly typed parameterized queries</li> <li>Utilize input validation and output encoding and be sure to address meta characters</li> <li>Do not run the database command if input validation fails</li> <li>Ensure that variables are strongly typed</li> <li>Connection strings should not be hard coded within the application</li> <li>Connection strings should be stored in a separate configuration file on a trusted system and they should be encrypted</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/03-secure-database-access/#2-secure-configuration","title":"2. Secure configuration","text":"<ol> <li>The application should use the lowest possible level of privilege when accessing the database</li> <li>Use stored procedures to abstract data access and allow for the removal of permissions to the base tables in the database</li> <li>Close the database connection as soon as possible</li> <li>Turn off all unnecessary database functionality</li> <li>Remove unnecessary default vendor content, for example sample schemas</li> <li>Disable any default accounts that are not required to support business requirements</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/03-secure-database-access/#3-secure-authentication","title":"3. Secure authentication","text":"<ol> <li>Remove or change all default database administrative passwords</li> <li>The application should connect to the database with different credentials for every trust distinction     (for example user, read-only user, guest, administrators)</li> <li>Use secure credentials for database access</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/03-secure-database-access/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Query Parameterization</li> <li>OWASP Cheat Sheet: Database Security</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/04-encode-escape-data/","title":"Encode and Escape Data","text":"<p>Encoding and escaping of output data are defensive techniques meant to stop injection attacks on a target system or application which is receiving the output data.</p> <p>The target system may be another software component or it may be reflected back to the initial system, such as operating system commands, so encoding and escaping output data helps to provide defense in depth for the system as a whole.</p> <p>Refer to proactive control C3: Validate all Input &amp; Handle Exceptions and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/04-encode-escape-data/#1-character-encoding-and-canonicalization","title":"1. Character encoding and canonicalization","text":"<ol> <li>Apply output encoding just before the content is passed to the target system</li> <li>Conduct all output encoding on a trusted system</li> <li>Utilize a standard, tested routine for each type of outbound encoding</li> <li>Specify character sets, such as UTF-8, for all outputs</li> <li>Apply canonicalization to convert unicode data into a standard form</li> <li>Ensure the output encoding is safe for all target systems</li> <li>In particular sanitize all output used for operating system commands</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/04-encode-escape-data/#2-contextual-output-encoding","title":"2. Contextual output encoding","text":"<p>Contextual output encoding of data is based on how it will be utilized by the target. The specific methods vary depending on the way the output data is used, such as HTML entity encoding.</p> <ol> <li>Contextually encode all data returned to the client from untrusted sources</li> <li>Contextually encode all output of untrusted data to queries for SQL, XML, and LDAP</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/04-encode-escape-data/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Injection Prevention</li> <li>OWASP Java Encoder Project</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/05-validate-inputs/","title":"Validate All Inputs","text":"<p>Input validation is a collection of techniques that ensure only properly formatted data may enter a software application or system component.</p> <p>It is vital that input validation is performed to provide the starting point for a secure application or system. Without input validation the software application/system will continue to be vulnerable to new and varied attacks.</p> <p>Refer to proactive control C3: Validate All Input &amp; Handle Exceptions and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/05-validate-inputs/#1-syntax-and-semantic-validity","title":"1. Syntax and semantic validity","text":"<ol> <li>Identify all data sources and classify them into trusted and untrusted</li> <li>Validate all input data from untrusted sources such as client provided data</li> <li>Encode input to a common character set before validating</li> <li>Specify character sets, such as UTF-8, for all input sources</li> <li>If the system supports UTF-8 extended character sets then validate after UTF-8 decoding is completed</li> <li>Verify that protocol header values in both requests and responses contain only ASCII characters</li> <li>Validate data from redirects</li> <li>Validate data range and also data length</li> <li>Utilize canonicalization to address obfuscation attacks</li> <li>All validation failures should result in input rejection</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/05-validate-inputs/#2-libraries-and-frameworks","title":"2. Libraries and frameworks","text":"<ol> <li>Conduct all input validation on a trusted system [^SCP1]</li> <li>Use a centralized input validation library or framework for the whole application</li> <li>If the standard validation routine cannot address some inputs then use extra discrete checks</li> <li>If any potentially hazardous input must be allowed then implement additional controls</li> <li>Validate for expected data types using an allow-list rather than a deny-list</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/05-validate-inputs/#3-validate-serialized-data","title":"3. Validate serialized data","text":"<ol> <li>Implement integrity checks or encryption of the serialized objects     to prevent hostile object creation or data tampering</li> <li>Enforce strict type constraints during deserialization before object creation;     typically a definable set of classes is expected</li> <li>Isolate features that deserialize so that they run in very low privilege environments such as temporary containers</li> <li>Log security deserialization exceptions and failures</li> <li>Restrict or monitor incoming and outgoing network connectivity from containers or servers that deserialize</li> <li>Monitor deserialization, for example alerting if a user agent constantly deserializes</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/05-validate-inputs/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Input Validation</li> <li>OWASP Java HTML Sanitizer Project</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p> <p>[^SCP1]: Secure Coding Practices checklist</p>"},{"location":"en/04-design/02-web-app-checklist/06-digital-identity/","title":"Implement Digital Identity","text":"<p>Authentication is the process of verifying that an individual or entity is who they claim to be. Session management is a process by which a server maintains the state of the users authentication so that the user may continue to use the system without re-authenticating.</p> <p>Refer to proactive control C7: Implement Digital Identity and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/06-digital-identity/#1-authentication","title":"1. Authentication","text":"<ol> <li>Design access control authentication thoroughly up-front</li> <li>Force all requests to go through access control checks unless public</li> <li>Do not hard code access controls that are role based</li> <li>Log all access control events</li> <li>Use Multi-Factor Authentication (MFA) for sensitive or high value transactional accounts</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/06-digital-identity/#2-passwords","title":"2. Passwords","text":"<ol> <li>Require authentication for all pages and resources, except those specifically intended to be public</li> <li>All authentication controls must be enforced on a trusted system</li> <li>Establish and utilize standard, tested, authentication services whenever possible</li> <li>Use a centralized implementation for all authentication controls</li> <li>Segregate authentication logic from the resource being requested and     use redirection to and from the centralized authentication control</li> <li>All authentication controls should fail securely</li> <li>Administrative and account management must be at least as secure as the primary authentication mechanism</li> <li>If your application manages a credential store, use cryptographically strong one-way salted hashes</li> <li>Password hashing must be implemented on a trusted system</li> <li>Validate the authentication data only on completion of all data input</li> <li>Authentication failure responses should not indicate which part of the authentication data was incorrect</li> <li>Utilize authentication for connections to external systems that involve sensitive information or functions</li> <li>Authentication credentials for accessing services external to the application should be stored in a secure store</li> <li>Use only HTTP POST requests to transmit authentication credentials</li> <li>Always send non-temporary passwords over an encrypted connection or as encrypted data</li> <li>Enforce password complexity and length requirements established by policy or regulation</li> <li>Enforce account disabling after an established number of invalid login attempts</li> <li>Password reset and changing operations require the same level of controls as account creation and authentication</li> <li>Password reset questions are deprecated, see Choosing and Using Security Questions Cheat Sheet as to why</li> <li>If using email based resets, only send email to a pre-registered address with a temporary link/password</li> <li>Temporary passwords and links should have a short expiration time</li> <li>Enforce the changing of temporary passwords on the next use</li> <li>Notify users when a password reset occurs</li> <li>Prevent password re-use</li> <li>The last use (successful or unsuccessful) of a user account should be reported to the user     at their next successful login</li> <li>Change all vendor-supplied default passwords and user IDs or disable the associated accounts</li> <li>Re-authenticate users prior to performing critical operations</li> <li>If using third party code for authentication inspect the code carefully     to ensure it is not affected by any malicious code</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/06-digital-identity/#3-cryptographic-based-authentication","title":"3. Cryptographic based authentication","text":"<ol> <li>Use the server or framework's session management controls</li> <li>Session identifier creation must always be done on a trusted system</li> <li>Session management controls should use well vetted algorithms that ensure sufficiently random session identifiers</li> <li>Set the domain and path for cookies containing authenticated session identifiers     to an appropriately restricted value for the site</li> <li>Logout functionality should fully terminate the associated session or connection</li> <li>Logout functionality should be available from all pages protected by authorization</li> <li>Establish a session inactivity timeout that is as short as possible,     based on balancing risk and business functional requirements</li> <li>Disallow persistent logins and enforce periodic session terminations, even when the session is active</li> <li>If a session was established before login, close that session and establish a new session after a successful login</li> <li>Generate a new session identifier on any re-authentication</li> <li>Do not allow concurrent logins with the same user ID</li> <li>Do not expose session identifiers in URLs, error messages or logs</li> <li>Implement appropriate access controls to protect server side session data     from unauthorized access from other users of the server</li> <li>Generate a new session identifier and deactivate the old one periodically</li> <li>Generate a new session identifier if the connection security changes from HTTP to HTTPS,     as can occur during authentication</li> <li>Set the <code>secure</code> attribute for cookies transmitted over an TLS connection</li> <li>Set cookies with the <code>HttpOnly</code> attribute,     unless you specifically require client-side scripts within your application to read or set a cookie value</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/06-digital-identity/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Authentication</li> <li>OWASP Cheat Sheet: Choosing and Using Security Questions</li> <li>OWASP Cheat Sheet: Forgot Password</li> <li>OWASP Cheat Sheet: Multifactor Authentication</li> <li>OWASP Cheat Sheet: Password Storage</li> <li>OWASP Cheat Sheet: Session Management</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/07-access-controls/","title":"Enforce Access Controls","text":"<p>Access Control or Authorization is the process of granting or denying specific requests from a user, program, or process.</p> <p>Refer to proactive control C1: Implement Access Controls and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/07-access-controls/#1-authorization","title":"1. Authorization","text":"<ol> <li>Design access control / authorization thoroughly up-front</li> <li>Force all requests to go through access control checks unless public</li> <li>Deny by default; if a request is not specifically allowed then it is denied</li> <li>Apply least privilege, providing the least access as is necessary</li> <li>Log all authorization events</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/07-access-controls/#2-access-control","title":"2. Access control","text":"<ol> <li>Enforce authorization controls on every request</li> <li>Use only trusted system objects for making access authorization decisions</li> <li>Use a single site-wide component to check access authorization</li> <li>Access controls should fail securely</li> <li>Deny all access if the application cannot access its security configuration information</li> <li>Segregate privileged logic from other application code</li> <li>Limit the number of transactions a single user or device can perform in a given period of time,     low enough to deter automated attacks but above the actual business requirement</li> <li>If long authenticated sessions are allowed, periodically re-validate a user's authorization</li> <li>Implement account auditing and enforce the disabling of unused accounts</li> <li>The application must support termination of sessions when authorization ceases</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/07-access-controls/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Authorization</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/08-protect-data/","title":"Protect Data Everywhere","text":"<p>Sensitive data such as passwords, credit card numbers, health records, personal information and business secrets require extra protection, particularly if that data falls under privacy laws (EU General Data Protection Regulation GDPR), financial data protection rules such as PCI Data Security Standard (PCI DSS) or other regulations.</p> <p>Refer to proactive control C2: Use Cryptography the proper way and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/08-protect-data/#1-data-protection","title":"1. Data protection","text":"<ol> <li>Classify data according to the level of sensitivity</li> <li>Implement appropriate access controls for sensitive data</li> <li>Encrypt data in transit</li> <li>Ensure secure communication channels are properly configured</li> <li>Avoid storing sensitive data when at all possible</li> <li>Ensure sensitive data at rest is cryptographically protected to avoid unauthorized disclosure and modification</li> <li>Purge sensitive data when that data is no longer required</li> <li>Store application-level secrets in a secrets vault</li> <li>Check that secrets are not stored in code, config files or environment variables</li> <li>Implement least privilege, restricting access to functionality, data and system information</li> <li>Protect all cached or temporary copies of sensitive data from unauthorized access</li> <li>Purge those temporary copies of sensitive data as soon as they are no longer required</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/08-protect-data/#2-memory-management","title":"2. Memory management","text":"<ol> <li>Explicitly initialize all variables and data stores</li> <li>Check that any buffers are as large as specified</li> <li>Check buffer boundaries if calling the function in a loop and protect against overflow</li> <li>Specifically close resources, don't rely on garbage collection</li> <li>Use non-executable stacks when available</li> <li>Properly free allocated memory upon the completion of functions and at all exit points</li> <li>Overwrite any sensitive information stored in allocated memory at all exit points from the function</li> <li>Protect shared variables and resources from inappropriate concurrent access</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/08-protect-data/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Cryptographic Storage</li> <li>OWASP Cheat Sheet: Secrets Management</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/09-logging-monitoring/","title":"Implement Security Logging and Monitoring","text":"<p>Logging is recording security information during the runtime operation of an application. Monitoring is the live review of application and security logs using various forms of automation.</p> <p>Refer to proactive control C9: Implement Security Logging and Monitoring and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/09-logging-monitoring/#1-security-logging","title":"1. Security logging","text":"<ol> <li>Log submitted data that is outside of an expected numeric range.</li> <li>Log submitted data that involves changes to data that should not be modifiable</li> <li>Log requests that violate server-side access control rules</li> <li>Encode and validate any dangerous characters before logging to prevent log injection attacks</li> <li>Do not log sensitive information</li> <li>Logging controls should support both success and failure of specified security events</li> <li>Do not store sensitive information in logs, including unnecessary system details, session identifiers or passwords</li> <li>Use a cryptographic hash function to validate log entry integrity</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/09-logging-monitoring/#2-security-logging-design","title":"2. Security logging design","text":"<ol> <li>Protect log integrity</li> <li>Ensure log entries that include untrusted data will not execute as code in the intended log viewing interface or software</li> <li>Restrict access to logs to only authorized individuals</li> <li>Utilize a central routine for all logging operations</li> <li>Forward logs from distributed systems to a central, secure logging service</li> <li>Follow a common logging format and approach within the system and across systems of an organization</li> <li>Synchronize across nodes to ensure that timestamps are consistent</li> <li>All logging controls should be implemented on a trusted system</li> <li>Ensure that a mechanism exists to conduct log analysis</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/09-logging-monitoring/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet: Logging</li> <li>OWASP Cheat Sheet: Application Logging Vocabulary</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/04-design/02-web-app-checklist/10-handle-errors-exceptions/","title":"Handle all Errors and Exceptions","text":"<p>Handling exceptions and errors correctly is critical to making your code reliable and secure. Error and exception handling occurs in all areas of an application including critical business logic as well as security features and framework code.</p> <p>Refer to proactive control C3: Validate all Input &amp; Handle Exceptions and its cheatsheets for more context from the OWASP Top 10 Proactive Controls project, and use the list below as suggestions for a checklist that has been tailored for the individual project.</p>"},{"location":"en/04-design/02-web-app-checklist/10-handle-errors-exceptions/#1-errors-and-exceptions","title":"1. Errors and exceptions","text":"<ol> <li>Manage exceptions in a centralized manner to avoid duplicated try/catch blocks in the code</li> <li>Ensure that all unexpected behavior is correctly handled inside the application</li> <li>Ensure that error messages displayed to users do not leak critical data,     but are still verbose enough to enable the proper user response</li> <li>Ensure that exceptions logs give enough information for support, QA, forensics or incident response teams</li> <li>Carefully test and verify error handling code</li> <li>Do not disclose sensitive information in error responses, for example     system details, session identifiers or account information</li> <li>Use error handlers that do not display debugging or stack trace information</li> <li>Implement generic error messages and use custom error pages</li> <li>The application should handle application errors and not rely on the server configuration</li> <li>Properly free allocated memory when error conditions occur</li> <li>Error handling logic associated with security controls should deny access by default</li> </ol>"},{"location":"en/04-design/02-web-app-checklist/10-handle-errors-exceptions/#references","title":"References","text":"<ul> <li>OWASP Code Review Guide: Error Handling</li> <li>OWASP Improper Error Handling</li> <li>OWASP Top 10 Proactive Controls</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/","title":"Overview","text":"<p>The Implementation business function is described by the OWASP Software Assurance Maturity Model (SAMM). Implementation is focused on the processes and activities related to how an organization builds and deploys software components and its related defects. Implementation activities have the most impact on the daily life of developers, and an important goal of Implementation is to ship reliably working software with minimum defects.</p> <p>Implementation should include security practices such as :</p> <ul> <li>Secure Build</li> <li>Secure Deployment</li> <li>Defect Management</li> </ul> <p>Implementation is where the application / system begins to take shape; source code is written and tests are created. The implementation of the application follows a secure development lifecycle, with security built in from the start.</p> <p>The implementation will use a secure method of source code control and storage to fulfill the design security requirements. The development team will be referring to documentation advising them of best practices, they will be using secure libraries wherever possible in addition to checking and tracking external dependencies.</p> <p>Much of the skill of implementation comes from experience, and taking into account the Do's and Don'ts of secure development is an important knowledge activity in itself.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/04-maswe/","title":"MASWE","text":"<p>The OWASP Mobile Application Security (MAS) flagship project provides industry standards for mobile application security.</p> <p>The OWASP MASWE project is one of the tools provided by MAS, and provides a list of weaknesses that have been found in various mobile applications.</p>"},{"location":"en/05-implementation/04-maswe/#what-is-the-maswe","title":"What is the MASWE?","text":"<p>The MAS Weakness Enumeration lists weaknesses, and therefore potential vulnerabilities, that have been found in various mobile applications over time.</p> <p>The MASWE is split out into weakness categories that correspond to the MASVS verification categories:</p> <ul> <li>MASVS-STORAGE sensitive data storage</li> <li>MASVS-CRYPTO cryptography best practices</li> <li>MASVS-AUTH authentication and authorization mechanisms</li> <li>MASVS-NETWORK network communications</li> <li>MASVS-PLATFORM interactions with the mobile platform</li> <li>MASVS-CODE platform and third-party software</li> <li>MASVS-RESILIENCE integrity and running on a trusted platform</li> <li>MASVS-PRIVACY privacy of users, data and resources</li> </ul>"},{"location":"en/05-implementation/04-maswe/#why-use-it","title":"Why use it?","text":"<p>Although the MASWE is a relatively new project from 2024, it already provides a common language when discussing and categorizing weaknesses found in mobile applications. It also provides a list of potential vulnerabilities that should be considered during the design lifecycle and when creating or revising security requirements for mobile applications.</p> <p>The MASWE is a valuable list of what can go wrong with mobile applications along with the activities of malicious actors.</p>"},{"location":"en/05-implementation/04-maswe/#how-to-use-it","title":"How to use it","text":"<p>The Common Weakness Enumeration (CWE), published by MITRE, can be used by security architects so they are aware of what weaknesses and potential vulnerabilities that could be present in an application. Development teams can use the CWE as a reference to these weaknesses and to help understanding of any mitigations. These are just two examples of how the CWE is widely used.</p> <p>In a similar way the MASWE can be used in the development of mobile applications :</p> <ul> <li>inform development teams of specific weaknesses</li> <li>identification of security requirements</li> <li>used as a training aid</li> <li>provide categorization of weaknesses</li> </ul> <p>This list is just a starting point; there are many uses for the MASWE.</p>"},{"location":"en/05-implementation/04-maswe/#references","title":"References","text":"<ul> <li>Mobile Application Security (MAS) project</li> <li>MAS Weakness Enumeration (MASWE)</li> <li>MITRE Common Weakness Enumeration (CWE)</li> <li>MAS Verification Standard (MASVS)</li> <li>MAS Checklist</li> <li>MAS Testing Guide (MASTG)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/01-documentation/","title":"Overview","text":"<p>Documentation is used here as part of the SAMM Training and Awareness activity, which in turn is part of the SAMM Education &amp; Guidance security practice within the Governance business function.</p> <p>It is important that development teams have good documentation on security techniques, frameworks, tools and threats. Documentation helps to promote security awareness for all teams involved in software development, and provides guidance on building security into applications and systems.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/01-documentation/01-proactive-controls/","title":"Top 10 Proactive Controls","text":"<p>The OWASP Top 10 Proactive Controls describes the most important controls and control categories that security architects and development teams should consider in web application projects.</p>"},{"location":"en/05-implementation/01-documentation/01-proactive-controls/#what-are-the-top-10-proactive-controls","title":"What are the Top 10 Proactive Controls?","text":"<p>The OWASP Top 10 Proactive Controls is a list of security techniques that should be considered for web applications. They are ordered by order of importance, with control number 1 being the most important:</p> <ul> <li>C1: Implement Access Control, ref Cheat Sheets</li> <li>C2: Use Cryptography the proper way, ref Cheat Sheets</li> <li>C3: Validate all Input &amp; Handle Exceptions, ref Cheat Sheets</li> <li>C4: Address Security from the Start, ref Cheat Sheets</li> <li>C5: Secure By Default Configurations, ref Cheat Sheets</li> <li>C6: Keep your Components Secure, ref Cheat Sheets</li> <li>C7: Implement Digital Identity, ref Cheat Sheets</li> <li>C8: Leverage Browser Security Features, ref Cheat Sheets</li> <li>C9: Implement Security Logging and Monitoring, ref Cheat Sheets</li> <li>C10: Stop Server Side Request Forgery, ref Cheat Sheets</li> </ul>"},{"location":"en/05-implementation/01-documentation/01-proactive-controls/#why-use-them","title":"Why use them?","text":"<p>The Proactive Controls are a well established list of security controls, first published in 2014 and revised in 2018, so considering these controls can be seen as best practice. Following best practices is always encouraged: at the very least an organization should avoid the avoidable exploits.</p> <p>Putting these proactive controls in place can help remediate common security vulnerabilities, for example:</p> <ul> <li>Clickjacking</li> <li>Credential Stuffing</li> <li>Cross-site leaks</li> <li>Denial of Service (DoS) attacks</li> <li>DOM based XSS attacks including DOM Clobbering</li> <li>IDOR (Insecure Direct Object Reference)</li> <li>Injection including OS Command injection and XXE</li> <li>LDAP specific injection attacks</li> <li>Prototype pollution</li> <li>SSRF attacks</li> <li>SQL injection and the use of Query Parameterization</li> <li>Unvalidated redirects and forwards</li> <li>XSS attacks and XSS Filter Evasion</li> </ul>"},{"location":"en/05-implementation/01-documentation/01-proactive-controls/#how-to-apply-them","title":"How to apply them","text":"<p>The OWASP Spotlight series provides an overview of how to use this documentation project: 'Project 8 - Proactive Controls'.</p> <p>During development of a web application, consider using each security control described in the sections of the Proactive Controls that are relevant to the application.</p> <p>The OWASP Cheat Sheets have been indexed specifically for each Proactive Control, which can be used as additional information on implementing the control.</p>"},{"location":"en/05-implementation/01-documentation/01-proactive-controls/#references","title":"References","text":"<ul> <li>OWASP Proactive Controls project</li> <li>OWASP Cheat Sheet Proactive Controls index</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/01-documentation/02-go-scp/","title":"Go Secure Coding Practices","text":"<p>The OWASP Go Secure Coding Practices (Go-SCP) is a set of software secure coding practices for the Go programming language.</p> <p>The Go-SCP documentation project is an OWASP Incubator Project that has enough long term support to achieve Lab status soon. The published document can be downloaded in various formats from the github repo.</p>"},{"location":"en/05-implementation/01-documentation/02-go-scp/#what-is-go-scp","title":"What is Go-SCP?","text":"<p>Go-SCP provides examples and recommendations to help developers avoid common mistakes and pitfalls, including code examples in Go that provide practical guidance on implementing the recommendations. Go-SCP covers the OWASP Secure Coding Practices Quick Reference Guide topic-by-topic:</p> <ul> <li>Input Validation</li> <li>Sanitization Output Encoding</li> <li>Authentication and Password Management</li> <li>Session Management</li> <li>Access Control</li> <li>Cryptographic Practices</li> <li>Error Handling and Logging</li> <li>Data Protection</li> <li>Communication Security</li> <li>System Configuration</li> <li>Database Security</li> <li>File Management</li> <li>Memory Management</li> <li>General Coding Practices</li> </ul> <p>The Go Secure Coding Practices book is available in various formats:</p> <ul> <li>PDF</li> <li>ePub</li> <li>DocX</li> <li>MOBI</li> </ul>"},{"location":"en/05-implementation/01-documentation/02-go-scp/#why-use-go-scp","title":"Why use Go-SCP?","text":"<p>Development teams often need help and support in getting the security right for web applications, and part of this help comes from secure coding guidelines and best practices. Go-SCP provides this guidance for a wide range of secure coding topics as well as providing practical code examples for each coding practice.</p>"},{"location":"en/05-implementation/01-documentation/02-go-scp/#how-to-use-go-scp","title":"How to use Go-SCP?","text":"<p>The primary audience of the Go Secure Coding Practices Guide is developers, particularly those with previous experience in other programming languages.</p> <p>Download the Go-SCP document in one of the formats: PDF, ePub, DocX and MOBI. Refer to the specific topic chapter and then use the example Go code snippets for practical guidance on secure coding using Go.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/01-documentation/03-cheatsheets/","title":"Cheatsheet Series","text":"<p>The OWASP Cheat Sheet Series provide a concise collection of high value information on a wide range of specific application security topics. The cheat sheets have been created by a community of application security professionals who have expertise in each specific topic.</p> <p>The Cheat Sheet Series documentation project is an OWASP Flagship Project which is constantly being kept up to date.</p>"},{"location":"en/05-implementation/01-documentation/03-cheatsheets/#what-are-the-cheat-sheets","title":"What are the Cheat Sheets?","text":"<p>The OWASP Cheat Sheets are a common body of knowledge created by the software security community for a wide audience that is not confined to the security community.</p> <p>The Cheat Sheets are a series of self contained articles written by the security community on a specific subject within the security domain. The range of topics covered by the cheat sheets is wide, almost from A to Z: from AJAX Security to XS (Cross Site) vulnerabilities. Each cheat sheet provides an introduction to the subject and provides enough information to understand the basic concept. It will then go on to describe its subject in more detail, often supplying recommendations or best practices.</p>"},{"location":"en/05-implementation/01-documentation/03-cheatsheets/#why-use-them","title":"Why use them?","text":"<p>The OWASP Cheat Sheet Series provide developers and security engineers with most, and perhaps all, of the information on security topics that they will need to do their job. In addition the Cheat Sheets are regarded as authoritative: it is recommended to follow the advice in these Cheat Sheets. If a web application does not follow the recommendations in a cheat sheet, for example, then the implementation could be challenged during testing or review processes.</p>"},{"location":"en/05-implementation/01-documentation/03-cheatsheets/#how-to-use-them","title":"How to use them","text":"<p>The OWASP Spotlight series provides a good overview of using this documentation: 'Project 4 - Cheat Sheet Series'.</p> <p>There are many cheat sheets in the OWASP Cheat Sheet Series; 91 of them as of March 2024 and this number is set to increase. The OWASP community recognizes that this may become overwhelming at first, and so has arranged them in various ways:</p> <ul> <li>Alphabetically</li> <li>Indexed to follow the ASVS project or the MASVS project</li> <li>Arranged in sections of the OWASP Top 10 or the OWASP Proactive Controls</li> </ul> <p>The cheat sheets are continually being updated and are always open to contributions from the security community.</p>"},{"location":"en/05-implementation/01-documentation/03-cheatsheets/#references","title":"References","text":"<ul> <li>OWASP Cheat Sheet Series</li> <li>OWASP Cheat Sheet ASVS index</li> <li>OWASP Cheat Sheet MASVS index</li> <li>OWASP Cheat Sheet Proactive Controls index</li> <li>OWASP Cheat Sheet Top 10 index</li> <li>OWASP Cheat Sheet project</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/02-dependencies/","title":"Overview","text":"<p>Management of software dependencies is described by the SAMM Software Dependencies activity, which in turn is part of the SAMM Secure Build security practice within the Implementation business function.</p> <p>It is important to record all dependencies used throughout the application in a production environment. This can be achieved by Software Composition Analysis (SCA) to identify the third party dependencies.</p> <p>A Software Bill of Materials (SBOM) provides a record of the dependencies within the system / application, and provides information on each dependency so that it can be tracked :</p> <ul> <li>Where it is used or referenced</li> <li>Version used</li> <li>License</li> <li>Source information and repository</li> <li>Support and maintenance status of the dependency</li> </ul> <p>Having an SBOM provides the ability to quickly find out which applications are affected by a specific Common Vulnerability and Exposure (CVE), or what CVEs are present in a particular application.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/02-dependencies/01-dependency-check/","title":"Dependency-Check","text":"<p>OWASP Dependency-Check is a tool that provides Software Composition Analysis (SCA) from the command line. It identifies the third party libraries in a web application project and checks if these libraries are vulnerable using the NVD database.</p> <p>Dependency-Check is an OWASP Flagship project and can be downloaded from the github releases area. Dependency-Check was started in September 2012 and since then has been continuously supported with regular releases.</p>"},{"location":"en/05-implementation/02-dependencies/01-dependency-check/#what-is-dependency-check","title":"What is Dependency-Check?","text":"<p>Dependency-Check is a Software Composition Analysis (SCA) tool that attempts to detect publicly disclosed vulnerabilities contained within a project\u2019s dependencies. It does this by determining if there is a Common Platform Enumeration (CPE) identifier for a given dependency.</p> <p>The core engine contains a series of analyzers that inspect the project dependencies and identify the CPE for the given dependency. If a CPE is identified then it is cross referenced to the NIST CVE database and any associated Common Vulnerability and Exposure (CVE) entries are listed in the report.</p> <p>Dependency-Check's core analysis engine can be used as:</p> <ul> <li>an Ant Task</li> <li>a Command Line Tool</li> <li>Gradle Plugin</li> <li>Jenkins Plugin</li> <li>Maven Plugin</li> <li>SBT Plugin</li> </ul>"},{"location":"en/05-implementation/02-dependencies/01-dependency-check/#why-use-it","title":"Why use it?","text":"<p>Checking for vulnerable components, 'A06 Vulnerable and Outdated Components', is in the OWASP Top Ten and is one of the most straight-forward and effective security activities to implement. The Dependency-Check tool provides checks for vulnerable components that can be run from the command line.</p> <p>This is useful for development teams; the ability to check for vulnerable application components from the command line gives immediate feedback to the developer without having to wait for a pipeline to run.</p> <p>Dependency-Check also provides plugins to check for vulnerable components for CI/CD pipelines.</p>"},{"location":"en/05-implementation/02-dependencies/01-dependency-check/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an example of the risks involved in using out of date and vulnerable libraries, and how to use Dependency-Check: 'Project 2 - OWASP Dependency Check'.</p> <p>Refer to the Dependency-Check documentation to get started running from the command line:</p> <ul> <li>ensure Java is installed, for example from Eclipse Adoptium</li> <li>download and unzip the latest Dependency-Check release</li> <li>navigate to the Dependency-Check 'bin' directory and run, using threat Dragon as an example:   <code>./dependency-check.sh --project \"Threat Dragon\" --scan ~/github/threat-dragon</code></li> <li>open the html output file and act on the findings</li> </ul> <p>The command line is useful for immediate debugging development. Depending on what automation environment is in place a plugin can also be installed into a pipeline which can then generate the SCA reports.</p>"},{"location":"en/05-implementation/02-dependencies/01-dependency-check/#references","title":"References","text":"<ul> <li>OWASP Dependency-Check project</li> <li>OWASP Dependency-Check documentation</li> <li>OWASP CI/CD Security Cheat Sheet</li> <li>OWASP Top 10</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/02-dependencies/02-dependency-track/","title":"Dependency-Track","text":"<p>OWASP Dependency-Track is an intelligent platform for Component Analysis including Third Party Software. It allows organizations to identify and reduce risk in the software supply chain using its ability to analyze a Software Bill of Materials (SBOM).</p> <p>The Dependency-Track is an OWASP Flagship project and can be installed using a docker-compose file from the Dependency-Track website.</p>"},{"location":"en/05-implementation/02-dependencies/02-dependency-track/#what-is-dependency-track","title":"What is Dependency-Track?","text":"<p>The Dependency-Track tool provides an organization with a dashboard to analyze, oversee and control the components for all of its projects. It tracks component usage across every application in an organizations portfolio by analyzing exports from multiple projects within the organization, via CycloneDX SBOMs and Vulnerability Exploitability Exchange.</p> <p>It provides full-stack support for all types of component, including hardware and services. Dependency-Track identifies multiple forms of risk, including components with known vulnerabilities, by integrating with multiple sources of vulnerability intelligence such as the National Vulnerability Database (NVD), GitHub advisories and others.</p> <p>It has built-in repository support for various repository types, and will provide risk and compliance for security, risk and operations. See the Documentation for more information on the features provided by Dependency-Track.</p>"},{"location":"en/05-implementation/02-dependencies/02-dependency-track/#why-use-it","title":"Why use it?","text":"<p>By leveraging the capabilities of Software Bill of Materials (SBOM), Dependency-Track provides capabilities that traditional Software Composition Analysis (SCA) solutions are unlikely to achieve.</p> <p>The Dependency-Track dashboard has the ability to analyze all software projects within an organization. It integrates with numerous notification platforms, for example Slack and Microsoft Teams, and can feed results to various vulnerability aggregator tools such as DefectDojo or Fortify.</p> <p>Dependency-Track is feature rich, it provides integrations and features that most organizations will need; see the Documentation Introduction for a full list of these features.</p>"},{"location":"en/05-implementation/02-dependencies/02-dependency-track/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of tracking dependencies and inspecting SBOMs using Dependency-Track: 'Project 15 - OWASP Dependency-Track'.</p> <p>Follow the getting started guide to install the Dependency-Track tool, using the recommended deployment of a Docker container.</p> <p>Although Dependency-Track will run with its default configuration it should be configured for the organization's specific needs. The Dependency-Track configuration file is important for optimally running the tool but this is outside the scope of the Developer Guide - see the Dependency-Track documentation for a step by step guide to this configuration process.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/02-dependencies/03-cyclonedx/","title":"CycloneDX","text":"<p>OWASP CycloneDX is a full-stack Bill of Materials (BOM) standard that provides advanced supply chain capabilities for cyber risk reduction. This project is one of the OWASP flagship projects.</p>"},{"location":"en/05-implementation/02-dependencies/03-cyclonedx/#what-is-cyclonedx","title":"What is CycloneDX?","text":"<p>CycloneDX is a widely used standard for various types of Bills of Materials. It provides an organization's supply chain with software security risk reduction. The specification supports:</p> <ul> <li>Software Bill of Materials (SBOM)</li> <li>Software-as-a-Service Bill of Materials (SaaSBOM)</li> <li>Hardware Bill of Materials (HBOM)</li> <li>Machine-learning Bill of Materials (ML-BOM)</li> <li>Manufacturing Bill of Materials (MBOM)</li> <li>Operations Bill of Materials (OBOM)</li> <li>Bill of Vulnerabilities (BOV)</li> <li>Vulnerability Disclosure Reports (VDR)</li> <li>Vulnerability Exploitability eXchange (VEX)</li> <li>Common Release Notes format</li> <li>Syntax for Bill of Materials linkage (BOM-Link)</li> </ul> <p>The CycloneDX project provides standards in XML, JSON, and Protocol Buffers. There is a large collection of official and community supported tools that consume and create CycloneDX BOMs or interoperate with the CycloneDX standard.</p>"},{"location":"en/05-implementation/02-dependencies/03-cyclonedx/#why-use-it","title":"Why use it?","text":"<p>CycloneDX is a very well established standard for SBOMs and various other types of BOM. There is a huge ecosystem built around CycloneDX and it is used globally by many companies. In addition SBOMs are mandatory for many industries and various governments - at some point every organization will have to provide SBOMs for their customers and CycloneDX is an accepted standard for this.</p> <p>CycloneDX also provides standards for other types of BOMs that may be required in the supply chain along with standards for release notes and responsible disclosure. It is useful to use CycloneDX throughout the supply chain as it promotes interoperability between the various tools.</p>"},{"location":"en/05-implementation/02-dependencies/03-cyclonedx/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of CycloneDX along with the a demonstration of using SBOMs: 'Project 21 - OWASP CycloneDX'.</p> <p>CycloneDX is an easy to understand standard that can be augmented to suit all parts of a supply chain, and there are many tools (more than 220 as of February 2024) that interoperate with CycloneDX.</p> <p>The easiest way to use CycloneDX is to select tools from this list for any of the supported BOM types, with both proprietary/commercial and open source tools included in the list. A common example is for a customer to request that an SBOM is provided for a web application, and various tools can be chosen that are able to export the SBOM in various formats.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/03-secure-libraries/","title":"Overview","text":"<p>The use of secure libraries is part of the technology management that helps to fulfill security requirements. Standard libraries enable the adoption of common design patterns and security solutions, and provide standardized technologies and frameworks that can be used throughout different applications.</p> <p>Technology Management for the software applications is described by SAMM as an activity within the SAMM Security Architecture security practice which in turn is part of the Design business function.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/03-secure-libraries/01-esapi/","title":"ESAPI","text":"<p>The OWASP Enterprise Security API (ESAPI) library is a security control library for web applications written in Java.</p> <p>The ESAPI library is an OWASP Lab project that is under active development for Java security controls with regular releases.</p>"},{"location":"en/05-implementation/03-secure-libraries/01-esapi/#what-is-the-esapi-library","title":"What is the ESAPI library?","text":"<p>The OWASP Enterprise Security API (ESAPI) library provides a set of security control interfaces which define types of parameters that are passed to the security controls.</p> <p>The ESAPI is an open source web application security control library that makes it easier for Java programmers to write lower-risk applications. The ESAPI Java library is designed to help programmers retrofit security into existing Java applications, and the library also serves as a solid foundation for new development.</p>"},{"location":"en/05-implementation/03-secure-libraries/01-esapi/#why-use-it","title":"Why use it?","text":"<p>The use of the ESAPI Java library is not easy to justify, although its use should certainly be considered. The engineering decisions a development team will need to make when using ESAPI are discussed in the 'Should I use ESAPI?' documentation.</p> <p>For new projects or for modifying an existing project then alternatives should be strongly considered:</p> <ul> <li>Output encoding: OWASP Java Encoder project</li> <li>General HTML sanitization: OWASP Java HTML Sanitizer</li> <li>Validation: JSR-303/JSR-349 Bean Validation</li> <li>Strong cryptography: Google Tink or Keyczar</li> <li>Authentication &amp; authorization: Apache Shiro, authentication using Spring Security</li> <li>CSRF protection: OWASP CSRFGuard project</li> </ul> <p>Consideration could be given for using ESAPI if multiple security controls provided by this library are used in a project, it then may be useful to use the monolithic ESAPI library rather than multiple disparate class libraries.</p>"},{"location":"en/05-implementation/03-secure-libraries/01-esapi/#how-to-use-it","title":"How to use it","text":"<p>If the engineering decision is to use the ESAPI library then it can be downloaded as a Java Archive (.jar) package file. There is a reference implementation for each security control.</p>"},{"location":"en/05-implementation/03-secure-libraries/01-esapi/#references","title":"References","text":"<ul> <li>ESAPI for Java</li> <li>ESAPI documentation</li> <li>ESAPI project</li> <li>OWASP Java Encoder project</li> <li>OWASP Java HTML Sanitizer</li> <li>Spring Security</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/03-secure-libraries/02-csrf-guard/","title":"CSRFGuard","text":"<p>OWASP CSRFGuard is a security control that helps protect Java applications against Cross-Site Request Forgery (CSRF) attacks.</p> <p>The CSRFGuard Builder/Breaker Tool project is an OWASP Production Project and is being actively maintained by a pool of international volunteers.</p>"},{"location":"en/05-implementation/03-secure-libraries/02-csrf-guard/#what-is-csrfguard","title":"What is CSRFGuard?","text":"<p>OWASP CSRFGuard is a library that implements a variant of the synchronizer token pattern to mitigate the risk of Cross-Site Request Forgery (CSRF) attacks for Java applications.</p> <p>The OWASP CSRFGuard library is integrated through the use of a JavaEE Filter and exposes various automated and manual ways to integrate per-session or pseudo-per-request tokens into HTML. When a user interacts with this HTML, CSRF prevention tokens are submitted with the corresponding HTTP request. CSRFGuard ensures the token is present and is valid for the current HTTP request.</p>"},{"location":"en/05-implementation/03-secure-libraries/02-csrf-guard/#why-use-it","title":"Why use it?","text":"<p>The OWASP CSRFGuard library is widely used for Java applications, and will help mitigate against CSRF.</p>"},{"location":"en/05-implementation/03-secure-libraries/02-csrf-guard/#how-to-use-it","title":"How to use it","text":"<p>Pre-compiled versions of the CSRFGuard library can be downloaded from the Maven Central repository or the OSS Sonatype Nexus repository.</p> <p>Follow the instructions to build CSRFGuard into the Java application using Maven.</p>"},{"location":"en/05-implementation/03-secure-libraries/02-csrf-guard/#references","title":"References","text":"<ul> <li>OWASP CSRFGuard</li> <li>OWASP Cross-Site Request Forgery Prevention Cheat Sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/05-implementation/03-secure-libraries/03-secure-headers/","title":"OSHP","text":"<p>The OWASP Secure Headers Project (OSHP) provides information on HTTP response headers to increase the security of a web application.</p> <p>The OSHP documentation project is an OWASP Lab Project and raises awareness  of secure headers and their use.</p>"},{"location":"en/05-implementation/03-secure-libraries/03-secure-headers/#what-is-oshp","title":"What is OSHP?","text":"<p>The OSHP project provides explanations for the HTTP response headers that an application can use to increase the security of the application. Once set the HTTP response headers can restrict modern browsers from running into easily preventable vulnerabilities.</p> <p>OSHP contains guidance and downloads on:</p> <ul> <li>Response headers explanations and usage</li> <li>Links to individual browser support</li> <li>Guidance and best practices</li> <li>Technical resources in the form of tools and documents</li> <li>Code snippets to help working with HTTP security headers</li> </ul>"},{"location":"en/05-implementation/03-secure-libraries/03-secure-headers/#why-use-it","title":"Why use it?","text":"<p>The OSHP is a documentation project that explains the reasoning and usage of HTTP response headers. It is the go-to document for guidance and best practices; the information on HTTP response headers is the best advice, in one location, and is kept up to date.</p>"},{"location":"en/05-implementation/03-secure-libraries/03-secure-headers/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of this project and its uses: 'Project 24 - OWASP Security Headers Project'.</p> <p>OSHP provides links to development libraries that provide for secure HTTP response headers in a range of languages and frameworks: DotNet, Go, HAPI, Java, NodeJS, PHP, Python, Ruby, Rust. The OSHP also lists various tools useful for inspection, analysis and scanning of HTTP response headers.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/","title":"Overview","text":"<p>Verification is one of the business functions described by the OWASP SAMM.</p> <p>Verification focuses on the processes and activities related to how an organization checks and tests artifacts produced throughout software development. This typically includes quality assurance work such as testing, and also includes other review and evaluation activities.</p> <p>Verification activities should include:</p> <ul> <li>Architecture assessment, validation and mitigation</li> <li>Requirements-driven testing</li> <li>Security control verification and misuse/abuse testing</li> <li>Automated security testing and baselining</li> <li>Manual security testing and penetration testing</li> </ul> <p>These activities are supported by:</p> <ul> <li>Security guides</li> <li>Test tools</li> <li>Test frameworks</li> <li>Vulnerability management</li> <li>Checklists</li> </ul> <p>Verification is an activity central to the secure software development lifecycle. Refer to the Security Culture project section for the various types of security testing.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/01-guides/","title":"Overview","text":"<p>Verification is one of the business functions described by the OWASP SAMM. The verification activities are wide ranging, and will include:</p> <ul> <li>Testing of security controls</li> <li>Review of controls and security mechanisms</li> <li>Evaluation and assessment of the security architecture</li> <li>and others</li> </ul> <p>Given the breadth of techniques and knowledge required, guides are an important resource for verification activities.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/01-guides/01-wstg/","title":"WSTG","text":"<p>The OWASP Web Security Testing Guide (WSTG) is a comprehensive guide to testing the security of web applications and web services.</p> <p>The WSTG documentation project is an OWASP Flagship Project and can be accessed as a web based document.</p>"},{"location":"en/06-verification/01-guides/01-wstg/#what-is-wstg","title":"What is WSTG?","text":"<p>The Web Security Testing Guide (WSTG) document is a comprehensive guide to testing the security of web applications and web services. The WSTG provides a framework of best practices commonly used by external penetration testers and organizations conducting in-house testing.</p> <p>The WSTG document describes a suggested web application test framework and also provides general information on how to test web applications with good testing practice.</p> <p>The tests are split out into domains:</p> <ol> <li>Configuration and Deployment Management</li> <li>Identity Management</li> <li>Authentication</li> <li>Authorization</li> <li>Session Management</li> <li>Input Validation</li> <li>Error Handling</li> <li>Weak Cryptography</li> <li>Business Logic</li> <li>Client-side</li> <li>API</li> </ol> <p>Each test in each domain has enough information to understand and run the test including:</p> <ul> <li>Summary</li> <li>Test objectives</li> <li>How to test</li> <li>Suggested remediation</li> <li>Recommended tools and references</li> </ul> <p>The tests are identified with a unique reference number, for example 'WSTG-APIT-01' refers to the first test in the 'API Testing' domain provided in the WSTG document. These references are widely used and understood by the test and security communities.</p> <p>The WSTG also provides a suggested Web Security Testing Framework which can be tailored for a particular organization's processes or can provide a generally accepted reference framework.</p>"},{"location":"en/06-verification/01-guides/01-wstg/#why-use-it","title":"Why use it?","text":"<p>The WSTG document is widely used and has become the defacto standard on what is required for comprehensive web application testing. An organization's security testing process should consider the contents of the WSTG, or have equivalents, which help the organization conform to general expectation of the security community. The WSTG reference document can be adopted completely, partially or not at all; according to an organization's needs and requirements.</p>"},{"location":"en/06-verification/01-guides/01-wstg/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of how to use the WSTG: 'Project 1 - Applying OWASP Testing Guide'.</p> <p>The WSTG is accessed via the online web document. The section on principles and techniques of testing provides foundational knowledge, along with advice on testing within typical Secure Development Lifecycle (SDLC) and penetration testing methodologies.</p> <p>The individual tests described in the various testing domains should be selected or discarded as necessary; not every test will be relevant to every web application or organizational requirement, and the tests should be tailored to provide at least the minimum test coverage while not expending too much test effort.</p>"},{"location":"en/06-verification/01-guides/01-wstg/#references","title":"References","text":"<ul> <li>OWASP Web Security Testing Guide (WSTG) project</li> <li>WSTG downloads</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/01-guides/02-mastg/","title":"MASTG","text":"<p>The MAS Verification Standard (MASVS) explains the processes, techniques and tools used for security testing a mobile application.</p> <p>The OWASP MAS project provides the Mobile Application Security Testing Guide (MASTG) which describes technical processes that can be used for verification of the mobile application controls .</p>"},{"location":"en/06-verification/01-guides/02-mastg/#what-is-mastg","title":"What is MASTG?","text":"<p>The OWASP Mobile Application Security Testing Guide is a comprehensive manual for mobile application security testing and reverse engineering. It describes the technical processes used for verifying the controls listed in the OWASP MASVS.</p> <p>The MASTG provides several resources for testing the controls:</p> <ul> <li>Sections detailing the concepts and theory behind testing of both Android and iOS platforms</li> <li>Lists of tests for each section of the MASVS</li> <li>Descriptions of techniques for Android or iOS used during testing</li> <li>Lists of generic tools and also ones specific for Android or iOS</li> <li>Reference applications that can be used as training material</li> </ul>"},{"location":"en/06-verification/01-guides/02-mastg/#why-use-mastg","title":"Why use MASTG?","text":"<p>The OWASP MASVS is the industry standard for mobile application security, and provides a list of security controls that are expected in a mobile application. If the application does not implement these controls correctly then it could be vulnerable; the MASTG tests that the application has the controls listed in the MASVS.</p>"},{"location":"en/06-verification/01-guides/02-mastg/#how-to-use-mastg","title":"How to use MASTG","text":"<p>The OWASP Spotlight series provides an overview of using the MASTG: 'Project 13 - OWASP Mobile Security Testing Guide (MSTG)'.</p> <p>The MASTG project contains a large number of resources that can be used during verification and testing of mobile applications; pick and choose the resources that are applicable to specific application.</p> <ul> <li>Refer to the MASTG section on the concepts and theory to ensure good understanding of the testing process</li> <li>Select the MASTG tests that are applicable to the application and its platform OS</li> <li>Use the section on MASTG techniques to run the selected tests correctly</li> <li>Become familiar with the range of MASTG tools available and select the ones that you need</li> <li>Use the MAS Checklists to provide evidence of compliance</li> </ul>"},{"location":"en/06-verification/01-guides/02-mastg/#references","title":"References","text":"<ul> <li>OWASP Mobile Application Security (MAS) project</li> <li>OWASP MAS Testing Guide (MASTG)</li> <li>OWASP MAS Checklists</li> <li>OWASP MAS Verification Standard (MASVS)</li> <li>OWASP Mobile Application Security cheat sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/01-guides/03-asvs/","title":"ASVS","text":"<p>The Application Security Verification Standard (ASVS) is a long established OWASP flagship project, and is widely used as a guide during the verification of web applications.</p> <p>It can be downloaded from the OWASP project page in various languages and formats: PDF, Word, CSV, XML and JSON. Having said that, the recommended way to consume the ASVS is to access the github markdown pages directly - this will ensure that the latest version is used.</p>"},{"location":"en/06-verification/01-guides/03-asvs/#what-is-asvs","title":"What is ASVS?","text":"<p>The ASVS is an open standard that sets out the coverage and 'level of rigor' expected when it comes to performing web application security verification. The standard also provides a basis for testing any technical security controls that are relied on to protect against vulnerabilities in the application.</p> <p>The ASVS is split into various sections:</p> <ul> <li>V1 Architecture, Design and Threat Modeling</li> <li>V2 Authentication</li> <li>V3 Session Management</li> <li>V4 Access Control</li> <li>V5 Validation, Sanitization and Encoding</li> <li>V6 Stored Cryptography</li> <li>V7 Error Handling and Logging</li> <li>V8 Data Protection</li> <li>V9 Communication</li> <li>V10 Malicious Code</li> <li>V11 Business Logic</li> <li>V12 Files and Resources</li> <li>V13 API and Web Service</li> <li>V14 Configuration</li> </ul> <p>The ASVS defines three levels of security verification:</p> <ol> <li>applications that only need low assurance levels; these applications are completely penetration testable</li> <li>applications which contain sensitive data that require protection; the recommended level for most applications</li> <li>the most critical applications that require the highest level of trust</li> </ol> <p>Most applications will aim for Level 2, with only those applications that perform high value transactions, or contain sensitive medical data, aiming for the highest level of trust at level 3.</p>"},{"location":"en/06-verification/01-guides/03-asvs/#why-use-it","title":"Why use it?","text":"<p>The ASVS is used by many organizations as a basis for the verification of their web applications. It is well established, the earlier versions were written in 2008, and it has been continually supported since then.</p> <p>The ASVS is comprehensive, for example version 4.0.3 has a list of 286 verification requirements, and these verification requirements have been created and agreed to by a wide security community. Using the ASVS as a guide provides a firm basis for the verification process.</p>"},{"location":"en/06-verification/01-guides/03-asvs/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of the ASVS and its uses: 'Project 19 - OWASP Application Security Verification standard (ASVS)'.</p> <p>The ASVS should be used as a guide for the verification process, with the appropriate level of verification chosen from:</p> <ul> <li>Level 1: First steps, automated, or whole of portfolio view</li> <li>Level 2: Most applications</li> <li>Level 3: High value, high assurance, or high safety</li> </ul> <p>Use the ASVS as guidance rather than trying to implement every possible control. Tools such as SecurityRAT can help create a more manageable subset of the ASVS requirements.</p> <p>The ASVS guidance will help developers build security controls that will satisfy the application security requirements.</p> <p>The OWASP Cheat Sheets have been indexed specifically for each section of the ASVS, which can be used as documentation to help decide if a requirements category is to be included in verification.</p>"},{"location":"en/06-verification/01-guides/03-asvs/#references","title":"References","text":"<ul> <li>OWASP Application Security Verification Standard (ASVS)</li> <li>OWASP ASVS Index</li> <li>OWASP SecurityRAT project</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/02-tools/","title":"Overview","text":"<p>Verification is one of the business functions described by the OWASP SAMM.</p> <p>The SAMM Security Testing activity describes the use of both automated security testing and manual expert security testing to discover security defects. This security testing should be automated as part of the development, build and deployment processes; and can be complemented with regular manual security penetration tests.</p> <p>Automated security testing tools are fast and scale well to numerous applications, whereas manual security testing of high-risk components requires good knowledge of the application and its business logic.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/02-tools/01-dast/","title":"DAST tools","text":"<p>Dynamic application security testing (DAST) represents a non-functional testing process to identify security weaknesses and vulnerabilities in applications. The testing process can be carried out manually or be automated. Manual assessment of an application involves human intervention to identify security flaws which might slip from an automated tool. Usually business logic errors, race condition checks, and certain zero-day vulnerabilities can only be identified using manual assessments.</p> <p>DAST tools are programs which communicates with a web application through the web front-end in order to identify potential security vulnerabilities in the web application and architectural weaknesses. It performs a black-box test. Unlike static application security testing tools, DAST tools do not have access to the source code and therefore detect vulnerabilities by actually performing attacks.</p>"},{"location":"en/06-verification/02-tools/01-dast/#different-dast-tools","title":"Different DAST tools","text":"<p>The OWASP Community contains a list of DAST tools that can be used to conduct DAST. All of these tools have their own strengths and weaknesses. If you are interested in the effectiveness of DAST tools, check out the OWASP Benchmark project, which attempts to scientifically measure the effectiveness of all types of vulnerability detection tools, including DAST.</p>"},{"location":"en/06-verification/02-tools/01-dast/#why-use-it","title":"Why use it?","text":"<p>The big advantage of these types of tools are that they can scan year-round to be constantly searching for vulnerabilities. With new vulnerabilities being discovered regularly this allows companies to find and patch vulnerabilities before they can become exploited.</p>"},{"location":"en/06-verification/02-tools/01-dast/#cons","title":"Cons","text":"<p>Because these tools does dynamic testing, it cannot cover 100% of the source code of the application and then, the application itself. The penetration tester should look at the coverage of the web application or of its attack surface to know if the tool was configured correctly or was able to understand the web application.</p>"},{"location":"en/06-verification/02-tools/01-dast/#references","title":"References","text":"<ul> <li>Dynamic application security testing</li> <li>Vulnerability Scanning Tools</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/02-tools/02-amass/","title":"Amass","text":"<p>The OWASP Amass is a tool that provides  attack surface management for an organization's web sites and applications. It used during penetration testing for network mapping of attack surfaces and external asset discovery by integrating various existing security tools.</p> <p>The Amass breaker/tool project is an OWASP Flagship Project and installers can be downloaded from the project's github repository release area.</p>"},{"location":"en/06-verification/02-tools/02-amass/#what-is-amass","title":"What is Amass?","text":"<p>Amass is a command line tool that provides information on an organization's web sites, using various open source information gathering tools and active reconnaissance techniques.</p> <p>It is run from the command line with subcommands :</p> <ol> <li>'amass intel' collects intelligence on the target organization</li> <li>'amass enum' performs DNS enumeration and network mapping to populate the results database</li> <li>'amass db'</li> </ol> <p>Each command comes with a wide set of options that controls the tools used and the format of the findings.</p>"},{"location":"en/06-verification/02-tools/02-amass/#why-use-it","title":"Why use it?","text":"<p>Amass is an important tool for security test teams. Amass is included in the Kali Linux distribution, which is widely used by penetration testing teams, with Amass providing a straightforward way of running a wide set of reconnaissance and enumeration tools.</p> <p>In addition Amass is an easily used tool that is available to both legitimate test teams and malicious actors. It is very likely that any given organization has been scanned and enumerated by Amass at some point, either maliciously or legitimately, so it is important that the tool is run to determine what information a malicious actor can obtain.</p>"},{"location":"en/06-verification/02-tools/02-amass/#how-to-use-it","title":"How to use it","text":"<p>If Kali Linux is being used then Amass comes ready installed, otherwise a wide set of installers is provided for other platforms.</p> <p>The extensive Amass tutorial provides the best way of learning to use Amass and its features.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/02-tools/03-owtf/","title":"OWTF","text":"<p>OWASP Offensive Web Testing Framework (OWTF) is a penetration test tool that provides pen-testers with a framework for organizing and running security test suites. It also helps align the pen-testing to various standards and security guides, allowing the testing to be more creative and comprehensive.</p> <p>The OWTF defender/tool project is an OWASP Flagship Project and can be downloaded from the project's github repository release area.</p>"},{"location":"en/06-verification/02-tools/03-owtf/#what-is-owtf","title":"What is OWTF?","text":"<p>The OWTFtool is a penetration test framework used to organize and run suites of security and pen-testing tools. It is designed to be run on Kali Linux; it can also be run on MacOS but with some modification of scripts and paths.</p> <p>OWTF is very much a penetration tester's tool; there is an expectation that the user has a reasonable expertise and grasp of penetration testing environments and tools. The documentation on installing and running OWTF requires is not extensive, and some in-depth knowledge on the target system is required to configure the tool.</p>"},{"location":"en/06-verification/02-tools/03-owtf/#why-use-it","title":"Why use it?","text":"<p>OWTF is easily configurable and plugins can be created or new tests added using the configuration files. It can be quickly installed on Kali Linux, a distribution of Ubuntu that is widely used by pen-testers, and allows for a whole suite of tests to be directed against the target.</p>"},{"location":"en/06-verification/02-tools/03-owtf/#how-to-use-it","title":"How to use it","text":"<p>The OWTF documentation is relatively old, last updated in 2016, and  the install instructions may need adapting to run on MacOS or Kali.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/02-tools/04-nettacker/","title":"Nettacker","text":"<p>OWASP Nettacker is a command line utility for automated network and vulnerability scanning. It can be used during penetration testing for both internal and external security assessments of networks.</p> <p>The Nettacker breaker/tool project is an OWASP Incubator Project; the latest version can be downloaded from the project's github repository.</p>"},{"location":"en/06-verification/02-tools/04-nettacker/#what-is-nettacker","title":"What is Nettacker?","text":"<p>Nettacker is an automated penetration testing tool. It is used to scan a network to discover nodes and servers on the network including subdomains. Nettacker can then identify servers, services and port numbers in use.</p> <p>Nettacker is a modular python application that that can be extended with other scanning functions. The many modules available are grouped into domains:</p> <ul> <li>Scan modules for reconnaissance</li> <li>Vulnerability modules that attempt specific exploits</li> <li>Brute force modules</li> </ul> <p>Nettacker runs on Windows, Linux and MacOS.</p>"},{"location":"en/06-verification/02-tools/04-nettacker/#why-use-it","title":"Why use it?","text":"<p>Nettacker is easy to use from the command line, making it easy to use in scripts, and also comes with a web browser interface for easy navigation of the results. This makes it a quick and reliable way to gain information from a network.</p> <p>Nettacker can be used both for auditing purposes and also for penetration testing.</p>"},{"location":"en/06-verification/02-tools/04-nettacker/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of attack surface management using Nettacker: 'Project 11 - Nettacker'.</p> <p>The documentation for Nettacker is provided in the repository wiki pages; follow these instructions to install it.</p> <p>Nettacker is a flexible and modular scanning tool that can be used in many ways and with many options. The best way to start using it is by following the introduction video and then taking it from there.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/02-tools/05-secure-headers/","title":"OSHP verification","text":"<p>The OWASP Secure Headers Project (OSHP) provides information on HTTP response headers to increase the security of a web application.</p> <p>The OSHP documentation project is an OWASP Lab Project and raises awareness  of secure headers and their use.</p>"},{"location":"en/06-verification/02-tools/05-secure-headers/#what-is-oshp","title":"What is OSHP?","text":"<p>The OSHP project) provides explanations for the HTTP response headers that an application can use to increase the security of the application. Once set the HTTP response headers can restrict modern browsers from running into easily preventable vulnerabilities.</p> <p>OSHP contains guidance and downloads on:</p> <ul> <li>Response headers explanations and usage</li> <li>Links to individual browser support</li> <li>Guidance and best practices</li> <li>Technical resources in the form of tools and documents</li> <li>Code snippets to help working with HTTP security headers</li> </ul>"},{"location":"en/06-verification/02-tools/05-secure-headers/#why-use-it","title":"Why use it?","text":"<p>The OSHP is a documentation project that explains the reasoning and usage of HTTP response headers. It is the go-to document for guidance and best practices; the information on HTTP response headers is the best advice, in one location, and is kept up to date.</p>"},{"location":"en/06-verification/02-tools/05-secure-headers/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of this project and its uses: 'Project 24 - OWASP Security Headers Project'.</p> <p>OSHP documents various tools useful for inspection, analysis and scanning of HTTP response headers:</p> <ul> <li>hsecscan</li> <li>humble</li> <li>SecurityHeaders.com</li> <li>Mozilla Observatory</li> <li>Recx Security Analyser</li> <li>testssl.sh</li> <li>DrHEADer</li> <li>csp-evaluator</li> </ul> <p>OSHP also provides links to development libraries that provide for secure HTTP response headers in a range of languages and frameworks.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/03-frameworks/","title":"Overview","text":"<p>Verification is one of the business functions described by the OWASP SAMM and both Security Testing and Requirements-driven Testing are an important part of verification.</p> <p>Verification testing can benefit from using frameworks to support continuous and automated security testing. Use of a framework can provide:</p> <ul> <li>automation of a security analysis pipeline</li> <li>flexibility to run a series of tools in a pipeline</li> <li>scalability for multiple security scanners</li> <li>control interfaces</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/03-frameworks/01-secure-codebox/","title":"secureCodeBox","text":"<p>OWASP secureCodeBox is a kubernetes based modularized toolchain that provides continuous security scans of an organizations' projects and web applications.</p> <p>The secureCodeBox builder/tool project is an OWASP Lab Project and is installed using the Helm ChartMuseum.</p>"},{"location":"en/06-verification/03-frameworks/01-secure-codebox/#what-is-securecodebox","title":"What is secureCodeBox?","text":"<p>OWASP secureCodeBox combines existing security tools from the static analysis, dynamic analysis and network analysis domains. It uses these tools to provide a comprehensive overview of threats and vulnerabilities affecting an organization's network and applications.</p> <p>OWASP secureCodeBox orchestrates a range of security-testing tools in various domains:</p> <ul> <li>Container analysis:</li> <li>Trivy container vulnerability scanner</li> <li> <p>Trivy SBOM container dependency scanner</p> </li> <li> <p>Content Management System analysis:</p> </li> <li>CMSeeK detecting the Joomla CMS and its core vulnerabilities</li> <li>Typo3Scan detecting the Typo3 CMS and its installed extensions</li> <li> <p>WPScan Wordpress vulnerability scanner</p> </li> <li> <p>Kubernetes analysis:</p> </li> <li>Kube Hunter vulnerability scanner</li> <li> <p>Kubeaudit configuration Scanner</p> </li> <li> <p>Network analysis:</p> </li> <li>Amass subdomain enumeration scanner</li> <li>doggo DNS client</li> <li>Ncrack network authentication bruteforcing</li> <li>Nmap network discovery and security auditing</li> <li> <p>Whatweb website identification</p> </li> <li> <p>Repository analysis:</p> </li> <li>Git Repo Scanner discover Git repositories</li> <li>Gitleaks find potential secrets in repositories</li> <li> <p>Semgrep static code analysis</p> </li> <li> <p>SSH/TLS configuration and policy scanning with SSH-audit and SSLyze</p> </li> <li> <p>Web Application analysis:</p> </li> <li>ffuf web server and web application elements and content discovery</li> <li>Nikto web server vulnerability scanner</li> <li>Nuclei template based vulnerability scanner.</li> <li>Screenshooter takes screenshots of websites</li> <li>ZAP Advanced web application &amp; OpenAPI vulnerability scanner</li> </ul> <p>Other tools may be added over time.</p>"},{"location":"en/06-verification/03-frameworks/01-secure-codebox/#why-use-it","title":"Why use it?","text":"<p>OWASP secureCodeBox provides the power of leading open source security testing tools with a multi-scanner platform. This provides the ability to run routine scans continuously and automatically on an organization's network infrastructure and applications.</p> <p>OWASP secureCodeBox is fully scalable and can be separately configured for multiple teams, systems or clusters.</p>"},{"location":"en/06-verification/03-frameworks/01-secure-codebox/#how-to-use-it","title":"How to use it","text":"<p>OWASP secureCodeBox runs on Kubernetes and uses Helm to install using the Helm ChartMuseum. There is an excellent 'Starting your First Scans' guide to getting started with secureCodeBox, with the rest of the documentation providing clear information on configuring and running secureCodeBox.</p>"},{"location":"en/06-verification/03-frameworks/01-secure-codebox/#references","title":"References","text":"<ul> <li>OWASP secureCodeBox</li> <li>Kubernetes container orchestration</li> <li>Helm package manager for Kubernetes</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/04-vulnerability-management/","title":"Overview","text":"<p>Verification is one of the business functions described by the OWASP SAMM. Vulnerability management helps maintain the application security level after bug fixes, changes or during maintenance.</p> <p>The SAMM Requirements-driven Testing practice describes the outcomes for effective vulnerability management, and why it is necessary to have these processes in place. For example using security unit tests to provide regression testing gives some degree of confidence that applications are not vulnerable to known exploits.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/06-verification/04-vulnerability-management/01-defectdojo/","title":"DefectDojo","text":"<p>OWASP DefectDojo is a DevSecOps tool for vulnerability management. It provides one platform to orchestrate end-to-end security testing, vulnerability tracking, deduplication, remediation, and reporting.</p> <p>DefectDojo is an OWASP Flagship project and is well established; the project was started in 2013 and has been in continuous development / release since then.</p>"},{"location":"en/06-verification/04-vulnerability-management/01-defectdojo/#what-is-defectdojo","title":"What is DefectDojo?","text":"<p>DefectDojo is an open source vulnerability management tool that streamlines the testing process by integration of templating, report generation, metrics, and baseline self-service tools.</p> <p>DefectDojo streamlines the testing process through several \u2018models\u2019 that an admin can manipulate with Python code. The core models include:</p> <ul> <li>engagements</li> <li>tests</li> <li>findings</li> </ul> <p>DefectDojo has supplemental models that facilitate :</p> <ul> <li>metrics</li> <li>authentication</li> <li>report generation</li> <li>tools</li> </ul> <p>A good introduction to DefectDojo is the We Hack Purple discussion between Matt Tesauro and Tanya Janca.</p>"},{"location":"en/06-verification/04-vulnerability-management/01-defectdojo/#why-use-it","title":"Why use it?","text":"<p>DefectDojo integrates with many open-source and proprietary/commercial tools from various domains:</p> <ul> <li>Dynamic Application Security Testing (DAST)</li> <li>Static Application Security Testing (SAST)</li> <li>Software Composition Analysis (SCA)</li> <li>Software Bills of Materials (SBOMs)</li> <li>Scanning of infrastructure and APIs</li> </ul> <p>It also integrates with the Threagile Threat Modeling tool, and with time more integrations with threat modeling tools will become available.</p>"},{"location":"en/06-verification/04-vulnerability-management/01-defectdojo/#how-to-use-it","title":"How to use it","text":"<p>Testing or installing DefectDojo is straight forward using the installation instructions; the recommended way to run DefectDojo is using a container.</p> <p>To set up an instance of DefectDojo follow the docker compose instructions along with the associated scripts that handle the dependencies, configure the database, create users and so on. Refer to the DefectDojo documentation for further information on alternative deployments, setting up, usage and integrations.</p>"},{"location":"en/06-verification/04-vulnerability-management/01-defectdojo/#references","title":"References","text":"<ul> <li>OWASP DefectDojo</li> <li>We Hack Purple discussion</li> <li>Threagile Threat Modeling</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/","title":"Overview","text":"<p>Training and Education activities are described by in the SAMM Training and Awareness section, which in turn is part of the SAMM Education &amp; Guidance security practice within the Governance business function.</p> <p>The goal of security training and education is to increase the awareness of application security threats and risks along with security best practices and secure software design principles. The security awareness training should be customized for all roles currently involved in the management, development, testing, or auditing of the applications and systems. In addition a Learning Management System or equivalent should be in place to track the employee training and certification processes.</p> <p>It is important to provide activities for development teams; we are all human and our security knowledge can become stale without a plan for refreshing it. The Security Culture project describes various activities that can help developers keep up to date and motivated.</p> <p>OWASP provides various resources and environments that can help with this security training and education ranging from vulnerable applications, training platforms and gamification.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/07-training-education/02-secure-coding-dojo/","title":"Secure Coding Dojo","text":"<p>The OWASP Secure Coding Dojo is a platform for delivering secure coding training to software development teams. Secure Coding Dojo is an OWASP Lab project and has been continuously supported and developed since 2017.</p>"},{"location":"en/07-training-education/02-secure-coding-dojo/#what-is-the-secure-coding-dojo","title":"What is the Secure Coding Dojo?","text":"<p>The aim of Secure Coding Dojo is to teach developers how to recognize security flaws during code reviews.</p> <p>The training platform has a set of training lessons and also blocks of code where the developer has to identify which block of code is written in an insecure way. A leader board is provided for the development teams to track their progress.</p> <p>Each lesson is built as an attack/defense pair. The developers can observe the software weaknesses by conducting the attack and after solving the challenge they learn about the associated software defenses. The predefined lessons are based on the MITRE most dangerous software errors (also known as SANS 25) so the focus is on software errors rather than attack techniques.</p> <p>The training platform can be customized to integrate with custom vulnerable websites and other CTF challenges.</p>"},{"location":"en/07-training-education/02-secure-coding-dojo/#why-use-it","title":"Why use it?","text":"<p>Development teams are often required to have Secure Coding training, and this may be an annual compliance requirement. The Secure Coding Dojo provides this compliant training in reviewing software for security bugs in representative source code.</p>"},{"location":"en/07-training-education/02-secure-coding-dojo/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of the developer training provided by the Secure Coding Dojo: 'Project 14 - OWASP Secure Coding Dojo'.</p> <p>There is a demonstration site for Secure Coding Dojo which provides access to the training modules, code blocks and a public leader board. Note that the demonstration site does not provide the deliberately insecure web sites, such as the 'Insecure.Inc' Java site, because this would encourage attack traffic across a public network.</p> <p>Ideally Secure Coding Dojo is deployed by the organization providing the training, rather than by using the demo site, because development teams can then log in securely to the Dojo. Deployment is straight forward, consisting of cloning the repository and running <code>docker-compose</code> with environment variables. This also allows deployment of the associated deliberately insecure web site to practice penetration testing.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/03-skf/","title":"SKF","text":"<p>The Security Knowledge Framework (SKF) is a training system that draws on various open source projects to support development teams and security architects in building secure applications.</p> <p>Having been an OWASP flagship project for many years the SKF is now no longer within the OWASP organization; it will continue to be referenced in the OWASP Wayfinder and other OWASP projects because it is certainly a flagship project for any organization.</p>"},{"location":"en/07-training-education/03-skf/#what-is-the-security-knowledge-framework","title":"What is the Security Knowledge Framework?","text":"<p>The SKF is a web application that provides training and education for development teams. As their website puts it: \"Training and guidance for doing AppSec right!\"</p> <p>For example the SKF uses the OWASP Application Security Verification Standard (ASVS) with code examples to help developers in pre-development and post-development phases and create applications that are secure by design.</p> <p>The SKF provides training and guidance in several ways:</p> <ul> <li>Requirements organizer</li> <li>Learning courses</li> <li>Practice labs</li> </ul> <p>Note that SKF is in a process of migrating to a new repository so the download link may change.</p>"},{"location":"en/07-training-education/03-skf/#why-use-the-skf","title":"Why use the SKF?","text":"<p>The SKF provides both learning courses and practice labs that are useful for development teams to practice secure coding skills.</p> <p>The following learning courses are available (as of December 2023):</p> <ul> <li>Developing Secure Software (LFD121)</li> <li>Understanding the OWASP Top 10 Security Threats (SKF100)</li> <li>Secure Software Development: Implementation (LFD105x)</li> </ul> <p>and there are plans for more training courses. All of these courses (LFD121, SKF100 and LFD105x) are provided by the Linux Foundation.</p> <p>In addition to the training courses there are a wide range of practice labs (64 as of December 2023).</p>"},{"location":"en/07-training-education/03-skf/#how-to-use-the-skf","title":"How to use the SKF","text":"<p>The easiest way to get started with the SKF training is to try the online demo. This will provide access to the practice labs, the training courses and also to the requirements tool.</p> <p>Follow the documentation on installing and using the SKF.</p> <p>The OWASP Spotlight series provides an overview of the SKF: 'Project 7 - Security Knowledge Framework (SKF)'.</p>"},{"location":"en/07-training-education/03-skf/#references","title":"References","text":"<ul> <li>Security Knowledge Framework (SKF)</li> <li>SKF courses and labs</li> <li>SKF requirements</li> <li>OWASP Application Security Verification Standard (ASVS)</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/04-samurai-wtf/","title":"SamuraiWTF","text":"<p>The OWASP SamuraiWTF (Web Training and Testing Framework) is a linux desktop distribution that is intended for application security training.</p> <p>The SamuraiWTF breaker/tool project is an OWASP Laboratory Project and the desktop can be downloaded as a pre-built virtual machine from the website.</p>"},{"location":"en/07-training-education/04-samurai-wtf/#what-is-samuraiwtf","title":"What is SamuraiWTF?","text":"<p>Samurai Web Training Framework is similar in spirit to the widely used Kali Linux distribution; it is a distribution of an Ubuntu desktop that integrates many open-source tools used for penetration testing.</p> <p>SamuraiWTF is different to Kali in that it is meant as a training environment for attacking web applications rather than as a more general and comprehensive pen-testers toolkit. It was originally a web testing framework tool, but has been migrated to a training tool for penetration testing. For this reason it integrates a different set of tools from Kali; it focuses only on the tools used during a web penetration test.</p> <p>Samurai-Dojo is a set of vulnerable web applications that can be used to exercise the SamuraiWTF testing framework. In addition there is the Katana which provides configuration to install specific tools and targets. This allows instructors to set up a classroom lab, for example, that can be distributed to their students.</p>"},{"location":"en/07-training-education/04-samurai-wtf/#why-use-it","title":"Why use it?","text":"<p>SamuraiWTF is easy to use and comes as a virtual machine, which makes it ideal in a teaching environment or as an attack tool targeted specifically against web applications. The teaching environment can be tailored for a particular set of lessons using the command line tool 'katana'.</p> <p>The applications provided by Samurai-Dojo provides a set of real world applications to attack; these applications are contained within the Samurai Web Training Framework virtual machine. This provides a teaching environment where none of the attack traffic will leak from the environment, and so avoids triggering network intrusion detection systems.</p>"},{"location":"en/07-training-education/04-samurai-wtf/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of training provided by SamuraiWTF: 'Project 26 - OWASP SamuraiWTF'.</p> <p>Getting started with SamuraiWTF is described in the github README :</p> <ul> <li>either download the virtual machine for Oracle VirtualBox</li> <li>or download the Hyper-V for Windows</li> <li>or build an Amazon Workspace</li> </ul> <p>Run the Samurai Web Training Framework and login as the super-user 'samurai'. From a command prompt run 'katana' to start configuring SamuraiWTF for your training purposes, for example 'katana list'.</p>"},{"location":"en/07-training-education/04-samurai-wtf/#references","title":"References","text":"<ul> <li>OWASP SamuraiWTF main site</li> <li>SamuraiWTF Dojo</li> <li>SamuraiWTF Katana</li> <li>SamuraiWTF downloads</li> <li>SamuraiWTF OWASP project</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/05-top-ten/","title":"OWASP Top 10","text":"<p>The OWASP Top 10 is a standard awareness document for developers and web application security. It represents a broad consensus about the most critical security risks to web applications.</p> <p>The OWASP Top Ten is a flagship documentation project and is one of the very first OWASP projects.</p>"},{"location":"en/07-training-education/05-top-ten/#what-is-the-owasp-top-10","title":"What is the OWASP Top 10?","text":"<p>The OWASP Top 10 Web Application Security Risks project is probably the most well known security concept within the security community, achieving wide spread acceptance and fame soon after its release in 2003. Often referred to as just the 'OWASP Top Ten', it is a list that identifies the most important threats to web applications and seeks to rank them in importance and severity.</p> <p>The OWASP Top 10 is periodically revised to keep it up to date with the latest threat landscape. The latest version was released in 2021 to mark twenty years of OWASP:</p> <ul> <li>A01:2021-Broken Access Control</li> <li>A02:2021-Cryptographic Failures</li> <li>A03:2021-Injection</li> <li>A04:2021-Insecure Design</li> <li>A05:2021-Security Misconfiguration</li> <li>A06:2021-Vulnerable and Outdated Components</li> <li>A07:2021-Identification and Authentication Failures</li> <li>A08:2021-Software and Data Integrity Failures</li> <li>A09:2021-Security Logging and Monitoring Failures</li> <li>A10:2021-Server-Side Request Forgery</li> </ul> <p>The project itself is actively maintained by a project team. The list is based on data collected from identified application vulnerabilities and from a variety of sources; security vendors and consultancies, bug bounties, along with company/organizational contributions. The data is normalized to allow for level comparison between 'Human assisted Tooling and Tooling assisted Humans'.</p>"},{"location":"en/07-training-education/05-top-ten/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Top 10 has various uses that are foundational to application security:</p> <ul> <li>as a training aid on the most common web application vulnerabilities</li> <li>as a starting point when testing web applications</li> <li>to raise awareness of vulnerabilities in applications in general</li> <li>as a set of demonstration topics</li> </ul> <p>There is not one way to use this documentation project; use it in any way that promotes application security. The OWASP Spotlight series provides an overview of the Top Ten: 'Project 10 - Top10'.</p>"},{"location":"en/07-training-education/05-top-ten/#owasp-top-10-versions","title":"OWASP Top 10 versions","text":"<p>The OWASP Top 10 Web Application Security Risks document was originally published in 2003, making it one of (or even the most) longest lived OWASP project, and since then has been in active and continuous development. Listed below are the versions up to the latest in 2021, which was released to mark 20 years of OWASP.</p> <ul> <li>Original 2003</li> <li>Update 2004</li> <li>Update 2007</li> <li>Release 2010</li> <li>Release 2013</li> <li>Release 2017</li> <li>Latest version 2021</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/06-mobile-top-ten/","title":"Mobile Top 10","text":"<p>The OWASP Mobile Top 10 is a list of the most prevalent vulnerabilities found in mobile applications. In addition to the list of risks it also includes a list of security controls used to counter these vulnerabilities.</p> <p>This documentation project is an OWASP Lab project, aimed at security builders and defenders.</p>"},{"location":"en/07-training-education/06-mobile-top-ten/#what-is-the-mobile-top-10","title":"What is the Mobile Top 10?","text":"<p>The Mobile Top 10 identifies and lists the top ten vulnerabilities found in mobile applications. These risks of application vulnerabilities have been determined by the project team from various sources including incident reports, vulnerability databases, and security assessments. The list has been built using a data-based approach from unbiased sources, an approach detailed in the repository read-me.</p> <ul> <li>M1: Improper Credential Usage</li> <li>M2: Inadequate Supply Chain Security</li> <li>M3: Insecure Authentication/Authorization</li> <li>M4: Insufficient Input/Output Validation</li> <li>M5: Insecure Communication</li> <li>M6: Inadequate Privacy Controls</li> <li>M7: Insufficient Binary Protections</li> <li>M8: Security Misconfiguration</li> <li>M9: Insecure Data Storage</li> <li>M10: Insufficient Cryptography</li> </ul> <p>The project also provides a comprehensive list of security controls and techniques that should be applied to mobile applications to provide a minimum level of security:</p> <ol> <li>Identify and protect sensitive data on the mobile device</li> <li>Handle password credentials securely on the device</li> <li>Ensure sensitive data is protected in transit</li> <li>Implement user authentication,authorization and session management correctly</li> <li>Keep the backend APIs (services) and the platform (server) secure</li> <li>Secure data integration with third party services and applications</li> <li>Pay specific attention to the collection and storage of consent for the collection and use of the user\u2019s data</li> <li>Implement controls to prevent unauthorized access to paid-for resources (wallet, SMS, phone calls etc)</li> <li>Ensure secure distribution/provisioning of mobile applications</li> <li>Carefully check any runtime interpretation of code for errors</li> </ol> <p>The list of mobile controls has been created and maintained by a collaboration of OWASP and the European Network and Information Security Agency (ENISA) to build a joint set of controls.</p>"},{"location":"en/07-training-education/06-mobile-top-ten/#why-use-it","title":"Why use it?","text":"<p>It is important to have awareness of the types of attack mobile applications are exposed to, and the types of vulnerabilities that may be present in any given mobile application.</p> <p>The Mobile Top 10 provides a starting point for this training and education, and it should be noted that the risks to mobile applications do not stop at the Top 10; this list is only the more important ones and in practice there are many more risks.</p> <p>In addition the Mobile Top 10 provides a list of controls that should be considered for mobile applications; ideally at the requirements stage of the development cycle (the sooner the better) but they can be applied at any time during development.</p>"},{"location":"en/07-training-education/06-mobile-top-ten/#mobile-top-10-versions","title":"Mobile Top 10 versions","text":"<p>The Mobile Top 10 was first released in 2014, updated in 2016 with the latest version released in 2024.</p> <p>The list of mobile application controls were originally published in 2011 by ENISA as the 'Smartphone Secure Development Guideline'. This was then revised during 2016, released in February 2017, to inform the latest set of mobile application controls.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/07-api-top-ten/","title":"API Top 10","text":"<p>The OWASP API Security Project (API Top 10) explains strategies and solutions to help the understanding and mitigation of the unique vulnerabilities and security risks of Application Programming Interfaces (APIs).</p> <p>The API Top 10 is an OWASP Laboratory Project which is accessed as a web based document.</p>"},{"location":"en/07-training-education/07-api-top-ten/#what-is-the-api-top-10","title":"What is the API Top 10?","text":"<p>The use of Application Programming Interfaces (APIs) comes with security risks. Given that APIs are widely used in various types of applications, the OWASP API Security Project created and maintains the Top 10 API Security Risks document as well as a documentation portal for best practices when creating or assessing APIs.</p> <ul> <li>API1:2023 - Broken Object Level Authorization</li> <li>API2:2023 - Broken Authentication</li> <li>API3:2023 - Broken Object Property Level Authorization</li> <li>API4:2023 - Unrestricted Resource Consumption</li> <li>API5:2023 - Broken Function Level Authorization</li> <li>API6:2023 - Unrestricted Access to Sensitive Business Flows</li> <li>API7:2023 - Server Side Request Forgery</li> <li>API8:2023 - Security Misconfiguration</li> <li>API9:2023 - Improper Inventory Management</li> <li>API10:2023 - Unsafe Consumption of APIs</li> </ul>"},{"location":"en/07-training-education/07-api-top-ten/#why-use-it","title":"Why use it?","text":"<p>Most software projects use APIs in some form or another. Developers and security engineers should be encouraged to refer to the API Security Top 10 to assist them when acting as security builders, breakers, and defenders for an organization.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/08-wrongsecrets/","title":"WrongSecrets","text":"<p>OWASP WrongSecrets is a production status project and provides challenges focused on secrets management using an intentionally vulnerable application and environment. The project offers standalone and Capture-the-flag modes, with a demo on Heroku.</p>"},{"location":"en/07-training-education/08-wrongsecrets/#what-is-wrongsecrets","title":"What is WrongSecrets?","text":"<p>WrongSecrets goals are to:</p> <ul> <li>Educate on secret management and its pitfalls</li> <li>Help people reflect on their secrets management strategy</li> <li>Promote secrets management as an important facet of security</li> </ul> <p>The project provides challenges around secrets management across several layers:</p> <ul> <li>A Spring Boot Java application</li> <li>Application configuration</li> <li>Docker</li> <li>Kubernetes</li> <li>Vault</li> <li>AWS, GCP, or Azure</li> <li>Binaries / Reverse engineering</li> </ul> <p>Scenarios vary in difficulty, and you can solve some of them just by using the browser on your mobile phone. For others, you would need knowledge of cloud security or reverse engineering tools and cryptography.</p>"},{"location":"en/07-training-education/08-wrongsecrets/#why-use-it","title":"Why use it?","text":"<p>If you, your team or your organization want to learn about secrets management and potential pitfalls, you can do so with WrongSecrets' challenges.</p> <p>Alternatively you can use WrongSecrets as a testbed/benchmark for testing secret detector tools; the tool should be able to detect the secrets wrongly managed in the WrongSecrets applications.</p>"},{"location":"en/07-training-education/08-wrongsecrets/#how-to-use-it","title":"How to use it","text":"<p>The demo is available on Heroku.</p> <p>You can set WrongSecrets up in standalone or in capture the flag (CTF) mode on Docker, Kubernetes, AWS, GCP or Azure. For the setting up a CTF project, WrongSecrets provides the set-up guides and an example Helm chart. Set-up guides for the standalone version are available in the project README.</p>"},{"location":"en/07-training-education/08-wrongsecrets/#references","title":"References","text":"<ul> <li>OWASP WrongSecrets</li> <li>Secure Cloud Architecture cheat sheet</li> <li>WrongSecrets demo</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/09-snakes-ladders/","title":"OWASP Snakes and Ladders","text":"<p>OWASP Snakes &amp; Ladders is an educational project based on the popular board game. It uses gamification to promote awareness of application security controls and risks, and in particular knowledge of other OWASP documents and tools.</p> <p>This documentation project is an OWASP Lab project, aimed at security builders and defenders.</p>"},{"location":"en/07-training-education/09-snakes-ladders/#what-is-it","title":"What is it?","text":"<p>Yes, it really is the snakes &amp; ladders game, but for web and mobile application security. It is played by two competing teams, possibly accompanied by beer and pretzels.</p> <p>In the board game for web applications, the virtuous behaviors (ladders) are secure coding practices (using the OWASP Proactive Controls) and the vices (snakes) are application security risks from the OWASP Top Ten 2017 version.</p> <p>The web application version can be downloaded for various languages:</p> <ul> <li>German (DE)</li> <li>English (EN)</li> <li>Spanish (ES)</li> <li>French (FR)</li> <li>Japanese (JA)</li> <li>Turkish (TR)</li> <li>Chinese (ZH)</li> </ul> <p>The board game for mobile applications uses the mobile controls detailed in the OWASP Mobile Top 10 as the virtuous behaviors. The vices are the Mobile Top 10 risks from the 2014 version of the project.</p> <p>The mobile application version is available as a download in English and Japanese</p>"},{"location":"en/07-training-education/09-snakes-ladders/#why-use-it","title":"Why use it?","text":"<p>This board game was created so that it could be used as an ice-breaker in application security training. It also has wider appeal as learning materials for developers or simply as a promotional hand-out.</p> <p>To cover all of that, the Snakes &amp; Ladders project team summarize it as:</p> <p>\"OWASP Snakes and Ladders is meant to be used by software programmers, big and small\"</p> <p>The game is quite lightweight; so it is meant to be just some fun with some learning attached, and is not intended to have the same rigor or depth as the card game Cornucopia.</p> <p>When the project was first created there was a print run of the game on heavy duty paper. These were available at conferences and meetings - they were also available to be purchased online but this last option no longer seems to be available.  </p>"},{"location":"en/07-training-education/09-snakes-ladders/#references","title":"References","text":"<ul> <li>OWASP Snakes &amp; Ladders</li> <li>OWASP Proactive Controls</li> <li>OWASP Top Ten 2017 version</li> <li>OWASP Mobile Top 10</li> <li>OWASP Cornucopia.</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/","title":"Overview","text":"<p>Vulnerable applications are useful for the Training and Education activities described in the SAMM Training and Awareness section, which in turn is part of the SAMM Education &amp; Guidance security practice within the Governance business function.</p> <p>The intentionally-vulnerable applications provide a safe environment where various vulnerable targets can be attacked. This provides practice in using various penetration tools available to a tester, without the risk of attack traffic triggering intrusion detection systems. The OWASP Vulnerable Web Applications Directory Project (VWAD) provides a comprehensive list of available intentionally-vulnerable web applications:</p> <ul> <li>Vulnerable mobile applications</li> <li>Offline vulnerable web applications</li> <li>Containerized vulnerable web applications</li> <li>vulnerable web applications available Online</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/01-juice-shop/","title":"Juice Shop","text":"<p>The OWASP flagship project Juice Shop is a deliberately insecure web application. Juice Shop encompasses vulnerabilities from the entire OWASP Top Ten along with many other security flaws found in real-world applications.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/01-juice-shop/#what-is-juice-shop","title":"What is Juice Shop?","text":"<p>Juice Shop is an Open Source web application that is free to download and use, and is intentionally insecure. It is easy to get started with Juice Shop; it includes Hacking Instructor scripts with an optional tutorial mode to guide newcomers through several challenges while explaining the underlying vulnerabilities.</p> <p>Juice Shop is easily installed using a Docker image and runs on Windows/Mac/Linux as well as all major cloud providers. There are various ways to run Juice Shop:</p> <ul> <li>From source</li> <li>Packaged Distributions</li> <li>Docker Container</li> <li>Vagrant</li> <li>Amazon EC2 Instance</li> <li>Azure Container Instance</li> <li>Google Compute Engine Instance</li> </ul> <p>Juice Shop is written in JavaScript using Node.js, Express and Angular.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/01-juice-shop/#why-use-it","title":"Why use it?","text":"<p>Juice Shop has several uses:</p> <ul> <li>As the basis for security training programs, with integration for other training systems via a WebHook</li> <li>As practice for pentesters and hackers, including many built in coding challenges</li> <li>To provide awareness demos, with customizable rebranding for specific corporations or customers</li> <li>Support for Capture the Flag (CTF) events using flag codes</li> <li>As a guinea pig for security tools</li> </ul> <p>For example pentesting proxies or security scanners can use Juice Shop as a 'guinea pig' application to check how well their tools cope with JavaScript-heavy application frontends and REST APIs.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/01-juice-shop/#how-to-use-it","title":"How to use it","text":"<p>There is no 'one way' to use Juice Shop, and so a good starting point is the overview of Juice Shop provided by the OWASP Spotlight series: 'Project 25 - OWASP Juice Shop'.</p> <p>Get started by downloading and installing the Docker image. The Docker daemon will have to be running to do this; get the Docker Engine from the download site.</p> <pre><code>docker pull bkimminich/juice-shop\ndocker run --rm -p 3000:3000 bkimminich/juice-shop\n</code></pre> <p>Using a browser access <code>http://localhost:3000/#/</code> and note that you are now interacting with a deliberately insecure 'online' shopping web application, so be suspicious of everything you see :)</p> <p>Once Juice Shop is running the next step is to follow the Official Companion Guide that can be downloaded from the Juice Shop shop. This guide provides overviews of each Juice Shop application vulnerability and includes hints on how to spot and exploit them. In the appendix there is a complete step-by-step solution to every challenge for when you are stuck or just curious.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/","title":"WebGoat","text":"<p>The OWASP WebGoat project is a deliberately insecure web application that can be used to attack common application vulnerabilities in a safe environment. It can also be used to exercise application security tools to practice scanning and identifying the various vulnerabilities built into WebGoat.</p> <p>WebGoat is a well established OWASP project and achieved Lab Project status many years ago.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/#what-is-webgoat","title":"What is WebGoat?","text":"<p>WebGoat is primarily a training aid to help development teams put into practice common attack patterns. It provides an environment where a Java-based web application can be safely attacked without traversing a network or upsetting a website owner.</p> <p>The environment is self contained using a container and this ensures attack traffic does not leak to other systems; this traffic should look like a malicious attack to a corporate intrusion detection system and will certainly light it up. The WebGoat container contains WebWolf, an attacker client, which further ensures that attack traffic stays within the container.</p> <p>In addition there is another WebGoat container available that includes a Linux desktop with some attack tools pre-installed.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/#why-use-webgoat","title":"Why use WebGoat?","text":"<p>WebGoat is one of those tools that has many uses; certainly during training but also when presenting demonstrations, testing out security tools and so on. Whenever you need a deliberately vulnerable web application running in a self contained and safe environment then WebGoat is one of the first to consider.</p> <p>Reasons to use WebGoat:</p> <ul> <li>Practical learning how to exploit web applications</li> <li>Ready made target during talks and demonstration on penetration testing</li> <li>Evaluating dynamic application security testing (DAST) tools; they should identify the known vulnerabilities</li> <li>Practicing penetration testing skills</li> <li>and there will be more</li> </ul>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/#how-to-use-webgoat","title":"How to use WebGoat","text":"<p>The easiest way to run WebGoat is to use the provided Docker images to run containers. WebGoat can also be run as a standalone Java application using the downloaded Java Archive file or from the source itself; this requires various dependencies, whereas all dependencies are provided within the Docker images.</p> <p>Access to WebGoat is via the port 8080 on the running Docker container and this will need to be mapped to a port on the local machine. Note that mapping to port 80 can be blocked on corporate laptops so it is suggested to map the port to localhost 8080.</p> <ol> <li>The Docker daemon will have to be running to do this, get the Docker Engine from the download site.</li> <li>Download the WebGoat docker image using command <code>docker pull webgoat/webgoat</code></li> <li>Run the container with <code>docker run --name webgoat -it -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 webgoat/webgoat</code></li> <li>Use a browser to navigate to <code>localhost:8080/WebGoat</code> - note that there is no page served on <code>localhost:8080/</code></li> <li>You are then prompted to login, so first thing to do is create a test account from this login page</li> <li>The accounts are retained when the container is stopped, but removed if the container is deleted</li> <li>Creating insecure username/password combinations, such as 'kalikali' with 'Kali1234', is allowed</li> </ol> <p>The browser should now be displaying the WebGoat lessons, such as 'Hijack a session' under 'Broken Access Control'.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/#how-to-use-webwolf","title":"How to use WebWolf","text":"<p>WebWolf is provided alongside both the WebGoat docker images and the WebGoat JAR file. WebWolf is accessed using port 9090 on the Docker container, and this can usually be mapped to localhost port 9090 as in the example given above.</p> <p>Use a browser to navigate to <code>http://localhost:9090/WebWolf</code>, there is no page served on URL <code>localhost:9090</code>. Login to WebWolf using one of the accounts created when accessing the WebGoat account management pages, such as username 'kalikali' and password 'Kali1234'. All going well you will now have the WebWolf home page displayed.</p> <p>WebWolf provides:</p> <ul> <li>File upload area</li> <li>Email test mailbox</li> <li>JWT tools</li> <li>Display of http requests</li> </ul>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/#where-to-go-from-here","title":"Where to go from here?","text":"<p>Try out the WebGoat desktop environment by running <code>docker run -p 127.0.0.1:3000:3000 webgoat/webgoat-desktop</code> and navigating to <code>http://localhost:3000/</code>.</p> <ul> <li>Try the WebGoat lessons, they will certainly inform and educate</li> <li>Exercise available attack tools against WebGoat</li> <li>Use WebGoat in demonstrations of your favorite attack chains</li> <li>Use WebGoat material in presentations on vulnerabilities</li> </ul> <p>There are various ways of configuring WebGoat, see the github repo for more details.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/02-webgoat/#references","title":"References","text":"<ul> <li>OWASP WebGoat and WebWolf</li> <li>Docker</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/03-pygoat/","title":"PyGoat","text":"<p>The OWASP PyGoat project is an intentionally insecure web application, and is written in python using the Django framework. PyGoat is used to practice attacking a python-based web application in an isolated and secure environment</p> <p>PyGoat is a relatively new OWASP project, its first commit was in May 2020, and although it is presently an Incubator project it should soon gain Lab project status.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/03-pygoat/#what-is-pygoat","title":"What is PyGoat?","text":"<p>The purpose of PyGoat is to give both developers and testers an isolated platform for learning how to test applications and how to code securely. It provides examples of traditional web application exploits that follow the OWASP Top Ten vulnerabilities, as well as providing a vulnerable web application for further exploitation / testing.</p> <p>PyGoat also provides a view of the python source code to determine where the mistake was made that caused the vulnerability. This allows you to make changes to the web application and test whether these changes have secured it.</p> <p>PyGoat can be installed from source repository via scripts or pip, from a Docker hub image, or using a Docker image built locally.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/03-pygoat/#why-use-it","title":"Why use it?","text":"<p>PyGoat is an easy to use demonstration and learning platform that provides a secure way to try and attack web applications. It is less fully featured than either Juice Shop or WebGoat, and this makes it a simple and direct learning experience. PyGoat provides example labs for the complete OWASP Top Ten (both 2021 and 2017 versions) along with explanatory notes.</p> <p>PyGoat also provides a python / Django web application which complements Juice Shop's Node.js and WebGoat's Java applications; it is important to learn how to attack all of these frameworks.</p> <p>So if you are looking for a direct and easy way to start attacking a vulnerable web application then PyGoat is one of the first to consider.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/03-pygoat/#how-to-use-it","title":"How to use it","text":"<p>The easiest way to run PyGoat is by downloading the Docker image and running it as a Docker container. The Docker daemon will have to be running to do this, so get the Docker Engine from the download site.</p> <p>Follow the instructions from the Docker hub project page:</p> <pre><code>docker pull pygoat/pygoat\ndocker run --rm -p 8000:8000 pygoat/pygoat\n</code></pre> <p>The internal container port 8000 is mapped to external port 8000, so browse to <code>http://127.0.0.1:8000/login/</code>.</p> <p>A user account needs to be set up before the labs can be accessed. This account is local to the container; it will be deleted if the Docker container is stopped or deleted. It can be any test account such as username 'user' and password 'Kali1234'. To set up a user account access the login page and click on the 'Here' text within 'Click Here to register' (it is not entirely obvious at first) and then enter the new username and password.</p> <p>Once a user account has been set up then login to access the labs. A handy feature of PyGoat is the inclusion of the 2021 version of the OWASP Top Ten as well as the 2017 version, these are provided side by side and aid cross referencing to the latest OWASP Top Ten.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/04-security-shepherd/","title":"Security Shepherd","text":"<p>OWASP Security Shepherd is a web and mobile application security training platform that helps to foster and improve security awareness for development teams.</p> <p>The Security Shepherd tool project is an OWASP Flagship Project and can be downloaded from the project's github repository.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/04-security-shepherd/#what-is-security-shepherd","title":"What is Security Shepherd?","text":"<p>Security Shepherd is a teaching tool that provides lessons and an environment to learn how to attack both web and mobile applications. This enables users to learn or to improve upon existing their manual penetration testing skills.</p> <p>Security Shepherd is run on a web server such as Apache Tomcat and this can be installed manually. There is also a pre-built virtual machine available or a docker image can be composed to run as a container.</p>"},{"location":"en/07-training-education/01-vulnerable-apps/04-security-shepherd/#why-use-it","title":"Why use it?","text":"<p>Security Shepherd can train inexperienced pen-testers to security expert level by sharpening their testing skill-set. Pen-testing is often included as a required stage in a organization's secure software development lifecycle (SDLC).</p>"},{"location":"en/07-training-education/01-vulnerable-apps/04-security-shepherd/#how-to-use-it","title":"How to use it","text":"<p>Security Shepherd can be run as a Docker container, as a Virtual Machine or manually on top of a web server.</p> <p>The Security Shepherd wiki has step by step installation instructions:</p> <ul> <li>either compose the Docker image and run the container</li> <li>or download the virtual machine and run on a hypervisor such as Virtual Box</li> <li>or install on a Tomcat web server</li> <li>or install on windows using a Tomcat web server</li> </ul> <p>Once installed and logged in, the lessons and vulnerable applications are available to use. Security Shepherd has modes which it can be used for different training goals:</p> <ul> <li>CTF (Capture the Flag) Mode</li> <li>Open Floor Mode</li> <li>Tournament Mode</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/","title":"Overview","text":"<p>Developer guide logo</p> <p>Culture building and Process maturing is described by the SAMM Organization and Culture activity, which in turn is part of the SAMM Education &amp; Guidance security practice within the Governance business function.</p> <p>The maturity of security processes and culture is wide ranging, with indicators of a mature process and culture including:</p> <ul> <li>Security champions have been identified for each development team</li> <li>A program is in place to support the security champions</li> <li>Secure coding practices are in place to define standards and improve software development</li> <li>Developers and application security professionals across the organization are able to communicate and share best practice</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/08-culture-process/01-security-culture/","title":"Security Culture","text":"<p>Most organizations have an application development lifecycle in place with security activities built into it, this goes a long way to reducing the security issues present in applications and systems. The OWASP Security Culture project is a guide that considers security at each stage of the application security development lifecycle, with the aim of creating and nurturing secure development practices throughout the lifecycle.</p> <p>The Security Culture guide is an OWASP incubator project and the latest stable version is available as a web document.</p>"},{"location":"en/08-culture-process/01-security-culture/#what-is-the-owasp-security-culture-project","title":"What is the OWASP Security Culture project","text":"<p>The OWASP Security Culture project is a collection of explanations and practical advice arranged under various topic headings.</p> <ul> <li>Why add security in development teams</li> <li>Setting maturity goals</li> <li>Security team collaboration</li> <li>Security champions</li> <li>Activities</li> <li>Threat modeling</li> <li>Security testing</li> <li>Security related metrics</li> </ul> <p>The OWASP Security Culture project is focused on establishing/persisting a positive security posture within the application development lifecycle and references other OWASP projects in a similar way to the OWASP Developer Guide.</p>"},{"location":"en/08-culture-process/01-security-culture/#encouraging-a-security-culture","title":"Encouraging a Security Culture","text":"<p>The philosophy of a security culture is as important as the technical aspects; the application development teams need to be onboard to adopt a good security posture. The Security Culture project recognizes this and devotes a section to the importance of building security into the development lifecycle.</p> <p>As well as onboard development teams there has to be buy-in from the higher management: without this any security champion program is certain to fail and the security culture of the organization will suffer. The Security Culture project provides information on goals, metrics and maturity models that are a necessary prerequisite for management approval of security activities. In addition the Security Culture project highlights the importance of security teams, management and development teams all working together - all are necessary for a good security culture.</p> <p>Security Champions are an important way of encouraging security within an organization - an organization can have a healthy security culture without security champions but it is a lot easier with a security champion program in place. Selecting and nurturing security champions has to be tailored to the individual organization, no security champion program will be the same as another one and close reference should be made to the Security Champions Guide.</p> <p>Threat modeling is an activity that in itself is important within an organization, and it also has the benefit of helping communication between the security teams and development teams. Security testing (such as SAST, DAST and IAST) is another area where close collaboration is required within the organization: management, security, development and pipeline teams will all be involved. This has the added benefit, as with threat modeling, of promoting a good security culture / awareness within the organization - and can be a good indicator of where the security culture is succeeding.</p> <p>Metrics are important for a healthy security culture to persist and grow with an organization. Without metrics to show the benefits of the security culture then interest and buy-in from the various teams involved will wane, leading to a decline in the culture and leading in turn to a poor security posture. Metrics will provide the justification for investment and nurturing of a good security culture.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/03-samm/","title":"SAMM","text":"<p>The Software Assurance Maturity Model (SAMM) project provides an effective and measurable way for an organization to analyze and improve their secure development lifecycle processes. SAMM is one of the OWASP's flagship projects, and can be downloaded from the SAMM project site.</p>"},{"location":"en/08-culture-process/03-samm/#what-is-samm","title":"What is SAMM?","text":"<p>SAMM can be regarded as the prime maturity model for software assurance. SAMM provides an effective and measurable way for all types of organizations to analyze and improve their software security posture. SAMM supports the entire secure software development lifecycle and is technology and process agnostic.</p> <p>The SAMM model is hierarchical. At the highest level SAMM defines five business functions; activities that software development must fulfill to some degree:</p> <ul> <li>Governance</li> <li>Design</li> <li>Implementation</li> <li>Verification</li> <li>Operations</li> </ul> <p>Each business function in turn has three security practices, which are areas of security-related activities that build assurance for the related business function.</p> <p>Security practices have activities, grouped in logical flows and divided into two streams (A and B). Streams cover different aspects of a practice and have their own objectives, aligning and linking the activities in the practice over the different maturity levels.</p> <p>For each security practice, SAMM defines three maturity levels which generalize to foundational, mature and advanced. Each level has a successively more sophisticated objective with specific activities, and more strict success metrics.</p>"},{"location":"en/08-culture-process/03-samm/#why-use-it","title":"Why use it?","text":"<p>The structure and setup of the SAMM model support:</p> <ul> <li>assessment of the organization\u2019s current software security posture</li> <li>definition of the organization\u2019s targets</li> <li>definition of an implementation roadmap to get there</li> <li>prescriptive advice on how to implement particular activities</li> </ul> <p>These provide suggestions for improving processes and building security practices into the culture of the organization.</p>"},{"location":"en/08-culture-process/03-samm/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of using the SAMM to guide development: 'Project 9 - Software Assurance Maturity Model (SAMM)'.</p> <p>The SAMM Fundamentals Course provides training on the high level SAMM Business Functions and provides guidance on each Security Practice. The SAMM assessment tools measure the quality of an organization's software assurance maturity process, which can be used as feedback into the culture of the organization.</p>"},{"location":"en/08-culture-process/03-samm/#references","title":"References","text":"<ul> <li>OWASP Software Assurance Maturity Model (SAMM)</li> <li>SAMMY management tool</li> <li>OWASP SAMM project</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/04-asvs/","title":"ASVS","text":"<p>The Application Security Verification Standard (ASVS) is a long established OWASP flagship project, and is widely used to build a culture of security as well as verification of web applications.</p> <p>It can be downloaded from the OWASP project page in various languages and formats: PDF, Word, CSV, XML and JSON. Having said that, the recommended way to consume the ASVS is to access the github markdown pages directly - this will ensure that the latest version is used.</p>"},{"location":"en/08-culture-process/04-asvs/#what-is-asvs","title":"What is ASVS?","text":"<p>The ASVS is an open standard that sets out the coverage and level of rigor expected when it comes to performing web application security verification. The standard also provides a basis for testing any technical security controls that are relied on to protect against vulnerabilities in the application.</p> <p>The ASVS is split into various sections:</p> <ul> <li>V1 Architecture, Design and Threat Modeling</li> <li>V2 Authentication</li> <li>V3 Session Management</li> <li>V4 Access Control</li> <li>V5 Validation, Sanitization and Encoding</li> <li>V6 Stored Cryptography</li> <li>V7 Error Handling and Logging</li> <li>V8 Data Protection</li> <li>V9 Communication</li> <li>V10 Malicious Code</li> <li>V11 Business Logic</li> <li>V12 Files and Resources</li> <li>V13 API and Web Service</li> <li>V14 Configuration</li> </ul> <p>The ASVS defines three levels of security verification:</p> <ol> <li>applications that only need low assurance levels; these applications are completely penetration testable</li> <li>applications which contain sensitive data that require protection; the recommended level for most applications</li> <li>the most critical applications that require the highest level of trust</li> </ol> <p>Most applications will aim for Level 2, with only those applications that perform high value transactions, or contain sensitive medical data, aiming for the highest level of trust at level 3.</p>"},{"location":"en/08-culture-process/04-asvs/#why-use-it","title":"Why use it?","text":"<p>The ASVS is well established, the earlier versions were written in 2008, and it has been continually supported since then. The ASVS is used to generate security requirements, guide the verification process and also to identify gaps in the application security.</p> <p>The ASVS can also be used as a metric on how mature application security processes are; it is a yardstick with which to assess the degree of trust that can be placed in the web application. This helps provide a good security culture: the application developers and application owners can see how they are doing and be confident in the maturity of their processes in comparison with other teams and organizations.</p>"},{"location":"en/08-culture-process/04-asvs/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of the ASVS and its uses: 'Project 19 - OWASP Application Security Verification standard (ASVS)'.</p> <p>The appropriate ASVS level should be chosen from:</p> <ul> <li>Level 1: First steps, automated, or whole of portfolio view</li> <li>Level 2: Most applications</li> <li>Level 3: High value, high assurance, or high safety</li> </ul> <p>This is not a judgmental ranking, for example if an application needs only Level 1 protection then that is a valid choice. Tools such as SecurityRAT can then help create a subset of the ASVS security requirements for consideration.</p> <p>Application developer teams and application owners can then gain familiarity with the appropriate security requirements and incorporate them into the process and culture of the organization. To help navigate the ASVS, the OWASP Cheat Sheets have been indexed specifically for each section of the ASVS which can be used to explain and expand on each requirements category.</p>"},{"location":"en/08-culture-process/04-asvs/#references","title":"References","text":"<ul> <li>OWASP Application Security Verification Standard (ASVS)</li> <li>OWASP Cheat Sheets for ASVS</li> <li>OWASP SecurityRAT</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/05-mas/","title":"MAS","text":"<p>The MAS Verification Standard (MASVS) explains the processes, techniques and tools used for security testing a mobile application.</p> <p>The OWASP MAS Crackmes, also known as UnCrackable Apps, is a collection of reverse engineering challenges for the OWASP Mobile Application Security (MAS).</p>"},{"location":"en/08-culture-process/05-mas/#what-is-mas-crackmes","title":"What is MAS Crackmes?","text":"<p>OWASP MAS Crackmes is a set of reverse engineering challenges for mobile applications. These challenges are used as examples throughout the OWASP Mobile Application Security Testing Guide (MASTG) and, of course, you can also solve them for fun.</p> <p>There are challenges for Android and also a couple for Apple iOS.</p>"},{"location":"en/08-culture-process/05-mas/#why-use-mas-crackmes","title":"Why use MAS Crackmes?","text":"<p>Working through the challenges will improve understanding of mobile application security and will also give an insight into the examples provided in the MASTG.</p>"},{"location":"en/08-culture-process/05-mas/#how-to-try-the-challenges","title":"How to try the challenges","text":"<ol> <li>Select and download a challenge into your mobile application environment</li> <li>Satisfy the individual challenge exercise</li> <li>Have fun</li> </ol> <p>Each challenge has various solutions provided by the community; these can be used to compare with your solution.</p>"},{"location":"en/08-culture-process/05-mas/#references","title":"References","text":"<ul> <li>OWASP Mobile Application Security (MAS)</li> <li>MAS project</li> <li>MAS Crackmes UnCrackable Apps</li> <li>MAS Testing Guide (MASTG)</li> <li>MAS Verification Standard (MASVS)</li> <li>OWASP Mobile Application Security cheat sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/02-security-champions/","title":"Overview","text":"<p>A 'Security Champion' is a member of a software development team who is the liaison between Information Security and developers. This helps to embed security into the development organization.</p> <p>Security Champions and the necessary supporting program are described in the SAMM Organization and Culture section, which in turn is part of the SAMM Education &amp; Guidance security practice within the Governance business function.</p> <p>Depending on the development team the Security Champion may be a software developer, tester, product manager or any role within the team; what matters most is an enthusiasm for software security and a willingness to learn. Security Champions can assist with researching, verifying, and prioritizing security and compliance related software defects within the application/product.</p> <p>Security Champions will usually be involved in risk/threat assessments and architectural reviews and can often help identify opportunities to remediate security defects; making the architecture of the application more resilient and reducing the attack threat surface. Security Champions also participate in periodic briefings to increase awareness and expertise in different security disciplines.</p> <p>The two goals of the Security Champion program are to increase effectiveness of application security and compliance and to strengthen the relationship between development teams and Information Security teams. The program should supply Security Champions with additional training to help develop their role as a software security subject matter expert. If possible the Security Champion should be provided with time for Information Security related activities, and this may well have to be negotiated with the development management hierarchy.</p> <p>Importantly it should be recognized that Security Champions are often taking on an extra role in addition to their existing one, and it is important that support is provided by the program for their well-being.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/08-culture-process/02-security-champions/01-security-champions-program/","title":"Security champions program","text":"<p>A Security Champion program is a commonly used way of helping development teams successfully run a development lifecycle that is secure, and this is achieved by selecting members of teams to become Security Champions. The role of Security Champion is described by the OWASP Software Assurance Maturity Model (SAMM) Organization and Culture activities within the Governance business function of the Education &amp; Guidance practice.</p>"},{"location":"en/08-culture-process/02-security-champions/01-security-champions-program/#overview","title":"Overview","text":"<p>It can be hard to introduce a security mindset across development teams using the application security team alone; security engineers do not scale well across teams of developers - there is simply not enough of them. A good way to scale security and distribute security across development teams is by creating a security champion role and providing a Security Champions program to encourage a community spirit within the organization. This will help foster a positive security culture within the organization, see the Security Culture project on how this can be done with security champions.</p> <p>Security champions are usually individuals within each development team that show special interest in application security. The security champion provides a knowledgeable point of contact between the application security team and development, and in addition they can ensure that the development lifecycle has security built in. Often the security champion carries on with their original role within the development team, in addition to their new role, and so a Security Champions program is important for providing support and training and avoiding burn-out.</p>"},{"location":"en/08-culture-process/02-security-champions/01-security-champions-program/#security-champion-role","title":"Security champion role","text":"<p>Security champions are active members of a development team that act as the \"voice\" of security within their team. Security champions also provide visibility of their team's security activities to the application security team, and are seen as the first point of contact between developers and a central security team.</p> <p>There is no universally defined role for a security champion, but the Security Culture project provides various suggestions:</p> <ul> <li>Evangelize security: promoting security best practice in their team,     imparting security knowledge and helping to uplift security awareness in their team</li> <li>Contribute to security standards: provide input into organizational security standards and procedures</li> <li>Help run activities: promote activities such as Capture the Flag events or secure coding training</li> <li>Oversee threat modeling: threat modeling consists of a security review on a product in the design phase</li> <li>Oversee secure code reviews: raise issues of risk in the code base that arise from peer group code reviews</li> <li>Use security testing tools: provide support to their team for the use of security testing tools</li> </ul> <p>The security champion role requires a passion and interest in application security, and so arbitrarily assigning this role is unlikely to work in practice. A better strategy is to provide a security champions program, so that developers who are interested can come forward; in effect they should self-select.</p>"},{"location":"en/08-culture-process/02-security-champions/01-security-champions-program/#security-champions-program","title":"Security champions program","text":"<p>It can be tough being a security champion: usually they are still expected to do their 'day job' but in addition they are expected to be knowledgeable on security matters and to take extra training. Relying on good will and cheerful interest will only go so far, and a Security Champions program should be put in place to identify, nurture, support and train the security champions.</p> <p>The OWASP Security Champions Guide identifies ten key principles for a successful Security Champions program:</p> <ul> <li>Be passionate about security - identify the members of the teams that show interest in security</li> <li>Start with a clear vision for your program - be practical but ambitious, after if it works then it will work well</li> <li>Secure management support - as always, going it alone without management support is never going to work</li> <li>Nominate a dedicated captain - the program will take organization and maintaining, so find someone willing to do that</li> <li>Trust your champions - they are usually highly motivated when it comes to the security of their own applications</li> <li>Create a community - it can be lonely, so provide a support network</li> <li>Promote knowledge sharing - if the community is in place, then encourage discussions and meet-ups</li> <li>Reward responsibility - they are putting extra work, so appreciate them</li> <li>Invest in your champions - the knowledge gained through extra training will pay for itself many times over</li> <li>Anticipate personnel changes - the security champion may move on, be alert to this and plan for it</li> </ul> <p>A successful security champions program will increase the security of the applications / systems, allay developer's fears, increase the effectiveness of the application security team and improve the security posture of the organization as a whole.</p>"},{"location":"en/08-culture-process/02-security-champions/01-security-champions-program/#references","title":"References","text":"<ul> <li>OWASP Security Champions Guide</li> <li>Security Champions Playbook</li> <li>OWASP Security Culture project</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/02-security-champions/02-security-champions-guide/","title":"Security Champions Guide","text":"<p>The OWASP Security Champions Guide is a guidebook that helps organizations build a security champions program that can succeed over the long term.</p> <p>It is a relatively new OWASP Incubator project and is available as a web document.</p>"},{"location":"en/08-culture-process/02-security-champions/02-security-champions-guide/#overview","title":"Overview","text":"<p>Security Champions are an important part of an organization's security posture; they provide development teams with subject matter experts in application security and can be the first point of contact for information security teams. It is widely recognized that a program needs to be in place to actively support the security champions, otherwise there is a risk of disillusionment or even burn-out; to counter this risk a Security Champions Program will help identify and nurture security champions.</p> <p>The Security Champions Guide provides two resources that explain what a security champion program is and how it can be put into practice:</p> <ul> <li>The Security Champions Manifesto sets out a philosophy for a good security champions program</li> <li>The Security Champions Guide explains each point in the manifesto and illustrates it with practical advice</li> </ul> <p>The Security Champions Guide is not proscriptive, an individual organization should select freely from the suggestions to create its own program - and perhaps revisit the guide as its security champions program matures over time.</p>"},{"location":"en/08-culture-process/02-security-champions/02-security-champions-guide/#the-security-champions-manifesto","title":"The Security Champions Manifesto","text":"<p>The manifesto defines ten key principles for a successful security champions program:</p> <ul> <li>Be passionate about security</li> <li>Start with a clear vision for your program</li> <li>Secure management support</li> <li>Nominate a dedicated captain</li> <li>Trust your champions</li> <li>Create a community</li> <li>Promote knowledge sharing</li> <li>Reward responsibility</li> <li>Invest in your champions</li> <li>Anticipate personnel changes</li> </ul> <p>This manifesto is a set of guiding principles that will certainly help with the creating the program and can also improve an existing security champions program.</p>"},{"location":"en/08-culture-process/02-security-champions/02-security-champions-guide/#the-security-champions-guide","title":"The Security Champions Guide","text":"<p>If the security champions program is in the process of being put in place then consider each principle/section of the guide in turn and decide if it can be part of the program. Each principle is generally applicable - as every program will be different in practice - so pick and choose the elements the organization can adopt or leverage to create a customized program.</p> <p>Each principle is split into topics: the What, Why and How. Some sections also contain checklists or templates that can be used to create or improve the program. For example the section on investing in security champions explains what this entails: 'Invest in the personal growth and development of your Security Champions'. It then goes on to describe why this is important (ensuring the health of the Security Champions community) and then gives suggestions on what this means in practice: webinars, conferences, recognition etc. The other sections are similarly helpful and provide a range of practical advice.</p> <p>The guide is also useful for an existing security champions program, providing advice on what can be further achieved. It is worth noting that some security champions programs are initially successful but can then fail over time for various reasons, perhaps through change of personnel or budgetary pressure. The suggestions in the Security Champions Guide can be used as a justification for investing in the program further and will help to sustain the existing program.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/08-culture-process/02-security-champions/03-security-champions-playbook/","title":"Security Champions Playbook","text":"<p>The Security Champions Playbook is a project that describes the process of establishing a Security Champions program within an organization.</p>"},{"location":"en/08-culture-process/02-security-champions/03-security-champions-playbook/#what-are-security-champions","title":"What are Security Champions?","text":"<p>Security Champions are active members of a team that act as a core element of the security assurance process within a product or service. They are often are the initial point of contact within the team when it comes to security concerns and incidents.</p> <p>Some advantages of encouraging Security Champions within a team are :</p> <ul> <li>Scaling security through multiple teams</li> <li>Engaging non-security engineers in security</li> <li>Establishing the security culture throughout an organization</li> </ul> <p>The Security Champion should be given extra training to carry out this role, which is often in addition to their existing responsibilities.</p>"},{"location":"en/08-culture-process/02-security-champions/03-security-champions-playbook/#how-to-use-the-playbook","title":"How to use the playbook","text":"<p>Security Champions Playbook lists six steps which include general recommendations:</p> <ol> <li>Identify teams</li> <li>Define the role</li> <li>Nominate Champions</li> <li>Set up communication channels</li> <li>Build solid knowledge base</li> <li>Maintain interest</li> </ol> <p>Use these recommendations to build up a Security Champions program that is tailored to the needs of the organization.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/09-operations/","title":"Overview","text":"<p>Operations are those activities necessary to ensure that confidentiality, integrity, and availability are maintained throughout the operational lifetime of an application and its associated data. The aim of Operations is to provide greater assurance that the organization is resilient in the face of operational disruptions, and responsive to changes in the operational landscape. This is described by the Operations business function in the OWASP SAMM model.</p> <p>Operations generally cover the security practices:</p> <ul> <li>Incident Management of security breaches and incidents</li> <li>Environment Management such as configuration hardening, patching and updating</li> <li>Operational Management which includes data protection and system / legacy management</li> </ul> <p>OWASP projects provide the CRS that is used for both Coraza and ModSecurity web application firewalls, which are widely used for data and system management.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/09-operations/01-devsecops/","title":"DevSecOps Guideline","text":"<p>The OWASP DevSecOps Guideline project explains how to best implement a secure pipeline, using best practices and introducing automation tools to help 'shift-left' security issues.</p> <p>The DevSecOps Guideline is in active development as an OWASP Production documentation project and can be accessed from the web document or downloaded as a PDF.</p>"},{"location":"en/09-operations/01-devsecops/#what-is-the-devsecops-guideline","title":"What is the DevSecOps Guideline?","text":"<p>The DevOps (combining software Development and release Operations) pipelines use automation to integrate various established activities within the development and release processes into pipeline steps. This enables the use of Continuous integration / Continuous Delivery/Deployment (CI/CD) within an organization. DevSecOps (combining security with DevOps) seeks to add steps into the existing CI/CD pipelines to build security into the development and release process.</p> <p>The DevSecOps Guideline is a collection of advice and theory that explains how to embed security into DevOps. It covers various foundational topics such as Threat Modeling pipelines, Secrets Management and Linting Code. It then explains and illustrates various vulnerability scanning steps commonly used in CI/CD pipelines :</p> <ul> <li>Static Application Security Testing (SAST)</li> <li>Dynamic Application Security Testing (DAST)</li> <li>Interactive Application Security Testing (IAST)</li> <li>Software Composition Analysis (SCA)</li> <li>Infrastructure Vulnerability Scanning</li> <li>Container Vulnerability Scanning</li> </ul> <p>The DevSecOps Guideline is a concise guide that provides the foundational knowledge to implement DevSecOps.</p>"},{"location":"en/09-operations/01-devsecops/#how-to-use-the-devsecops-guideline","title":"How to use the DevSecOps Guideline","text":"<p>The DevSecOps Guideline is document can be accessed from the web document or downloaded as a PDF. It is concise enough that all the sections can be read within a short time, and it provides enough knowledge to understand the concept behind DevSecOps and what activities are involved.</p> <p>It provides an excellent overview of DevSecOps which shows how the steps of a typical CI/CD pipeline fit together and what sort of tools can be applied in each step to secure the pipeline. Many of the pages in the DevSecOps Guideline contain lists of tools that can be applied to the pipeline step.</p> <p>The DevSecOps Guideline document is in the process of being expanded and updated which will build on the existing 2023 version.</p>"},{"location":"en/09-operations/01-devsecops/#references","title":"References","text":"<ul> <li>OWASP DevSecOps Guideline project</li> <li>OWASP CI/CD Security Cheat Sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/09-operations/02-coraza/","title":"Coraza WAF","text":"<p>The OWASP Coraza project provides a golang enterprise-grade Web Application Firewall framework that supports the ModSecurity seclang language and is completely compatible with OWASP CRS. Coraza is in active development as an OWASP Production code project, with the first stable version released in September 2021 and several releases since then.</p>"},{"location":"en/09-operations/02-coraza/#what-is-coraza","title":"What is Coraza?","text":"<p>The Coraza Web Application Firewall framework is used to enforce policies, providing a first line of defense to stop attack on web applications and servers. Coraza  can be configured using the OWASP CRS and also custom policies can be created.</p> <p>Coraza can be deployed:</p> <ul> <li>as a library in an existing web server</li> <li>within an application server acting as a WAF</li> <li>as a reverse proxy</li> <li>using a docker container</li> </ul>"},{"location":"en/09-operations/02-coraza/#why-use-coraza","title":"Why use Coraza?","text":"<p>Web Application Firewalls are usually the first line of defense against HTTP attacks on web applications and servers. The Coraza WAF is widely used for providing this security, especially for cloud applications, along with the original OWASP ModSecurity WAF.</p>"},{"location":"en/09-operations/02-coraza/#how-to-use-coraza","title":"How to use Coraza","text":"<p>The best way to start is to create a Coraza WAF instance and then add rules to this WAF, following the Coraza Quick Start tutorial.</p> <p>There are multiple ways of running Coraza, and the one chosen will depend on an individual organization's deployment:</p> <ul> <li>Coraza SPOA connector runs the Coraza WAF as a backing service for HAProxy</li> <li>Coraza Caddy Module provides Web Application Firewall capabilities for Caddy</li> <li>the Coraza Proxy WASM filter can be loaded directly from Envoy or used as an Istio plugin</li> <li>Coraza as a C library, used for applications written in C rather than golang</li> </ul>"},{"location":"en/09-operations/02-coraza/#references","title":"References","text":"<ul> <li>OWASP Coraza</li> <li>OWASP CRS</li> <li>OWASP ModSecurity</li> <li>Secure Cloud Architecture cheat sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/09-operations/03-modsecurity/","title":"ModSecurity WAF","text":"<p>ModSecurity is an open source Web Application Firewall (WAF) widely deployed on web servers that has been in continuous development and widespread use since 2002.</p> <p>In 2024 it became an OWASP Production project, supported by the existing leadership and contributors.</p>"},{"location":"en/09-operations/03-modsecurity/#what-is-modsecurity","title":"What is ModSecurity?","text":"<p>In January 2024 the ModSecurity Web Application Firewall project was adopted by OWASP, previously TrustWave had been the custodian of this project. ModSecurity itself has a long history as an open source project, the first release was in November 2002, and is widely used as a web application firewall for cloud applications and on-premises web servers.</p> <p>The ModSecurity WAF needs to be configured in operational deployments, and this can be done using the OWASP CRS.</p>"},{"location":"en/09-operations/03-modsecurity/#why-use-modsecurity","title":"Why use ModSecurity?","text":"<p>Web Application Firewalls are often the first line of defense against HTTP attacks on web applications and servers. The ModSecurity WAF is widely used for this purpose along with the Coraza WAF, also provided by OWASP.</p>"},{"location":"en/09-operations/03-modsecurity/#how-to-use-modsecurity","title":"How to use ModSecurity","text":"<p>ModSecurity is a Web Application Firewall, which scans the incoming and outgoing HTTP traffic to a web server. The ModSecurity WAF is deployed as a proxy server in front of a web application, or deployed within the web server itself, to provide protection against HTTP attacks.</p> <p>The rules applied to the HTTP traffic are provided as configuration to ModSecurity, and these rules allow many different actions to be applied such as blocking traffic, redirecting requests, and many more. See the documentation for deploying and running ModSecurity, along with the documentation on configuring ModSecurity with the CRS.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/09-operations/04-crs/","title":"OWASP CRS","text":"<p>The OWASP CRS project, formerly known as Core Rule Set, is a set of generic attack detection rules for use with ModSecurity compatible web application firewalls such as OWASP Coraza. CRS is an OWASP Flagship tool project and can be downloaded for either Apache or IIS/Nginx web servers.</p>"},{"location":"en/09-operations/04-crs/#what-is-the-crs","title":"What is the CRS?","text":"<p>The CRS are attack detection rules for use with ModSecurity, Coraza and other ModSecurity compatible web application firewalls. The CRS aims to protect web applications from a wide range of attacks with a minimum of false alerts. The CRS provides protection against many common attack categories, including those in the OWASP Top Ten.</p>"},{"location":"en/09-operations/04-crs/#why-use-it","title":"Why use it?","text":"<p>If an organization is using a Coraza, ModSecurity or compatible Web Application Firewall (WAF) then it is very likely that the CRS is already in use by this WAF. The CRS provides the policy for the Coraza / Modsecurity engine so that traffic to a web application is inspected for various attacks and malicious traffic is blocked.</p>"},{"location":"en/09-operations/04-crs/#how-to-use-it","title":"How to use it","text":"<p>The use of the CRS assumes that a ModSecurity, Coraza or compatible WAF has been installed. Refer to the Coraza tutorial or the ModSecurity on how to do this.</p> <p>To get started with CRS refer to the CRS installation instructions.</p> <p>The OWASP Spotlight series provides an overview of how to use this CRS: 'Project 3 - Core Rule Set (CRS) - 1st Line of Defense'.</p>"},{"location":"en/09-operations/04-crs/#references","title":"References","text":"<ul> <li>OWASP CRS</li> <li>OWASP ModSecurity</li> <li>OWASP Coraza</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/10-metrics/","title":"Overview","text":"<p>Metrics are important in an organization for various reasons, and in software security they can be used to:</p> <ul> <li>measure the effectiveness of security controls</li> <li>determine security posture</li> <li>provide justification for security programs</li> <li>and others</li> </ul> <p>At present the OWASP Integration Standards project Application Wayfinder project does not identify any OWASP projects that gather or process metrics; this may change in the future.</p>"},{"location":"en/10-metrics/#strategy-and-metrics","title":"Strategy and Metrics","text":"<p>The software security program is foundational to the strategic planning an organizations security posture. Metrics keep track of the security activities within the plan and provide the information for gap analysis.</p> <p>The Software Assurance Maturity Model (SAMM) provides descriptions and definitions for the Strategy and Metrics business practices within the Governance business function. It provides two streams for achieving organizational maturity:</p> <ul> <li>Create and Promote   which concerns the risks identified with the organization and what level of risk is acceptable</li> <li>Measure and Improve which describes monitoring the security strategy through metrics</li> </ul> <p>The categories of metrics suggested by SAMM are :</p> <ul> <li>Effort metrics: the effort spent on security</li> <li>Result metrics: the results of security efforts</li> <li>Environment metrics: the environment where security efforts take place</li> </ul> <p>There are other metrics, perhaps specific to an individual organization, that can also be collected and acted on. The Security Culture project provides various examples of metrics that can be considered.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/11-security-gap-analysis/","title":"Overview","text":"<p>A security gap analysis is an activity where the information security posture of an organization is assessed and any shortfalls or operation gaps are identified. This activity can also be combined with a security gap evaluation where the existing controls and processes are assessed for effectiveness and relevance. Security gap analysis is required to gain or maintain certification to a management system standard such as ISO 27001 'Information security, cybersecurity and privacy protection'.</p> <p>The security gap analysis is often associated with Governance, Risk &amp; Compliance activities, where the compliance with a management system standard is periodically reviewed and updated. Guides and tools are useful for these compliance activities and the OWASP projects SAMM, MASVS and ASVS provide information and advice in meeting management system standards.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/11-security-gap-analysis/02-blt/","title":"BLT","text":"<p>The OWASP Bug Logging Tool (BLT) is a community database of bugs found in an organization's web site or application. BLT is an OWASP Production tool project and has its own bug recording site.</p>"},{"location":"en/11-security-gap-analysis/02-blt/#what-is-blt","title":"What is BLT?","text":"<p>BLT is a bug recording and bounty tool that allows external users to register and advise about bugs in an organization's web site or application. It allows an organization to run a bug bounty program without having to go through a commercial provider.</p> <p>The BLT core project provides a development server docker image that can be used for the bug bounty program. The BLT-Flutter application provides an integrated method for reporters/users to report bugs. The BLT Extension is a Chrome extension that helps BLT reporters/users to take screenshots and add them to a BLT website.</p>"},{"location":"en/11-security-gap-analysis/02-blt/#why-use-it","title":"Why use it?","text":"<p>Bug bounty programs are an important path for reporting security bugs to an organization. These programs can be paid-for services provided by commercial companies, or they can be provided by the company / organization itself; and this is where BLT can help.</p> <p>External reporters of bugs in web sites and applications are a valuable way of identifying security related bugs and issues; it provides a diverse range of individuals to hunt for bugs. BLT can provide the route for these security bugs to be responsibly disclosed to the organization.</p>"},{"location":"en/11-security-gap-analysis/02-blt/#how-to-use-it","title":"How to use it","text":"<p>BLT has its own bug recording site which can be used to disclose any type of bug in any web site. Ideally this is not used for security related bugs because these bugs need responsible disclosure. The organization should run its own BLT core site to accept submission of security related bugs, and encourage users/reporters to use the BLT app and chrome extension.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/11-security-gap-analysis/01-guides/","title":"Overview","text":"<p>Security gap analysis and security gap evaluation are central to Governance, Risk &amp; Compliance activities and are used to gain and maintain certification to a management system standard such as ISO 27001 'Information security, cybersecurity and privacy protection'.</p> <p>Guidance is important for these analysis and evaluation activities, with the OWASP projects SAMM, MASVS and ASVS providing this information and advice.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/11-security-gap-analysis/01-guides/01-samm/","title":"SAMM","text":"<p>The Software Assurance Maturity Model (SAMM) project provides an effective and measurable way for an organization to analyze their secure development lifecycle, and identify any gaps or improvements. SAMM is one of the OWASP's flagship projects, and can be downloaded from the SAMM project site.</p>"},{"location":"en/11-security-gap-analysis/01-guides/01-samm/#what-is-samm","title":"What is SAMM?","text":"<p>SAMM is regarded as the prime maturity model for software assurance. SAMM provides an effective and measurable way for all types of organizations to analyze and improve their software security posture. SAMM supports the complete secure software development lifecycle and is technology and process agnostic.</p> <p>The SAMM model is hierarchical. At the highest level SAMM defines five business functions; activities that software development must fulfill to some degree:</p> <ul> <li>Governance</li> <li>Design</li> <li>Implementation</li> <li>Verification</li> <li>Operations</li> </ul> <p>Each business function in turn has three security practices, which are areas of security-related activities that build assurance for the related business function.</p> <p>Security practices have activities, grouped in logical flows and divided into two streams (A and B). Streams cover different aspects of a practice and have their own objectives, aligning and linking the activities in the practice over the different maturity levels.</p> <p>For each security practice, SAMM defines three maturity levels which generalize to foundational, mature and advanced. Each level has a successively more sophisticated objective with specific activities, and more strict success metrics.</p>"},{"location":"en/11-security-gap-analysis/01-guides/01-samm/#why-use-it","title":"Why use it?","text":"<p>The structure and setup of the SAMM model support:</p> <ul> <li>assessment of the organization\u2019s current software security posture</li> <li>definition of the organization\u2019s targets</li> <li>definition of an implementation roadmap to get there</li> <li>prescriptive advice on how to implement particular activities</li> </ul> <p>These give the security activities expected at each maturity level, and provide input to the gap analysis.</p>"},{"location":"en/11-security-gap-analysis/01-guides/01-samm/#how-to-use-it","title":"How to use it","text":"<p>The OWASP Spotlight series provides an overview of using the SAMM: 'Project 9 - Software Assurance Maturity Model (SAMM)'.</p> <p>Security gap analysis can benefit from an assessment which measures the quality of the software assurance maturity process. The SAMM Assessment tools include spreadsheets and online tools such as SAMMwise and SAMMY.</p> <p>The SAMM model describes these fundamentals of software security, which it calls Business Functions. Each of these five fundamentals are further split into three Business Practices:</p> Business Function Business Practices Governance Strategy and Metrics Policy and Compliance Education and Guidance Design Threat Assessment Security Requirements Secure Architecture Implementation Secure Build Secure Deployment Defect Management Verification Architecture Assessment Requirements-driven Testing Security Testing Operations Incident Management Environment Management Operational Management <p>Each Business Practice is further subdivided into two streams which provide different objectives for the same practice.</p>"},{"location":"en/11-security-gap-analysis/01-guides/01-samm/#references","title":"References","text":"<ul> <li>OWASP Software Assurance Maturity Model (SAMM)</li> <li>SAMMY management tool</li> <li>OWASP SAMM project</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/11-security-gap-analysis/01-guides/02-asvs/","title":"ASVS","text":"<p>The Application Security Verification Standard (ASVS) is a long established OWASP flagship project, and is widely used to identify gaps in security as well as the verification of web applications.</p> <p>It can be downloaded from the OWASP project page in various languages and formats: PDF, Word, CSV, XML and JSON. Having said that, the recommended way to consume the ASVS is to access the github markdown pages directly - this will ensure that the latest version is used.</p>"},{"location":"en/11-security-gap-analysis/01-guides/02-asvs/#what-is-asvs","title":"What is ASVS?","text":"<p>The ASVS is an open standard that sets out the coverage and 'level of rigor' expected when it comes to performing web application security verification. For this reason it can be used to identify gaps in the security of web applications.</p> <p>The ASVS is split into various sections:</p> <ul> <li>V1 Architecture, Design and Threat Modeling</li> <li>V2 Authentication</li> <li>V3 Session Management</li> <li>V4 Access Control</li> <li>V5 Validation, Sanitization and Encoding</li> <li>V6 Stored Cryptography</li> <li>V7 Error Handling and Logging</li> <li>V8 Data Protection</li> <li>V9 Communication</li> <li>V10 Malicious Code</li> <li>V11 Business Logic</li> <li>V12 Files and Resources</li> <li>V13 API and Web Service</li> <li>V14 Configuration</li> </ul>"},{"location":"en/11-security-gap-analysis/01-guides/02-asvs/#how-to-use-it","title":"How to use it","text":"<p>The ASVS is a list of verification requirements that can be used to identify gaps in the security of web applications. If the ASVS suggests using a control then that control should be considered for the application security, it may be not applicable but at least the control should have been considered at some point in the development process.</p> <p>The OWASP Spotlight series provides an overview of the ASVS and its uses: 'Project 19 - OWASP Application Security Verification standard (ASVS)'.</p> <p>The OWASP Cheat Sheets have been indexed specifically for each section of the ASVS, which can be used as documentation on controls for a given requirements category.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/11-security-gap-analysis/01-guides/03-mas/","title":"MAS","text":"<p>The OWASP Mobile Application Security (MAS) flagship project provides industry standards for mobile application security.</p> <p>The OWASP MAS project provides the Mobile Application Security Verification Standard (MASVS) for mobile applications that can be used as a guide for security gap analysis. The MAS project covers the processes, techniques, and tools used for security testing a mobile application, as well as a set of test cases that enables testers to deliver consistent and complete results.</p>"},{"location":"en/11-security-gap-analysis/01-guides/03-mas/#what-is-masvs","title":"What is MASVS?","text":"<p>The OWASP MASVS is the industry standard for mobile app security. It can be used by mobile software architects and developers seeking to develop secure mobile applications, as well as security testers to ensure completeness and consistency of test results.</p> <p>The MAS project has several uses; when it comes to security gap analysis then the MASVS contains a list of security controls for mobile applications that are expected to be present / implemented.</p> <p>The security controls are split into several categories:</p> <ul> <li>MASVS-STORAGE</li> <li>MASVS-CRYPTO</li> <li>MASVS-AUTH</li> <li>MASVS-NETWORK</li> <li>MASVS-PLATFORM</li> <li>MASVS-CODE</li> <li>MASVS-RESILIENCE</li> <li>MASVS-PRIVACY</li> </ul>"},{"location":"en/11-security-gap-analysis/01-guides/03-mas/#why-use-masvs","title":"Why use MASVS?","text":"<p>The OWASP MASVS provides a list of industry-standard security controls for secure mobile applications. If the application does not implement any of the controls then this could become a compliance issue, given that MASVS is the industry standard for mobile applications, so any omissions need to be justified.</p>"},{"location":"en/11-security-gap-analysis/01-guides/03-mas/#how-to-use-masvs","title":"How to use MASVS","text":"<p>The MASVS provides a list of expected security controls for mobile applications, and can be used to identify missing or inadequate controls during gap analysis. These controls can then be tested using the MAS Testing Guide.</p> <p>The MASVS provides a starting point for a security gap evaluation for any existing controls as well as new ones. The MASVS can be accessed online and links followed for each security controls; the mobile application can then be inspected for compliance with the relevant controls.</p>"},{"location":"en/11-security-gap-analysis/01-guides/03-mas/#references","title":"References","text":"<ul> <li>OWASP Mobile Application Security (MAS)</li> <li>MAS project</li> <li>MAS Testing Guide (MASTG)</li> <li>MAS Verification Standard (MASVS)</li> <li>OWASP Mobile Application Security cheat sheet</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/","title":"Overview","text":"<p>Developer guide logo</p> <p>Implementation demands technical knowledge, skill and experience. There is no substitute for experience, but learning from past mistakes and the experience of others can go a long way. This section of the Developer Guide is a collection of Do's and Don'ts, some of which may be directly relevant to any given project and some of which will be less so. It is worth considering all of these Do's and Don'ts and picking out the ones that will be of most use.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/01-container-security/","title":"Container security","text":"<p>This is a collection of Do's and Don'ts when it comes to container security, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <p>Container image security, host security, client security, daemon security, runtime security:</p> <ul> <li>Choose the right base image</li> <li>Include only the required packages in the image</li> <li>If using Docker images, use multi-stage builds</li> <li>Use layer caching and multi stage builds to:</li> <li>Separate build-time dependencies from runtime dependencies</li> <li>Remove special permissions from images</li> <li><code>find / -perm /6000 -type f -exec ls -ld {} \\;</code></li> <li>RUN <code>find / -xdev -perm /6000 -type f -exec chmod a-s {} \\; || true</code></li> <li>Reduce overall image size by shipping only what your app needs to run,     see the Docker documentation for more information</li> <li>Remove unused images with prune: <code>docker image prune [OPTIONS]</code></li> <li>Do not embed any secrets, passwords, keys, credentials, etc in images</li> <li>Use a read-only file system</li> <li>Sign images with cryptographic keys and not with username/password combination</li> <li>Secure your code and its dependencies</li> <li>Test your images for vulnerabilities</li> <li>Monitor container runtimes</li> <li>Docker Content Trust (DCT) is enabled on Docker clients</li> <li>Check freshness security of images with the provided timestamp key that is associated with the registry.</li> <li>Create the timestamp key by Docker and store on the server</li> <li>Use tagging keys associated with a registry.     Such that a poisoned image from a different registry cannot be pushed into a registry.</li> <li>Use offline keys to sign the tagging keys.</li> <li>Offline keys are owned by the organization and secured in an out-of-band location.</li> <li>Scan images frequently for any vulnerabilities. Rebuilt all images to include patches     and instantiate new containers from them</li> <li>Remove <code>setuid</code> and <code>setgid</code> permissions from the images.</li> <li>Where applicable, use 'copy' instruction in place of 'add' instruction.</li> <li>Verify authenticity of packages before installing them into images</li> <li>Use namespaces and control groups for containers</li> <li>Use bridge interfaces for the host</li> <li>Authenticity of packages is verified before installing them into images</li> <li>Mount files on a separate partition to address any situation where the mount becomes full,     but the host still remains usable</li> <li>Mark registries as private and only use signed images.</li> <li>Pass commands through the authorization plugin to ensure that only authorized client connects to the daemon</li> <li>TLS authentication is configured to restrict access to the Docker daemon</li> <li>Namespaces are enabled to ensure that</li> <li>Leave control groups (cgroups) at default setting to ensure that tampering does not take place     with excessive resource consumption.</li> <li>Do not enable experimental features for Docker</li> <li>set docker.service file ownership to root:root.</li> <li>Set docker.service file permissions to either 644 or to a more restrictive value.</li> <li>Set docker.socket file ownership and group ownership to root.</li> <li>Set file permissions on the docker.socket file to 644 or more restrictively</li> <li>Set /etc/docker directory ownership and group ownership to root</li> <li>Set /etc/docker directory permissions to 755 or more restrictively</li> <li>Set ownership of registry certificate files (usually found under <code>/etc/docker/certs.d/&lt;registry-name&gt;</code> directory)     to individual ownership and is group owned by root.</li> <li>Set registry certificate files (usually found under <code>/etc/docker/certs.d/&lt;registry-name&gt;</code> directory)     permissions to 444 or more restrictively.</li> <li>Acquire and ship daemon logs to SIEM for monitoring</li> <li>Inter-container network connections are restricted and enabled on a requirement basis.     By default containers cannot capture packets that have other containers as destination</li> <li>Where hairpin NAT is enabled, userland proxy is disabled</li> <li>Docker daemon is run as a non-root user to mitigate lateral privilege escalation     due to any possible compromise of vulnerabilities.</li> <li><code>No_new_priv</code> is set (but not to false) to ensure that containers cannot gain additional privileges     via <code>suid</code> or <code>sgid</code></li> <li>Default SECCOMP profile is applied for access control.</li> <li>TLS CA certificate file on the image host (the file that is passed along with the <code>--tlscacert</code> parameter)     is individually owned and group owned by root</li> <li>TLS CA certificate file on the image host (the file that is passed along with the <code>--tlscacert</code> parameter)     has permissions of 444 or is set more restrictively</li> <li>Containers should run as a non-root user.</li> <li>Containers should have as small a footprint as possible, and should not contain unnecessary software packages     which could increase their attack surface</li> <li>Docker default bridge 'docker0' is not used to avoid ARP spoofing and MAC flooding attacks</li> <li>Either Dockers AppArmor policy is enabled or the Docker hosts AppArmor is enabled.</li> <li>SELinux policy is enabled on the Docker host.</li> <li>Linux kernel capabilities are restricted within containers</li> <li>privileged containers are not used</li> <li>sensitive host system directories are not mounted on containers</li> <li><code>sshd</code> is not run within containers</li> <li>privileged ports are not mapped within containers (TCP/IP port numbers below 1024 are considered privileged ports)</li> <li>only needed ports are open on the container.</li> <li>the hosts network namespace is not shared.</li> <li>containers root filesystem is mounted as read only</li> <li>Do not use docker exec with the <code>--privileged</code> option.</li> <li>docker exec commands are not used with the user=root option</li> <li>cgroup usage is confirmed</li> <li>The <code>no_new_priv</code> option prevents LSMs like SELinux from allowing processes to acquire new privileges</li> <li>Docker socket is not mounted inside any containers to prevent processes running within the container     to execute Docker commands which would effectively allow for full control of the host.</li> <li>incoming container traffic is bound to a specific host interface</li> <li>hosts process namespace is not shared to ensure that processes are separated</li> <li>hosts IPC namespace is not shared to ensure that inter-process communications does not take place</li> <li>host devices are not directly exposed to containers</li> <li>hosts user namespaces are not shared to ensure isolation of containers</li> <li>CPU priority is set appropriately on containers</li> <li>memory usage for containers is limited.</li> <li>'on-failure' container restart policy is set to '5'</li> <li>default <code>ulimit</code> is overwritten at runtime if needed</li> <li>container health is checked at runtime</li> <li>PIDs cgroup limit is used (limit is set as applicable)</li> <li>The Docker host is hardened to ensure that only Docker services are run on the host</li> <li>Secure configurations are applied to ensure that the containers do not gain access to the host via the Docker daemon</li> <li>Docker is updated with the latest patches such that vulnerabilities are not compromised</li> <li>The underlying host is managed to ensure that vulnerabilities are identified and mitigated with patches</li> <li>Docker server certificate file (the file that is passed along with the <code>--tlscert</code> parameter)     is individual owned and group owned by root.</li> <li>Docker server certificate file (the file that is passed along with the <code>--tlscert</code> parameter)     has permissions of 444 or more restrictive permissions.</li> <li>Docker server certificate key file (the file that is passed along with the <code>--tlskey</code> parameter)     is individually owned and group owned by root.</li> <li>Docker server certificate key file (the file that is passed along with the <code>--tlskey</code> parameter) has permissions of 400</li> <li>Docker socket file is owned by root and group owned by docker.</li> <li>Docker socket file has permissions of 660 or are configured more restrictively</li> <li>ensure <code>daemon.json</code> file individual ownership and group ownership is correctly set to root, if it is in use</li> <li>if <code>daemon.json</code> file is present its file permissions are correctly set to 644 or more restrictively</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/02-secure-coding/","title":"Secure coding","text":"<p>Here is a collection of Do's and Don'ts when it comes to secure coding, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <ul> <li>Authentication</li> <li>User<ul> <li>Require authentication for all pages and resources, except those specifically intended to be public</li> <li>Perform all authentication on server side. Send credentials only on encrypted channel (HTTPS)</li> <li>Use a centralized implementation for all authentication controls, including libraries that call external     authentication services. Use security vetted libraries for federation (Okta / PING / etc).     If using third party code for authentication, inspect the code carefully to ensure it is not affected     by any malicious code</li> <li>Segregate authentication logic from the resource being requested and use redirection to and from     the centralized authentication control</li> <li>Validate the authentication data only on completion of all data input,     especially for sequential authentication implementations</li> <li>Authentication failure responses should not indicate which part of the authentication data was incorrect.     For example, instead of \"Invalid username\" or \"Invalid password\",     just use \"Invalid username and/or password\" for both.     Error responses must be truly identical in both display and source code</li> <li>Utilize authentication for connections to external systems that involve sensitive information or functions</li> <li>Authentication credentials for accessing services external to the application should be encrypted     and  stored in a protected location on a trusted system (e.g., Secrets Manager).     The source code is NOT a secure location.</li> <li>Do not store passwords in code or in configuration files. Use Secrets Manager to store passwords</li> <li>Use only HTTP POST requests to transmit authentication credentials</li> <li>Implement monitoring to identify attacks against multiple user accounts, utilizing the same password.     This attack pattern is used to bypass standard lockouts, when user IDs can be harvested or guessed</li> <li>Re-authenticate users prior to performing critical operations</li> <li>Use Multi-Factor Authentication for highly sensitive or high value transactional accounts</li> <li>If using third party code for authentication, inspect the code carefully     to ensure it is not affected by any malicious code</li> <li>Restrict the user if a pre-defined number of failed logon attempts exceed.     Restrict access to a limited number of attempts to prevent brute force attacks</li> <li>Partition the portal into restricted and public access areas</li> <li>Restrict authentication cookies to HTTPS connections</li> <li>If the application has any design to persist passwords in the database, hash and salt the password     before storing in database. Compare hashes to validate password</li> <li>Authenticate the user before authorizing access to hidden directories</li> <li>Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks     by using the same messages for all outcomes.</li> </ul> </li> <li>Server<ul> <li>When using SSL/TLS, ensure that the server identity is established by following a trust chain     to a known root certificate</li> <li>When using SSL/TLS, validate the host information of the server certificate.</li> <li>If weak client authentication is unavoidable, perform it only over a secure channel</li> <li>Do not rely upon IP numbers or DNS names in establishing identity.</li> <li>Ensure all internal and external connections (user and entity) go through an appropriate     and adequate form of authentication. Be assured that this control cannot be bypassed.</li> <li>For the account that runs the web server:</li> <li>Grant permissions to only those folders that the application needs to access</li> <li>Grant only those privileges that the account needs</li> <li>Disable HTTP TRACE.     It can help in bypassing WAF because of it inherent nature of TRACE response includes all headers on its route.     Please see - Three Minutes with the HTTP TRACE Method - for further details</li> <li>Disable WEBDav feature unless it is required for business reasons.     If it is, perform a risk assessment for enabling the feature on your environment.</li> <li>Ensure that authentication credentials are sent on an encrypted channel</li> <li>Ensure development/debug backdoors are not present in production code.</li> </ul> </li> <li>Password policy<ul> <li>Provide a mechanism for self-reset and do not allow for third-party reset.</li> <li>If the application has any design to persist passwords in the database, hash and salt the password     before storing in database. Compare hashes to validate password.</li> <li>Rate limit bad password guesses to a fixed number(5) in a given time period (5-minute period)</li> <li>Provide a mechanism for users to check the quality of passwords when they set or change it.</li> <li>Only send non-temporary passwords over an encrypted connection or as encrypted data,     such as in an encrypted email. Temporary passwords associated with email resets may be an exception</li> <li>Enforce password complexity requirements established by policy or regulation.     Authentication credentials should be sufficient to withstand attacks that are typical     of the threats in the deployed environment.     (e.g., requiring the use of alphabetic as well as numeric and/or special characters)</li> <li>Enforce password length requirements established by policy or regulation. Eight characters is commonly used,     but 16 is better or consider the use of multi-word pass phrases</li> <li>Password entry should be obscured on the user's screen. (e.g., on web forms use the input type \"password\")</li> <li>Enforce account disabling after an established number of invalid login attempts (e.g., five attempts is common).     The account must be disabled for a period of time sufficient to discourage brute force guessing of credentials,     but not so long as to allow for a denial-of-service attack to be performed</li> <li>Password reset and changing operations require the same level of controls as account creation and authentication.</li> <li>Password reset questions should support sufficiently random answers.     (e.g., \"favorite book\" is a bad question because \u201cThe Bible\u201d is a very common answer)</li> <li>If using email based resets, only send email to a pre-registered address with a temporary link/password</li> <li>Temporary passwords and links should have a short expiration time</li> <li>Enforce the changing of temporary passwords on the next use</li> <li>Notify users when a password reset occurs</li> <li>Prevent password re-use</li> <li>For high risk application (for example banking applications or any application the compromise of credentials     of which may lead to identity theft), passwords should be at least one day old before they can be changed,     to prevent attacks on password  re-use</li> <li>Enforce password changes based on requirements established in policy or regulation. Critical systems     may require more frequent changes. The time between resets must be administratively controlled</li> <li>Disable \"remember me\" functionality for password fields</li> <li>Avoid sending authentication information through E-mail, particularly for existing users.</li> </ul> </li> <li>Authorization</li> <li>Access control<ul> <li>Build authorization on rules based access control.     Persist the rules as a matrix (for example as a list of strings which is passed as a parameter to a method     that is run when the user first access the page, based on which access is granted).     Most frameworks today, support this kind of matrix.</li> <li>Check if the user is authenticated before checking the access matrix.     If the user is not authenticated, direct the user to the login page.     Alternatively, use a single site-wide component to check access authorization.     This includes libraries that call external authorization services</li> <li>Ensure that the application has clearly defined the user types and the privileges for the users.</li> <li>Ensure there is a least privilege stance in operation. Add users to groups and assign privileges to groups</li> <li>Scan the code for development/debug backdoors before deploying the code to production.</li> <li>Re-Authenticate the user before authorizing the user to perform business critical activities</li> <li>Re-Authenticate the user before authorizing the user to admin section of the application</li> <li>Do not include authorization in the query string. Direct the user to the page via a hyperlink on a page.     Authenticate the user before granting access. For example if <code>admin.php</code> is the admin page for <code>www.example.com</code>     do not create a query string like <code>www.example.com/admin.php</code>.     Instead include a hyperlink to <code>admin.php</code> on a page and control authorization to the page</li> <li>Prevent forced browsing with role based access control matrix</li> <li>Ensure Lookup IDs are not accessible even when guessed and lookup IDs cannot be tampered with</li> <li>Enforce authorization controls on every request, including those made by server side scripts,     \"includes\" and requests from rich client-side technologies like AJAX and Flash</li> <li>Server side implementation and presentation layer representations of access control rules must match</li> <li>Implement access controls for POST, PUT and DELETE especially when building an API</li> <li>Use the \"referer\" header as a supplemental check only, it should never be the sole authorization check,     as it is can be spoofed</li> <li>Ensure it is not possible to access sensitive URLs without proper authorization.     Resources like images, videos should not be accessed directly by simply specifying the correct path</li> <li>Test all URLs on administrator pages to ensure that authorization requirements are met.     If verbs are sent cross domain, pin the OPTIONS request for non-GET verbs to the IP address of     subsequent requests. This will be a first step toward mitigating DNS Rebinding and TOCTOU attacks.</li> </ul> </li> <li>Session management<ul> <li>Creation of session: Use the server or framework\u2019s session management controls.     The application should only recognize these session identifiers as valid</li> <li>Creation of session: Session identifier creation must always be done on a trusted system (e.g., The server)</li> <li>Creation of session: If a session was established before login,     close that session and establish a new session after a successful login</li> <li>Creation of session: Generate a new session identifier on any re-authentication</li> <li>Random number generation: Session management controls should use well vetted algorithms     that ensure sufficiently random session identifiers.     Rely on CSPRNG rather than PRNG for random number generation</li> <li>Domain and path: Set the domain and path for cookies containing authenticated session identifiers     to an appropriately restricted value for the site</li> <li>Logout: Logout functionality should fully terminate the associated session or connection</li> <li>Session timeout: Establish a session inactivity timeout that is as short as possible,     based on balancing risk and business functional requirements.     In most cases it should be no more than several hours</li> <li>Session ID: Do not expose session identifiers in URLs, error messages or logs.     Session identifiers should only be located in the HTTP cookie header. For example,     do not pass session identifiers as GET parameters</li> <li>Session ID: Supplement standard session management for sensitive server-side operations, like account management,     by utilizing per-session strong random tokens or parameters.     This method can be used to prevent Cross Site Request Forgery attacks</li> </ul> </li> <li>JWT<ul> <li>Reject tokens set with \u2018none\u2019 algorithm when a private key was used to issue them (<code>alg: \"\"none\"\"</code>).     This is because an attacker may modify the token and hashing algorithm to indicate, through the \u2018none\u2019 keyword,     that the integrity of the token has already been verified,     fooling the server into accepting it as a valid token</li> <li>Use appropriate key length (e.g. 256 bit) to protect against brute force attacks.     This is because attackers may change the algorithm from \u2018RS256\u2019 to \u2018HS256\u2019 and use the public key to generate     a HMAC signature for the token, as server trusts the data inside the header of a JWT     and doesn\u2019t validate the algorithm it used to issue a token.     The server will now treat this token as one generated with \u2018HS256\u2019 algorithm     and use its public key to decode and verify it</li> <li>Adjust the JWT token validation time depending on required security level (e.g. from few minutes up to an hour).     For extra security, consider using reference tokens if there\u2019s a need to be able to revoke/invalidate them</li> <li>Use HTTPS/SSL to ensure JWTs are encrypted during client-server communication,     reducing the risk of the man-in-the-middle attack. This is because sensitive information may be revealed,     as all the information inside the JWT payload is stored in plain text</li> <li>Only use up-to-date and\u00a0secure\u00a0libraries\u00a0and choose the right algorithm for requirements</li> <li>Verify all tokens before processing the payload data. Do not use unsigned tokens.     For the tokens generated and consumed by the portal, sign and verify tokens</li> <li>Always check that the <code>aud</code> field of the JWT matches the expected value,     usually the domain or the URL of your APIs. If possible, check the \"sub\" (client ID) - make sure that     this is a known client. This may not be feasible however in a public API situation     (e.g., we trust all clients authorized by Google).</li> <li>Validate the issuer's URL (<code>iss</code>) of the token. It must match your authorization server.</li> <li>If an authorization server provides X509 certificates as part of its JWT,     validate the public key using a regular PKIX mechanism</li> <li>Make sure that the keys are frequently refreshed/rotated by the authorization server.</li> <li>Make sure that the algorithms you use are sanctioned by JWA (RFC7518)</li> <li>There is no built in mechanism to revoke a token manually, before it expires.     One way to ensure that the token is force expired build a service that can be called on log out.     In the mentioned service, block the token.</li> <li>Restrict accepted algorithms to the ONE you want to use</li> <li>Restrict URLs of any JWKS/X509 certificates</li> <li>Use the strongest signing process you can afford the CPU time for</li> <li>Use asymmetric keys if the tokens are used across more than one server</li> </ul> </li> <li>SAML</li> <li>Input data validation</li> <li>Identify input fields that form a SQL query. Check that these fields       are suitably validated for type, format, length, and range.</li> <li>To prevent SQL injection use bind variables in stored procedures and SQL statements.       Also referred as prepared statements / parameterization of SQL statements.       DO NOT concatenate strings that are an input to the database.       The key is to ensure that raw input from end users is not accepted without sanitization.       When converting data into a data structure (deserializing), perform explicit validation for all fields,       ensuring that the entire object is semantically valid.       Many technologies now come with data access layers that support input data validation.       These layers are usually in the form of a library or a package. Ensure to add       these libraries  / dependencies / packages to the project file such that they are not missed out.</li> <li>Use a security vetted library for input data validation. Try not to use hard coded allow-list of characters.       Validate all data from a centralized function / routine.       In order to add a variable to a HTML context safely, use HTML entity encoding       for that variable as you add it to a web template.<ul> <li>Validate HTTP headers. Dependencies that perform HTTP headers validation are available in technologies.</li> <li>Validate post backs from javascript.</li> <li>Validate data from http headers, input fields, hidden fields, drop down lists &amp; other web components</li> <li>Validate data retrieved from database. This will help mitigate persistent XSS.</li> <li>Validate all redirects. Unvalidated redirects may lead to data / credential exfiltration.     Evaluate any URL encodings before trying to use the URL.</li> <li>Validate data received from redirects. The received data may be from untrusted source.</li> <li>If any potentially hazardous characters must be allowed as input,     be sure that you implement additional controls like output encoding,     secure task specific APIs and accounting for  the utilization of that data throughout the application.     Examples of common hazardous characters include <code>&lt; &gt; \" ' % ( ) &amp; + \\ \\' \\\"</code></li> <li>If your standard validation routine cannot address the following inputs, then they should be checked discretely</li> <li>Check for null bytes <code>%00</code></li> <li>Check for new line characters <code>%0d, %0a, \\r, \\n</code></li> <li>Check for \u201cdot-dot-slash\" <code>../</code> or <code>..\\</code> path alterations characters.       In cases where UTF-8 extended character set encoding is supported, address alternate representation like:       <code>%c0%ae%c0%ae/</code>       (Utilize canonicalization to address double encoding or other forms of obfuscation attacks)</li> <li>Client-side storage (<code>localStorage</code>, <code>SessionStorage</code>, <code>IndexedDB</code>, WebSQL):     If you use client-side storage for persistence of any variables,     validate the date before consuming it in the application</li> <li>Reject all input data that has failed validation.</li> <li>If used, don\u2019t involve user parameters in calculating the destination. This can usually be done.     If destination parameters can\u2019t be avoided, ensure that the supplied value is valid,     and authorized for the user.     It is recommended that any such destination parameters be a mapping value,     rather than the actual URL or portion of the URL,     and that server side code translate this mapping to the target URL.     Applications can use ESAPI to override the <code>sendRedirect()</code> method     to make sure all redirect destinations are safe.</li> </ul> </li> <li>Output data encoding</li> <li>If your code echos user input or URL parameters back to a Web page, validate input data as well as output data.       It will help you prevent persistent as well as reflective cross-site scripting.       Pay particular attention to areas of the application that permit users       to modify configuration or personalization settings.       Also pay attention to persistent free-form user input,       such as message boards, forums, discussions, and Web postings.       Encode javascript to prevent injection by escaping non-alphanumeric characters.       Use quotation marks like \" or ' to surround your variables.       Quoting makes it difficult to change the context a variable operates in, which helps prevent XSS</li> <li>Conduct all encoding on a trusted system (e.g., The server)       Utilize a standard, tested routine for each type of outbound encoding       Contextually output encode all data returned to the client       that originated outside the application's trust boundary.       HTML entity encoding is one example, but does not work in all cases       Encode all characters unless they are known to be safe for the intended interpreter       Contextually sanitize all output of untrusted data to queries for SQL, XML, and LDAP       Sanitize all output of untrusted data to operating system commands</li> <li>Output encoding is not always perfect. It will not always prevent XSS. Some contexts are not secure. These include:       Callback functions       Where URLs are handled in code such as this CSS <code>{ background-url : \u201cjavascript:alert(test)\u201d; }</code>       All JavaScript event handlers (<code>onclick()</code>, <code>onerror()</code>, <code>onmouseover()</code>).       Unsafe JavaScript functions like <code>eval()</code>, <code>setInterval()</code>, <code>setTimeout()</code>       Don't place variables into these contexts as even with output encoding, it will not prevent an XSS attack fully</li> <li>Do not rely on client-side validation. Perform validation on server side to prevent second order attacks.</li> <li>Canonicalisation</li> <li>Convert all input data to an accepted/decided format like UTF-8.  This will help prevent spoofing of character</li> <li>Test all URLs with different parameter values.     Spider and check the site/product/application/portal for redirects.</li> <li>Connection with backend     Assign required permissions and privileges for accounts / roles     used by the application to connect to the database.     In the event of any compromise of the account / role,     the malicious actor would be able to do whatever the account /role has permissions for.</li> <li>Insecure direct object references</li> <li>Unvalidated redirects     Test all URLs with different parameter values to validate any redirects     If used, do not allow the URL as user input for the destination.     Where possible, have the user provide short name, ID or token which is mapped server-side to a full target URL.     This provides the protection against the URL tampering attack.     Be careful that this doesn't introduce an enumeration vulnerability where     a user could cycle through IDs to find all possible redirect targets     If user input can\u2019t be avoided, ensure that the supplied value is valid, appropriate for the application,     and is authorized for the user.     Sanitize input by creating a list of trusted URLs (lists of hosts or a regex).     This should be based on an allow-list approach, rather than a block list.     Force all redirects to first go through a page notifying users that they are going off of your site,     with the destination clearly displayed, and have them click a link to confirm.</li> <li>JSON     For JSON, verify that the\u00a0Content-Type\u00a0header is\u00a0application/json\u00a0and not\u00a0text/html\u00a0to prevent XSS     Do not use duplicate keys. Usage of duplicate keys may be processed differently by parsers.     For example last-key precedence versus first-key precedence.</li> <li>Generate fatal parse errors on duplicate keys.     Do not perform character truncation. Instead, replace invalid Unicode with placeholder characters     (e.g., unpaired surrogates should be displayed as the Unicode replacement character <code>U+FFFD</code>).     Truncating may break sanitization routines for multi-parser applications.\"</li> <li>Produce errors when handling integers or floating-point numbers that cannot be represented faithfully</li> <li>Do not use <code>eval()</code> with JSON. This opens up for JSON injection attacks. Use JSON.parse() instead     Data from an untrusted source is not sanitized by the server and written directly to a JSON stream.     This is referred to as server-side JSON injection.     Data from an untrusted source is not sanitized and parsed directly using the JavaScript <code>eval</code> function.     This is referred to as client-side JSON injection.     To prevent server-side JSON injections, sanitize all data before serializing it to JSON     Escape characters like \":\", \"\\\", \"@\", \"'\u201d\", \"%\", \"?\", \"--\", \"&gt;\", \"&lt;\", \"&amp;\"</li> </ul>"},{"location":"en/12-appendices/01-implementation-dos-donts/02-secure-coding/#json-vulnerability-protection","title":"JSON Vulnerability Protection","text":"<p>A JSON vulnerability allows third party website to turn your JSON resource URL into JSONP request under some conditions. To counter this your server can prefix all JSON requests with following string <code>\")]}',\\n\"</code>. AngularJS will automatically strip the prefix before processing it as JSON.</p> <p>For example if your server needs to return: <code>['one','two']</code> which is vulnerable to attack, your server can return: <code>)]}', ['one','two']</code></p> <p>Refer to JSON vulnerability protection Always have the outside primitive be an object for JSON strings</p> <p>Exploitable: <code>[{\"\"object\"\": \"\"inside an array\"\"}]</code></p> <p>Not exploitable: <code>{\"\"object\"\": \"\"not inside an array\"\"}</code></p> <p>Also not exploitable: <code>{\"\"result\"\": [{\"\"object\"\": \"\"inside an array\"\"}]}\"</code></p> <ul> <li>Avoid manual build of JSON, use an existing framework</li> <li>Ensure calling function does not convert JSON into a javascript     and JSON returns its response as a non-array json object</li> <li>Wrap JSON in () to force the interpreter to think of it as JSON and not a code block</li> <li>When using node.js, on the server use a proper JSON serializer to encode user-supplied data properly     to prevent the execution of user-supplied input on the browser.</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/03-cryptographic-practices/","title":"Cryptographic practices","text":"<p>Here is a collection of Do's and Don'ts when it comes to cryptographic practices, gathered from practical experiences.</p> <ul> <li>The basis for usage of PKI is to address (using encryption and hashing)</li> <li>Confidentiality</li> <li>Integrity</li> <li>Authentication</li> <li>Non-repudiation</li> <li>Cryptography is used for the following:</li> <li>Data-at-rest protection using data encrypting keys and key encrypting keys. For which,</li> <li>Do not use custom cryptographic algorithms / deprecated algorithms</li> <li>Do not use passwords as cryptographic keys</li> <li>Do not hard-code cryptographic keys in the application</li> <li>Persist secret keys in a secure vault like HSM, KMS, Secrets Manager</li> <li>Manage encryption keys through the lifecycle, including key retirement/replacement     when someone who has access leaves the organization</li> <li>Rotate keys on a regular basis. However this depends on the key strength and the algorithm used.     If the key strength is low, the rotation period will be smaller</li> <li>Maintain a contingency plan to recover data in the event of an encrypted key being lost</li> <li>Ensure the code eliminates secrets from memory.</li> <li>Maintain a contingency plan that can recover data in the event of an encrypted key being lost</li> <li>Store keys away from the data</li> <li>Do not use IV twice for a fixed key</li> <li>Communication security</li> <li>Ensure no sensitive data is transmitted in the clear, internally or externally.</li> <li>Validate certificates properly against the hostnames/users for whom they are meant</li> <li>Failed TLS connections should not fall back to an insecure connection</li> <li>Do not use IV twice for a fixed key</li> <li>Cryptography in general</li> <li>All protocols and algorithms for authentication and secure communication     should be well vetted by the cryptographic community.</li> <li>Perform Message integrity checking by using a combined mode of operation, or a MAC based on a block cipher.</li> <li>Do not use key sizes less than 128 bits or cryptographic hash functions with output sizes less than 160 bits.</li> <li>Do not use custom cryptographic algorithms that have not been vetted by cryptography community</li> <li>Do not hardcode cryptographic keys in applications?</li> <li>Issue keys using a secure means.</li> <li>Maintain a key lifecycle for the organization (Creation, Storage, Distribution and installation, Use,     Rotation, Backup, Recovery, Revocation, Suspension, Destruction)</li> <li>Lock and unlock symmetric secret keys securely</li> <li>Maintain CRL (Certificate Revocation Lists) maintained on a real-time basis</li> <li>Validate certificates properly against the hostnames/users for whom they are meant</li> <li>Ensure the code eliminates secrets from memory</li> <li>Specific encryption, in addition to SSL</li> <li>Mask or remove keys from logs</li> <li>Use salted hashes when using MD5 or any such less secure algorithms</li> <li>Use known encryption algorithms, do not create your own as they will almost certainly be less secure</li> <li>Persist secret keys in a secure vault like HSM, KMS, Secrets Manager</li> <li>Do not use IV twice for a fixed key</li> <li>Ensure that cryptographic randomness is used where appropriate,     and that it has not been seeded in a predictable way or with low entropy.     Most modern APIs do not require the developer to seed the CSPRNG to get security.</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/04-application-spoofing/","title":"Application spoofing","text":"<p>Here is a collection of Do's and Don'ts when it comes to application spoofing, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <p>What is application spoofing:</p> <ul> <li>A threat actor including an application in a malicious iFrame</li> <li>A threat actor creating dependencies with similar names as legitimate ones (typo squatting)</li> </ul> <p>How can it be addressed:</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/04-application-spoofing/#application-spoofing-clickjacking","title":"Application spoofing / clickjacking","text":"<p>Set <code>X-FRAME-OPTIONS</code> header to <code>SAMEORIGIN</code> or <code>DENY</code>, depending on what the business requirement is for rendering the web page. This will help prevent a malicious actor including your application in an iFrame to capture credentials/exfiltrate data. As a caveat, this will not work with Meta Tags. X-FRAME-OPTIONS must be applied as HTTP Response Header</p> <p>Use Content Security Policy:</p> <p>Common uses of CSP frame-ancestors:</p> <p>Content-Security-Policy: frame-ancestors 'none';</p> <p>This prevents any domain from framing the content. This setting is recommended unless a specific need has been identified for framing.</p> <p>Content-Security-Policy: frame-ancestors 'self';</p> <p>This only allows the current site to frame the content.</p> <p>Content-Security-Policy: frame-ancestors 'self' <code>*.somesite.com https://myfriend.site.com;</code></p> <p>This allows the current site, as well as any page on <code>somesite.com</code> (using any protocol), and only the page <code>myfriend.site.com</code>, using HTTPS only on the default port (443).</p> <p>Use <code>SameSite</code> Cookies</p> <p>Use <code>httpOnly</code> cookies</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/04-application-spoofing/#domain-squatting-typo-squatting","title":"Domain squatting / typo squatting","text":"<p>What is domain squatting (also known as cybersquatting):</p> <ul> <li>A threat actor creating a malicious domain with the same spelling as a legitimate domain     but use different UTF characters (domain squatting)</li> <li>A threat actor registering, trafficking in, or using an Internet domain name,     with an intent to profit from the goodwill of a trademark belonging to someone else</li> <li>Though domain squatting impacts brand value directly, it has an impact from a security perspective</li> <li>It can result in the following kind of scenario: (also known as typosquatting)     Wherein the domain with U+00ED may be a malicious application trying to harvest credentials</li> <li>Typo squatting is achieved with supply chain manipulation.</li> </ul> <p>How can it be addressed:</p> <ul> <li>Use threat intelligence to monitor lookalikes for your domain</li> <li>In the event a dispute needs to be raised, it can be done with URDP</li> <li>Verify packages in registries before using them</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/05-content-security-policy/","title":"Content Security Policy (CSP)","text":"<p>Here is a collection of Do's and Don'ts when it comes to Content Security Policy, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <p>Content Security Policy (CSP) helps in allow-listing the sources that are allowed to be executed by clients.</p> <p>To this effect CSP helps in addressing vulnerabilities that are the target of scripts getting executed from different domains (namely XSS, ClickJacking)  </p> <ol> <li> <p>The policy elements listed below is restrictive.     Third party libraries can be allow-listed as a part of <code>script-src</code>, <code>default-src</code>, <code>frame-src</code>     or <code>frame-ancestors</code>.</p> </li> <li> <p>I assume fonts / images / media / plugins are not loaded from any external sources.</p> </li> <li> <p>Do not use <code>\\*\\</code> as an attribute for any of the components of the policy.</p> </li> </ol> <p>CSP considers two types of content:</p> <p>Passive content - resources which cannot directly interact with or modify other resources on a page: images, fonts, audio, and video for example</p> <p>Active content - content which can in some way directly manipulate the resource with which a user is interacting.</p> <p>SCOPE</p> <p>The scope of this policy / procedure / whatever includes (but not limited to):</p> <ul> <li>Applications that are displayed in browsers</li> <li>On desktops</li> <li>On laptops</li> <li>On mobile devices</li> <li>Mobile Applications</li> <li>iOS</li> <li>Android</li> </ul> <p>Policy for content security should be set in &lt;&lt;add SSDLC Policy / Secure Coding Policy / any others that is applicable. Unless otherwise specified  by the customer, third party sources should not be allowed to connect from the deployed solutions</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/05-content-security-policy/#web-applications","title":"Web Applications","text":"<p>For web applications, the source of all content is set to self.</p> <ul> <li><code>default-src</code> 'self'</li> <li><code>script-src</code> 'self';</li> <li><code>script-src</code> <code>unsafe-inline</code> <code>unsafe-eval</code> https:; (I am fairly sure this is used to block unsafe inline scripts     and <code>eval</code> but to be checked) - Have checked now and <code>unsafe-inline</code> should not be used</li> <li><code>connect-src</code> 'self';</li> <li><code>img-src</code> 'self';</li> <li><code>style-src</code> 'self'</li> <li><code>style-src</code> 'unsafe-inline' should not be used</li> <li><code>font-src</code> 'self';</li> <li><code>frame-src</code> https:;</li> <li><code>frame-ancestors</code> 'none' (This is to prevent ClickJacking equivalent to X-FRAME-OPTIONS = SAME-ORIGIN)</li> <li><code>frame-ancestors</code> 'self' (This is to prevent ClickJacking equivalent to X-FRAME-OPTIONS = SAME-ORIGIN)</li> <li><code>frame-ancestors</code> <code>example.com</code> (This component allows content to be loaded only from <code>example.com</code>)</li> <li><code>media-src</code> 'self':;</li> <li><code>object-src</code> 'self:;</li> <li><code>report-uri</code> &lt;&lt;&gt;&gt; (insert the URL where the report for policy violations should be sent)</li> <li>sandbox (this is something to be tried out specifies an HTML sandbox policy      that the user agent applies to the protected resource)</li> <li><code>plugin-types</code> &lt;&lt;&gt;&gt; (insert the list of plugins that the protected resource can invoke)</li> <li><code>base-uri</code> (restricts the URLs that can be used to specify the document base URL, but I do not know how this is used)</li> <li><code>child-src</code> 'self'</li> </ul> <p>An Example:</p> <pre><code>&lt;add name=\"Content-Security-Policy\" value=\"script-src *.google-analytics.com maps.googleapis.com apis.google.com 'self';\n\" script-src 'self' font-src 'self' frame-ancestors 'toyota.co.uk' object-src 'self' /&gt;\n</code></pre> <p>For display on desktops and laptops: add <code>name=\"Content-Security-Policy\"</code> value</p> <p>For display on other mobile devices that use HTML5: <code>meta http-equiv=\"Content-Security-Policy\"</code></p>"},{"location":"en/12-appendices/01-implementation-dos-donts/05-content-security-policy/#mobile-application","title":"Mobile Application","text":""},{"location":"en/12-appendices/01-implementation-dos-donts/05-content-security-policy/#ios","title":"iOS","text":"<p>iOS framework has capability to restrict connecting to sites that are not a part of the allow-list on the application, which is the <code>NSExceptionDomains</code>. Use this setting to restrict the content that gets executed by the application</p> <pre><code>NSAppTransportSecurity : Dictionary {\n    NSAllowsArbitraryLoads : Boolean\n    NSAllowsArbitraryLoadsForMedia : Boolean\n    NSAllowsArbitraryLoadsInWebContent : Boolean\n    NSAllowsLocalNetworking : Boolean\n    NSExceptionDomains : Dictionary {\n        &lt;domain-name-string&gt; : Dictionary {\n            NSIncludesSubdomains : Boolean\n            NSExceptionAllowsInsecureHTTPLoads : Boolean\n            NSExceptionMinimumTLSVersion : String\n            NSExceptionRequiresForwardSecrecy : Boolean   \n            NSRequiresCertificateTransparency : Boolean\n        }\n    }\n}\n</code></pre>"},{"location":"en/12-appendices/01-implementation-dos-donts/05-content-security-policy/#android","title":"Android","text":"<p>Setting rules for Android application:</p> <ul> <li>If your application doesn't directly use JavaScript within a WebView, do not call <code>setJavaScriptEnabled()</code></li> <li>By default, WebView does not execute JavaScript, so cross-site-scripting is not possible</li> <li>Use <code>addJavaScriptInterface()</code> with particular care because it allows JavaScript to invoke operations     that are normally reserved for Android applications. If you use it, expose <code>addJavaScriptInterface()</code>     only to web pages from which all input is trustworthy</li> <li>Expose a<code>ddJavaScriptInterface()</code> only to JavaScript that is contained within your application APK</li> <li>When sharing data between two apps that you control or own, use signature-based permissions</li> </ul> <pre><code>&lt;manifest xmlns:android=&lt;link to android schemas ...&gt;\n    package=\"com.example.myapp\"&gt;\n    &lt;permission android:name=\"my_custom_permission_name\"\n                android:protectionLevel=\"signature\" /&gt;\n</code></pre> <ul> <li>Disallow other apps from accessing Content Provider objects</li> </ul> <pre><code>&lt;manifest xmlns:android=&lt;link to android schemas ...&gt;\n    package=\"com.example.myapp\"&gt;\n    &lt;application ... &gt;\n        &lt;provider\n            android:name=\"android.support.v4.content.FileProvider\"\n            android:authorities=\"com.example.myapp.fileprovider\"\n            ...\n            android:exported=\"false\"&gt;\n            &lt;!-- Place child elements of &lt;provider&gt; here. --&gt;\n        &lt;/provider&gt;\n        ...\n    &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/06-exception-error-handling/","title":"Exception and error handling","text":"<p>Here is a collection of Do's and Don'ts when it comes to exception and error handling, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <ul> <li>Ensure that all method/function calls that return a value have proper error handling and return value checking</li> <li>Ensure that exceptions and error conditions are properly handled</li> <li>Ensure that no system errors can be returned to the user</li> <li>Ensure that the application fails in a secure manner</li> <li>Ensure resources are released if an error occurs.</li> <li>Ensure that stack trace is not thrown to the user.</li> <li>Swallowing exceptions into an empty catch() block is not advised as an audit trail     of the cause of the exception would be incomplete</li> <li>Code that might throw exceptions should be in a try block and code that handles exceptions in a catch block</li> <li>If the language in question has a finally method, use it. The finally method is guaranteed to always be called</li> <li>The finally method can be used to release resources referenced by the method that threw the exception</li> <li>This is very important. An example would be if a method gained a database connection from a pool of connections,     and an exception occurred without finally, the connection object shall not be returned     to the pool for some time (until the timeout)</li> <li>This can lead to pool exhaustion. finally() is called even if no exception is thrown</li> <li>Handle errors and exception conditions in the code</li> <li>Do not expose sensitive information in user sessions</li> <li>When working with a multi-threaded or otherwise asynchronous environment,     ensure that proper locking APIs are used to lock before the if statement;     and unlock when it has finished.</li> <li>Types of errors:</li> <li>The result of business logic conditions not being met</li> <li>The result of the environment wherein the business logic resides fails</li> <li>The result of upstream or downstream systems upon which the application depends fail</li> <li>Technical hardware / physical failure</li> <li>Failures are never expected, but they do occur.     In the event of a failure, it is important not to leave the \"doors\" of the application open     and the keys to other \"rooms\" within the application sitting on the table.     In the course of a logical workflow, which is designed based upon requirements,     errors may occur which can be programmatically handled,     such as a connection pool not being available, or a downstream server not being contactable</li> <li>This is a very tricky guideline.     To fail securely, areas of failure should be examined during the course of the code review.     It should be examined if all resources should be released in the case of a failure     and during the thread of execution if there is any potential for resource leakage,     resources being memory, connection pools, file handles etc     Include a statement that defaults to safe failure</li> <li>The review of code should also include pinpointing areas where the user session should be terminated or invalidated. Sometimes errors may occur which do not make any logical sense from a business logic perspective or a technical standpoint;     e.g: \"\"A logged in user looking to access an account which is not registered to that user     and such data could not be inputted in the normal fashion.\"\"\"</li> <li>Examine the application for 'main()' executable functions and debug harnesses/backdoors     In their basic form, backdoors are user id / password combination with the required privileges, embedded in the code,     which can be used later on by the developer to get into the system without having to request for login credentials</li> <li>Search for commented out code, commented out test code, which may contain sensitive information</li> <li>Search for any calls to the underlying operating system or file open calls and examine the error possibilities</li> </ul>"},{"location":"en/12-appendices/01-implementation-dos-donts/06-exception-error-handling/#logging","title":"Logging","text":"<ul> <li>Ensure that no sensitive information is logged in the event of an error</li> <li>Ensure the payload being logged is of a defined maximum length and that the logging mechanism enforces that length</li> <li>Ensure no sensitive data can be logged; E.g. cookies, HTTP GET method, authentication credentials</li> <li>Examine if the application will audit the actions being taken by the application on behalf of the client     (particularly data manipulation/Create, Read, Update, Delete (CRUD) operations)</li> <li>Ensure successful and unsuccessful authentication is logged</li> <li>Ensure application errors are logged</li> <li>Examine the application for debug logging with the view to logging of sensitive data</li> <li>Ensure change in sensitive configuration information is logged along with user who modified it.     Ensure access to secure storage areas including crypto keys are logged</li> <li>Credentials and sensitive user data should not be logged</li> <li>Does the code include poor logging practice of not declaring Logger object as static and final?</li> <li>Does the code allow entering invalidated user input to the log file?</li> <li>Capture following details for the events:</li> <li>User identification</li> <li>Type of event</li> <li>Date and time</li> <li>Success and failure indication</li> <li>Origination of event</li> <li>Identity or name of affected data, system component, resource, or service (for example, name and protocol)</li> <li>Log file access, privilege elevation, and failures of financial transactions</li> <li>Log all administrators actions. Log all actions taken after privileges are elevated - <code>runas</code> / <code>sudo</code></li> <li>Log all input validation failures</li> <li>Log all authentication attempts, especially failures</li> <li>Log all access control failures</li> <li>Log all apparent tampering events, including unexpected changes to state data</li> <li>Log attempts to connect with invalid or expired session tokens</li> <li>Log all system exceptions</li> <li>Log all administrative functions, including changes to the security configuration settings</li> <li>Log all backend TLS connection failures</li> <li>Log cryptographic module failures</li> <li>Use a cryptographic hash function to validate log entry integrity</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/07-file-management/","title":"File management","text":"<p>Here is a collection of Do's and Don'ts when it comes to file management, gathered from practical experiences.</p> <ul> <li>Validate all filenames and directories before use, ensuring that there are no special characters     that might lead to accessing an unintended file</li> <li>Use safe directories for all file access except those initiated by the end user     e.g. document saving and restoring to a user-chosen location</li> <li>Use a sub-domain with one way trust for the downloaded files.     Such that any compromise of the sub-domain does not impact the main domain.     Do not save files in the same web context as the application.     Files should either go to the content  server or in the database</li> <li>Have at least 64 bits of randomness in all temporary file names</li> <li>where applicable, require authentication before allowing a file to be uploaded</li> <li>Limit the type of files that can be uploaded to only those types that are needed for business purposes</li> <li>Validate uploaded files are the expected type by checking file headers</li> <li>Prevent or restrict the uploading of any file that may be interpreted by the web server</li> <li>Turn off execution privileges on file upload directories</li> <li>Implement safe uploading in UNIX by mounting the targeted file directory as a logical drive     using the associated path or the chrooted environment</li> <li>When referencing existing files, use an allow list of allowed file names and types.     Validate the value of the parameter being passed and if it does not match one of the expected values,     either reject it or use a hard coded default file value for the content instead</li> <li>Do not pass user supplied data into a dynamic redirect.     If this must be allowed, then the redirect should accept only validated, relative path URLs</li> <li>Do not pass directory or file paths, use index values mapped to pre-defined list of paths</li> <li>Never send the absolute file path to the client</li> <li>Ensure application files and resources are read-only</li> <li>Scan user uploaded files for viruses and malware</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/01-implementation-dos-donts/08-memory-management/","title":"Memory management","text":"<p>Here is a collection of Do's and Don'ts when it comes to memory management, gathered from practical experiences.</p> <ul> <li>Check that the buffer is as large as specified</li> <li>When using functions that accept a number of bytes to copy, such as <code>strncpy()</code>,     be aware that if the destination buffer size is equal to the source buffer size,     it may not NULL-terminate the string</li> <li>Check buffer boundaries if calling the function in a loop and make sure there is no danger     of writing past the allocated space</li> <li>Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions</li> <li>Specifically close resources, do not rely on garbage collection. (for example connection objects, file handles, etc.)</li> <li>Properly free allocated memory upon the completion of functions and at all exit points.</li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/02-verification-dos-donts/","title":"Overview","text":"<p>Verification is one of the business functions described by the OWASP SAMM.</p> <p>Verification takes skill and knowledge, so it is important to build on the existing experience contained in these Do's and Dont's.</p> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue.</p>"},{"location":"en/12-appendices/02-verification-dos-donts/01-secure-environment/","title":"Secure environment","text":"<p>Here is a collection of Do's and Don'ts when it comes to creating a secure environment, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <ul> <li> <p>The WEB-INF directory tree contains web application classes, pre-compiled JSP files, server side libraries,     session information, and files such as <code>web.xml</code> and <code>webapp.properties</code>.     So be sure the code base is identical to production.     Ensuring that we have a \u201csecure code environment\u201d is also an important part of     an application secure code inspection.</p> </li> <li> <p>Use a \u201cdeny all\u201d rule to deny access and then grant access on need basis.</p> </li> <li> <p>In Apache HTTP server, ensure directories like WEB-INF and META-INF are protected.     If permissions for a directory and subdirectories are specified in <code>.htaccess</code> file,     ensure that it is protected using the \u201cdeny all\u201d rule.</p> </li> <li> <p>While using Struts framework, ensure that JSP files are not accessible directly     by denying access to <code>*.jsp</code> files in <code>web.xml</code>.</p> </li> <li> <p>Maintain a clean environment. remove files that contain source code but are not used by the application.</p> </li> <li> <p>Ensure production environment does not contain any source code / development tools     and that the production environment contains only compiled code / executables.</p> </li> <li> <p>Remove test code / debug code (that might contain backdoors).     Commented code can also be removed as at times, it might contain sensitive data. Remove file metadata e.g., .git</p> </li> <li> <p>Set \u201cDeny All\u201d in security constraints (for the roles being set up)     while setting up the application on the web server.</p> </li> <li> <p>The listing of HTTP methods in security constraints works in a similar way to deny-listing.     Any verb not explicitly listed is allowed for execution. Hence use \u201cDeny All\u201d     and then allow the methods for the required roles.     This setting carries weightage while using \u201cAnonymous User\u201d role.     For example, in Java, remove all <code>&lt;http-method&gt;</code> elements from <code>web.xml</code> files.</p> </li> <li> <p>Configure web and application server to disallow HEAD requests entirely.</p> </li> <li> <p>Comments on code and Meta tags pertaining to the IDE used or technology used to develop the application     should be removed. Some comments can divulge important information regarding bugs in code     or pointers to functionality. This is particularly important with server side code such as JSP and ASP files.</p> </li> <li> <p>Search for any calls to the underlying operating system or file open calls and examine the error possibilities.</p> </li> <li> <p>Remove unused dependencies, unnecessary features, components, files, and documentation.</p> </li> <li> <p>Only obtain components from official sources over secure links.     Prefer signed packages to reduce the chance of including a modified, malicious component</p> </li> <li> <p>Monitor for libraries and components that are unmaintained or do not create security patches for older versions.     If patching is not possible, consider deploying a virtual patch to monitor, detect,     or protect against the discovered issue.</p> </li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/02-verification-dos-donts/02-system-hardening/","title":"System hardening","text":"<p>Here is a collection of Do's and Don'ts when it comes to system hardening, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <ul> <li> <p>The WEB-INF directory tree contains web application classes, pre-compiled files, server side libraries,     session information, and files such as <code>web.xml</code> and <code>webapp.properties</code>. Secure these files</p> </li> <li> <p>In Apache HTTP server, ensure directories like WEB-INF and META-INF are protected.     If permissions for a directory and subdirectories are specified in <code>.htaccess</code> file,     ensure that it is protected using the \u201cdeny all\u201d rule.</p> </li> <li> <p>While using Struts framework, ensure that JSP files are not accessible directly     by denying access to <code>.jsp</code> files in <code>web.xml</code>.</p> </li> <li> <p>Maintain a clean environment. Remove files that contain source code but are not used by the application.     Remove unused dependencies, unnecessary features, components, files, and documentation.</p> </li> <li> <p>Ensure production environment does not contain any source code / development tools     and that the production environment contains only compiled code / executables.</p> </li> <li> <p>Remove test code / debug code (that might contain backdoors).     Commented code can also be removed as at times it might contain sensitive data.     Remove file metadata (e.g. <code>.git</code>)</p> </li> <li> <p>Set \u201cDeny All\u201d in security constraints (for the roles being set up)     while setting up the application on the web server.</p> </li> <li> <p>The listing of HTTP methods in security constraints works in a similar way to deny-listing.     Any verb not explicitly listed is allowed for execution.     Hence use \u201cDeny All\u201d and then allow the methods for the required roles.     This setting is particularly important using \u201cAnonymous User\u201d role.     For example, in Java, remove all <code>&lt;http-method&gt;</code> elements from <code>web.xml</code> files.</p> </li> <li> <p>Prevent disclosure of your directory structure in the robots.txt file     by placing directories not intended for public indexing into an isolated parent directory.     Then \"\"Disallow\"\" that entire parent directory in the robots.txt file     rather than disallowing each individual directory</p> </li> <li> <p>Configure web and application server to disallow HEAD requests entirely.</p> </li> <li> <p>Comments on code and Meta tags pertaining to the IDE used or technology used to develop the application     should be removed.</p> </li> <li> <p>Some comments can divulge important information regarding bugs in code or pointers to functionality.     This is particularly important with server side code such as JSP and ASP files.</p> </li> <li> <p>Search for any calls to the underlying operating system or file open calls and examine the error possibilities.</p> </li> <li> <p>Only obtain components from official sources over secure links.     Prefer signed packages to reduce the chance of including a modified, malicious component</p> </li> <li> <p>Monitor for libraries and components that are unmaintained or do not create security patches for older versions.     If patching is not possible, consider deploying a virtual patch to monitor, detect,     or protect against the discovered issue.</p> </li> <li> <p>Remove backup or old files that are not in use</p> </li> <li> <p>Change/disable all default account passwords</p> </li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"en/12-appendices/02-verification-dos-donts/03-open-source-software/","title":"Open Source software","text":"<p>Here is a collection of Do's and Don'ts when it comes to Open Source software, gathered from practical experiences. Some of these are language specific and others have more general applicability.</p> <ul> <li>Static Code Analysis (for licensing and dependencies)</li> <li>Consuming open source software has a heavy dependency on the license       under which the open source software is available.</li> <li>Following are some URLs to licensing details:<ul> <li><code>https://choosealicense.com/licenses/</code></li> <li><code>https://tldrlegal.com/</code></li> <li><code>https://creativecommons.org/licenses/by/4.0/</code></li> </ul> </li> </ul> <p>It is important for the organization to have a policy statement for consumption of open source software. From a licensing perspective and the implication of using a open source software incorrectly, maintain a procedure for approval of usage of selected open source software. This could be in the form of a workflow or obtaining security approvals for the chosen open source software We realize it could be challenging, but if feasible, maintain a list of approved open source software</p> <ul> <li>Address vulnerabilities with: Binaries / pre-compiled code / packages     where source code sharing is not a part of the license (Examples executables / NuGets)</li> <li>Where possible use version pinning</li> <li>Where possible use integrity verification</li> <li>Check for vulnerabilities for the selected binaries in vulnerability disclosure databases like<ul> <li>CVE database (<code>https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=bouncy+castle</code>)</li> <li>VulnDB (<code>https://vuldb.com/?id.173918</code>)</li> </ul> </li> <li>If within the budget of your organization, use an SCA tool to scan for vulnerabilities</li> <li>Always vet and perform due-diligence on third-party modules that you install       in order to confirm their health and credibility.</li> <li>Hold-off on upgrading immediately to new versions; allow new package versions some time to circulate       before trying them out.</li> <li>Before upgrading, make sure to review change log and release notes for the upgraded version.</li> <li>When installing packages make sure to add the --ignore-scripts suffix to disable the execution       of any scripts by third-party packages.</li> <li>Consider adding ignore-scripts to your <code>.npmrc</code> project file, or to your global npm configuration.</li> <li>If you use npm, run <code>npm outdated</code>, to see which packages are out of date</li> <li> <p>Typosquatting is an attack that relies on mistakes made by users, such as typos.       With typosquatting, bad actors could publish malicious modules to the npm registry with names       that look much like existing popular modules.To address this vulnerability verify your packages       before consuming them</p> </li> <li> <p>Address vulnerabilities with: where source code sharing is a part of the license</p> </li> <li>GitHub CodeQL / third party tool</li> <li> <p>If within the budget of your organization, use an SCA tool to scan for vulnerabilities</p> </li> <li> <p>Security Testing: Binaries / pre-compiled code / packages     where source code sharing is not a part of the license (Examples executables / NuGets)</p> </li> <li>Perform Dynamic application analysis</li> <li>Perform Pen testing</li> <li> <p>Verify which tokens are created for your user or revoke tokens in cases of emergency;       use npm token list or npm token revoke respectively.</p> </li> <li> <p>Security Testing: where source code sharing is a part of the license</p> </li> <li>Perform Static code analysis</li> <li>Perform Dynamic application analysis</li> <li> <p>Perform Pen testing.</p> </li> <li> <p>Third Party Software and Libraries (hive off to OWASP Dependency Tracker)</p> </li> <li>Address supply chain risk with: Binaries / pre-compiled code / packages       where source code sharing is not a part of the license (Examples executables / NuGets)</li> <li>Use  signed binaries / packages</li> <li>Reference private feed in your code</li> <li>Use controlled scopes</li> <li>Lock files</li> <li> <p>Avoid publishing secrets to the npm registry (secrets may end up leaking into source control       or even a published package on the public npm registry)</p> </li> <li> <p>Address supply chain risk with: where source code sharing is a part of the license</p> </li> <li>[GitHub]Check for dependency graph</li> <li>[GitHub]Dependabot alerts</li> <li> <p>[GitHub]Commit and tag signatures</p> </li> <li> <p>Monitor Dependencies: Binaries / pre-compiled code / packages     where source code sharing is not a part of the license (Examples executables / NuGets)</p> </li> <li>Use dependency graphs</li> <li> <p>Enable repeatable package restores using lock files</p> </li> <li> <p>Monitor Dependencies: where source code sharing is a part of the license</p> </li> <li>[GitHub]Check for dependency graph</li> <li> <p>[GitHub] Secret scanning</p> </li> <li> <p>Maintaining open source software/components: Binaries / pre-compiled code / packages     where source code sharing is not a part of the license</p> </li> <li>Monitor for deprecated packages</li> <li>Use dependency graphs</li> <li>Lock files</li> <li>Monitor vulnerabilities with:<ul> <li>Check for vulnerabilities for the selected binaries in vulnerability disclosure databases like</li> <li>CVE database (<code>https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=bouncy+castle</code>)</li> <li>VulnDB (<code>https://vuldb.com/?id.173918</code>)</li> </ul> </li> <li> <p>If within the budget of your organization, use an SCA tool to scan for vulnerabilities</p> </li> <li> <p>Copying source code off public domain (internet)     For example source code that is on a blog or in discussion forums like stacktrace or snippets of example on writeups     *Don\u2019t do it!!!*</p> </li> </ul> <p>The OWASP Developer Guide is a community effort; if there is something that needs changing then submit an issue or edit on GitHub.</p>"},{"location":"es/","title":"Introducci\u00f3n","text":"<p>Bienvenido a la Gu\u00eda del Desarrollador OWASP.</p> <p>El Proyecto abierto de seguridad de aplicaciones a nivel mundial (Open Worldwide Application Security Project -OWASP) es una fundaci\u00f3n sin fines de lucro que trabaja para mejorar la seguridad del software. Es una comunidad abierta dedicada a lograr que las organizaciones sean capaces de concebir, desarrollar, adquirir, operar y mantener aplicaciones en las que se pueda confiar.</p> <p>Junto con el OWASP Top Ten, la Gu\u00eda del Desarrollador es uno de los recursos originales publicado poco despu\u00e9s de que se formara la fundaci\u00f3n OWASP en 2001. La versi\u00f3n 1.0 de la Gu\u00eda del Desarrollador se public\u00f3 en 2002. y desde entonces ha habido varios releases que culminaron en la versi\u00f3n 2.0 en 2005.</p> <p>Desde entonces, la gu\u00eda ha sido revisada exhaustivamente para actualizarla. Las \u00faltimas versiones son 4.x porque la versi\u00f3n 3.0 nunca se lanz\u00f3.</p> <p>El prop\u00f3sito de esta gu\u00eda es proporcionar una introducci\u00f3n a los conceptos de seguridad y una referencia \u00fatil para desarrolladores de aplicaciones/sistemas. Generalmente describe pr\u00e1cticas de seguridad utilizando los consejos dados en el Modelo de madurez de aseguramiento de software OWASP (SAMM) y describe los proyectos de OWASP. referenciado en el proyecto OWASP Application Security Wayfinder.</p> <p>Esta gu\u00eda no pretende replicar las muchas excelentes fuentes  sobre temas de seguridad espec\u00edficos; rara vez intenta entrar en detalles sobre un tema y, en cambio, proporciona enlaces para profundizar m\u00e1s en estos temas de seguridad. En cambio, el contenido de la Gu\u00eda del Desarrollador pretende ser accesible e introducir conceptos pr\u00e1cticos de seguridad. y proporcionar suficientes detalles para que los desarrolladores comiencen a utilizar varias herramientas y documentos de OWASP.</p> <p>Todos los proyectos y herramientas de OWASP descritos en esta gu\u00eda se pueden descargar y utilizar de forma gratuita. Todos los proyectos de OWASP son de c\u00f3digo abierto; Participe si est\u00e1 interesado en mejorar la seguridad de las aplicaciones.</p>"},{"location":"es/#audiencia","title":"Audiencia","text":"<p>La Gu\u00eda del Desarrollador de OWASP ha sido escrita por la comunidad de seguridad para ayudar a los desarrolladores de software a escribir datos s\u00f3lidos y aplicaciones seguras y protegidas. Los desarrolladores deber\u00edan intentar familiarizarse con la mayor parte de esta gu\u00eda; esto ayudar\u00e1 a escribir aplicaciones que sean m\u00e1s seguras.</p> <p>Se puede considerar esta gu\u00eda como una fuente de referencia cruzada de las numerosas herramientas y documentos que OWASP proporciona a los desarrolladores.</p> <p>O puede considerar que el prop\u00f3sito de esta gu\u00eda es responder a \u00e9sta necesidad: \u201cSoy desarrollador y necesito una gu\u00eda de referencia para navegar por las numerosas herramientas de seguridad y actividades de seguridad que s\u00e9 que deber\u00eda realizar\u201c.</p> <p>O consid\u00e9relo como una colecci\u00f3n de art\u00edculos que presentan a los desarrolladores el amplio dominio de la seguridad de las aplicaciones.</p> <p>O puede considerar esta gu\u00eda como un documento complementario del proyecto OWASP Integration Standards: el Buscador de Seguridad de aplicaciones(Application Security Wayfinder) que mapea las numerosas herramientas de OWASP, proyectos y documentos con la Gu\u00eda del Desarrollador que proporciona algo de contexto.</p> <p></p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambio entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/02-foundations/","title":"Descripci\u00f3n","text":"<p>Existen varios conceptos y terminolog\u00eda fundamentales que se utilizan com\u00fanmente en la seguridad del software.</p> <p>Aunque muchos de estos conceptos son complejos de implementar y se basan en una teor\u00eda muy estricta, los principios suelen ser bastante sencillos y accesibles para todos los ingenieros de software.</p> <p>Una comprensi\u00f3n razonable de estos conceptos fundamentales permite a los equipos de desarrollo entender e implementar Seguridad de software para la aplicaci\u00f3n o sistema en desarrollo. Esta Gu\u00eda del Desarrollador solo puede brindar una breve descripci\u00f3n general de estos conceptos. para lograr un conocimiento m\u00e1s profundo, consulte los numerosos textos sobre seguridad, como El conjunto de conocimientos sobre seguridad cibern\u00e9tica (The Cyber Security Body Of Knowledge).</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/02-foundations/01-security-fundamentals/","title":"Fundamentos de seguridad","text":"<p>Los principios fundamentales de la seguridad de aplicaciones se basan en los conceptos de seguridad a los que se hace referencia en esta Gu\u00eda del Desarrollador. Esta secci\u00f3n tiene como objetivo proporcionar una introducci\u00f3n a los principios fundamentales con los que cualquier equipo de desarrollo debe estar familiarizado.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#modelo-de-madurez-de-seguridad-de-software","title":"Modelo de madurez de Seguridad de Software","text":"<p>El modelo de madurez de Aseguramiento de Software (SAMM) proporciona contexto para el alcance de la seguridad del software y los fundamentos de las buenas pr\u00e1cticas de seguridad:</p> <ul> <li>Gobernanza</li> <li>Dise\u00f1o</li> <li>Implementaci\u00f3n</li> <li>Verificaci\u00f3n</li> <li>Operaciones</li> </ul> <p>El modelo SAMM describe estos fundamentos de seguridad de software como funciones comerciales, que a su vez se dividen en Pr\u00e1cticas Comerciales. El Modelo de Madurez de Aseguramiento de Software de OWASP (SAMM) se utiliza en esta Gu\u00eda del Desarrollador; la mayor\u00eda de las secciones de la Gu\u00eda del desarrollador hacen referencia a al menos una de las funciones o pr\u00e1cticas comerciales de SAMM.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#triada-cia","title":"Tr\u00edada CIA","text":"<p>La seguridad consiste simplemente en controlar qui\u00e9n puede interactuar con la informaci\u00f3n, qu\u00e9 pueden hacer con ella y cu\u00e1ndo pueden interactuar con ella. Estas caracter\u00edsticas de seguridad se pueden describir utilizando la tr\u00edada CIA.</p> <p>CIA significa Confidencialidad, Integridad y Disponibilidad y generalmente se representa como un tri\u00e1ngulo que representa los fuertes v\u00ednculos entre sus tres principios. Esta tr\u00edada se considera los pilares de la seguridad de las aplicaciones, a menudo, la confidencialidad, la integridad o la disponibilidad se utilizan como propiedades de los datos o procesos dentro de un sistema determinado. La tr\u00edada de la CIA se puede ampliar con la tr\u00edada AAA: Autorizaci\u00f3n, Autenticaci\u00f3n y Auditor\u00eda.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#confidencialidad","title":"Confidencialidad","text":"<p>La confidencialidad es la protecci\u00f3n de los datos contra la divulgaci\u00f3n no autorizada; se trata de garantizar que s\u00f3lo aquellos con la autorizaci\u00f3n correcta puedan acceder a los datos y se aplica tanto a los datos en reposo como a los datos en tr\u00e1nsito. La confidencialidad tambi\u00e9n est\u00e1 relacionada con el concepto m\u00e1s amplio de privacidad de datos.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#integridad","title":"Integridad","text":"<p>La integridad consiste en proteger los datos contra modificaciones no autorizadas o garantizar la confiabilidad de los datos. El concepto contiene la noci\u00f3n de integridad de los datos (los datos no han sido modificados accidental o deliberadamente) y la noci\u00f3n de integridad de la fuente (los datos provienen de una fuente leg\u00edtima o fueron modificados por ella).</p>"},{"location":"es/02-foundations/01-security-fundamentals/#disponibilidad","title":"Disponibilidad","text":"<p>La disponibilidad consiste en garantizar la presencia de informaci\u00f3n o recursos. Este concepto se basa no s\u00f3lo en la disponibilidad de los datos en s\u00ed, por ejemplo mediante el uso de replicaci\u00f3n de datos, sino tambi\u00e9n sobre la protecci\u00f3n de los servicios que proporcionan acceso a los datos, por ejemplo mediante el uso del equilibrio de carga.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#triada-aaa","title":"Tr\u00edada AAA","text":"<p>La tr\u00edada de la CIA a menudo se ampl\u00eda con Autenticaci\u00f3n, Autorizaci\u00f3n y Auditor\u00eda, ya que est\u00e1n estrechamente vinculadas a los conceptos de la CIA. La CIA tiene una fuerte dependencia de la autenticaci\u00f3n y la autorizaci\u00f3n; la confidencialidad y la integridad de los datos sensibles no pueden garantizarse sin ellos. Se agrega la auditor\u00eda, ya que puede proporcionar el mecanismo para garantizar pruebas de cualquier interacci\u00f3n con el sistema.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>La autenticaci\u00f3n consiste en confirmar la identidad de la entidad que desea interactuar con un sistema seguro. Por ejemplo, la entidad podr\u00eda ser un cliente automatizado o un actor humano; en cualquier caso, se requiere autenticaci\u00f3n para una aplicaci\u00f3n segura.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#autorizacion","title":"Autorizaci\u00f3n","text":"<p>La autorizaci\u00f3n consiste en especificar derechos de acceso a recursos seguros (datos, servicios, archivos, aplicaciones, etc.). Estos derechos describen los privilegios o niveles de acceso relacionados con los recursos que se est\u00e1n protegiendo. La autorizaci\u00f3n suele ir precedida de una autenticaci\u00f3n exitosa.</p>"},{"location":"es/02-foundations/01-security-fundamentals/#auditoria","title":"Auditor\u00eda","text":"<p>La auditor\u00eda consiste en realizar un seguimiento de los eventos a nivel de implementaci\u00f3n, as\u00ed como de los eventos a nivel de dominio que tienen lugar en un sistema. Esto ayuda a proporcionar no repudio, lo que significa que los cambios o acciones en el sistema protegido son innegables. La auditor\u00eda puede proporcionar no s\u00f3lo informaci\u00f3n t\u00e9cnica sobre el sistema en ejecuci\u00f3n, pero tambi\u00e9n prueba de que se han realizado acciones particulares. Las preguntas t\u00edpicas que se responden mediante la auditor\u00eda son \"\u00bfQui\u00e9n hizo Qu\u00e9, Cu\u00e1ndo y potencialmente C\u00f3mo?\"</p>"},{"location":"es/02-foundations/01-security-fundamentals/#vulnerabilidades","title":"Vulnerabilidades","text":"<p>NIST define una vulnerabilidad como 'Debilidad en un sistema de informaci\u00f3n, procedimientos de seguridad del sistema, controles internos o implementaci\u00f3n que podr\u00eda ser explotada o activada por una fuente de amenaza.'</p> <p>Hay muchas debilidades o errores en toda aplicaci\u00f3n grande, pero el t\u00e9rmino vulnerabilidad generalmente est\u00e1 reservado. para aquellas debilidades o errores en los que existe el riesgo de que un actor de amenazas pueda explotarlos utilizando un vector de amenazas.</p> <p>Las vulnerabilidades de seguridad m\u00e1s conocidas son:</p> <ul> <li>Clickjacking</li> <li>Credential Stuffing</li> <li>Fugas Cross-site</li> <li>Ataques de Denegaci\u00f3n de Servicio (DoS)</li> <li>Ataques basado en DOM ataques XSS incluido destrucci\u00f3n de DOM</li> <li>IDOR (Referencia directa a objetos inseguros)</li> <li>Inyecci\u00f3n incluyendo Inyecci\u00f3n de comando OS y XXE</li> <li>Ataques de inyecci\u00f3n espec\u00edfico de LDAP</li> <li>Contaminaci\u00f3n de prototipo</li> <li>Ataques SSRF</li> <li>Inyecci\u00f3n SQL y el uso de parametrizaci\u00f3n de consultas</li> <li>Redirecciones y reenv\u00edos no validados</li> <li>Ataques XSS y evasi\u00f3n de filtro XSS</li> </ul>"},{"location":"es/02-foundations/01-security-fundamentals/#http-y-html","title":"HTTP y HTML","text":"<p>Aunque no son un elemento fundamental de seguridad como tal, las aplicaciones web dependen de comunicaciones HTTP y HTML. Tanto los desarrolladores de aplicaciones como los ingenieros de seguridad deben tener un buen conocimiento de HTTP y del lenguaje HTML junto con sus diversos controles de seguridad.</p> <p>La mayor\u00eda de los equipos de desarrollo de aplicaciones estar\u00e1n familiarizados con las comunicaciones HTTP y el est\u00e1ndar HTML, pero si es necesario consulte la formaci\u00f3n del Consorcio W3 o de las Escuelas W3. La serie de hojas de referencia de OWASP proporciona a los desarrolladores de aplicaciones web la informaci\u00f3n necesario para producir software seguro:</p> <ul> <li>La hoja de referencia Seguridad HTML5 describe una amplia gama de controles,   alineado con el actual Est\u00e1ndar de vida HTML</li> <li>Consulte la hoja de referencia para CSS Seguridad de Hojas de estilo en cascada</li> <li>Los encabezados HTTP deben ser seguros; consulte la hoja de referencia HTTP Security Response Headers</li> <li>Considere seriamente Seguridad estricta de transporte HTTP</li> <li>Si la aplicaci\u00f3n tiene una funci\u00f3n de carga de archivos, siga la hoja de referencia de Carga de archivos</li> <li>Aseg\u00farese de que la pol\u00edtica de seguridad de contenido est\u00e9 implementada con la hoja de referencia   Pol\u00edtica de seguridad de contenido</li> <li>\u00bfUtiliza JWT para una aplicaci\u00f3n Java? Consulte la hoja de referencia de JSON Web Token</li> <li>\u00bfAlmacenar o enviar objetos? Consulte la hoja de referencia Deserializaci\u00f3n</li> </ul>"},{"location":"es/02-foundations/01-security-fundamentals/#referencias","title":"Referencias","text":"<ul> <li>WHATWG Est\u00e1ndar de vida HTML</li> <li>Serie de Hojas de referencia de OWASP</li> <li>Modelo de Madurez de Aseguramiento de Software de OWASP(SAMM)</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/02-foundations/02-secure-development/","title":"Desarrollo e integraci\u00f3n segura","text":"<p>El desarrollo seguro se describe en las funciones de negocio de Dise\u00f1o, Implementaci\u00f3n y Verificaci\u00f3n del Modelo de Madurez de Aseguramiento de Software de OWASP (SAMM-Software Assurance Maturity Model).</p>"},{"location":"es/02-foundations/02-secure-development/#introduccion","title":"Introducci\u00f3n","text":"<p>La mejor introducci\u00f3n al desarrollo pr\u00e1ctico de software seguro es el art\u00edculo de OWASP sobre Fragmentaci\u00f3n de la Seguridad de Aplicaciones:</p> <p>O c\u00f3mo me preocup\u00e9 menos y me apoy\u00e9 en los hombros de gigantes. - Spyros Gasteratos, Elie Saad</p> <p>Gran parte del material de esta secci\u00f3n fue extra\u00eddo del proyecto Est\u00e1ndares de Integraci\u00f3n de OWASP.</p>"},{"location":"es/02-foundations/02-secure-development/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>Casi todo el software moderno se desarrolla de manera iterativa, pasando por diferentes fases, como la identificaci\u00f3n de requisitos del cliente, implementaci\u00f3n y testeo. Estas fases se vuelven a aplicar de forma c\u00edclica a lo largo de la vida \u00fatil de la aplicaci\u00f3n. A continuaci\u00f3n se muestra un Ciclo de Vida de Desarrollo de Software (SDLC) te\u00f3rico; en la pr\u00e1ctica, puede haber m\u00e1s o menos fases seg\u00fan los procesos adoptados por la organizaci\u00f3n.</p> <p></p> <p>Con el creciente n\u00famero y sofisticaci\u00f3n de los ataques contra casi todas las aplicaciones o sistemas empresariales, la mayor\u00eda de las empresas han adoptado un Ciclo de Vida de Desarrollo de Software (SDLC) seguro. El SDLC seguro nunca debe ser un ciclo de vida separado del ciclo de vida de desarrollo de software existente, sino que debe ser siempre el mismo ciclo de vida de desarrollo que antes, pero con acciones de seguridad integradas en cada fase. De lo contrario, las acciones de seguridad pueden ser dejadas de lado por equipos de desarrollo ocupados. Tenga en cuenta que aunque el SDLC Seguro podr\u00eda escribirse como 'SSDLC', casi siempre se escribe como 'SDLC'.</p> <p>DevOps integra y automatiza muchas de las fases del SDLC e implementa canales(pipelines) de Integraci\u00f3n Continua (CI) y Entrega/Despliegue Continuo (CD) para proporcionar gran parte de la automatizaci\u00f3n del SDLC.</p> <p>DevOps y los canales han sido explotados con \u00e9xito con graves consecuencias a gran escala, por lo que, de manera similar al SDLC, muchas de las acciones de DevOps tambi\u00e9n han incorporado seguridad. DevOps seguro, o DevSecOps, incorpora pr\u00e1cticas de seguridad en las actividades de DevOps para protegerse contra ataques y proporcionar al SDLC pruebas de seguridad automatizadas.</p> <p>Ejemplos de c\u00f3mo DevSecOps est\u00e1 \"incorporando seguridad\" son la provisi\u00f3n de Pruebas de Seguridad de Aplicaciones Interactivas, Est\u00e1ticas y Din\u00e1micas (IAST, SAST y DAST) y la implementaci\u00f3n de seguridad en la cadena de suministro, y hay muchas otras actividades de seguridad que se pueden aplicar. Consulte la hoja de Referencia de Seguridad CI/CD para conocer los \u00faltimos controles de seguridad de DevSecOps.</p>"},{"location":"es/02-foundations/02-secure-development/#ciclo-de-vida-de-desarrollo-seguro","title":"Ciclo de vida de desarrollo seguro","text":"<p>Refiri\u00e9ndonos al ciclo de desarrollo de Wayfinder para Seguridad de Aplicaciones de OWASP, hay cuatro fases iterativas durante el desarrollo de la aplicaci\u00f3n: Requerimientos, Dise\u00f1o, Implementaci\u00f3n y Verificaci\u00f3n. Las otras fases se realizan de manera menos iterativa en el ciclo de desarrollo, pero forman una parte igualmente importante del SDLC: An\u00e1lisis de Brechas, M\u00e9tricas, Operaci\u00f3n y tambi\u00e9n Formaci\u00f3n y Construcci\u00f3n de Cultura.</p> <p>Todas estas fases del SDLC deber\u00edan tener actividades de seguridad integradas, en lugar de realizarse como actividades separadas. Si la seguridad se integra en estas fases, la sobrecarga se vuelve mucho menor y la resistencia de los equipos de desarrollo disminuye. El objetivo es que el SDLC seguro se convierta en un proceso tan familiar como antes, con los equipos de desarrollo asumiendo plena responsabilidad de las actividades de seguridad dentro de cada fase.</p> <p>Hay muchas herramientas y recursos de OWASP para ayudar a integrar la seguridad en el SDLC.</p> <ul> <li>Requerimientos: esta fase determina los requisitos funcionales, no funcionales y de seguridad para la aplicaci\u00f3n. Los requerimientos deben revisarse peri\u00f3dicamente y verificarse su completitud y validez, y vale la pena considerar varias herramientas de OWASP para ayudar con esto;</li> <li>el Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) proporciona a los desarrolladores     una lista de requisitos para el desarrollo seguro,</li> <li> <p>el proyecto de Seguridad de Aplicaciones M\u00f3viles proporciona un est\u00e1ndar de seguridad     para aplicaciones m\u00f3viles y SecurityRAT ayuda a identificar un conjunto inicial de requisitos de seguridad.</p> </li> <li> <p>Dise\u00f1o: es importante dise\u00f1ar la seguridad en la aplicaci\u00f3n - nunca es demasiado tarde para hacerlo, pero cuanto antes mejor y m\u00e1s f\u00e1cil de hacer. OWASP proporciona dos herramientas, Modelado de Amenazas Pyth\u00f3nico y Threat Dragon, para el modelado de amenazas junto con la gamificaci\u00f3n de seguridad usando Cornucopia.</p> </li> <li> <p>Implementaci\u00f3n: el proyecto Top 10 Controles Proactivos de OWASP afirma que estos son \"los controles y categor\u00edas de control m\u00e1s importantes que todo arquitecto y desarrollador deber\u00eda incluir sin duda, al 100% en cada proyecto\" y \u00e9ste ciertamente es un buen consejo. Implementar estos controles puede proporcionar un alto grado de confianza en que la aplicaci\u00f3n o sistema ser\u00e1 razonablemente seguro. OWASP proporciona dos bibliotecas que se pueden incorporar en aplicaciones web, la librer\u00eda de control de seguridad API de Seguridad Empresarial (ESAPI) y CSRFGuard para mitigar el riesgo de ataques de Falsificaci\u00f3n de Solicitudes entre Sitios (CSRF), que ayudan a implementar estos controles proactivos. Adem\u00e1s, la serie de Hojas de Referencia de OWASP es una valiosa fuente de informaci\u00f3n y consejos sobre todos los aspectos de la seguridad de las aplicaciones.</p> </li> <li> <p>Verificaci\u00f3n: OWASP proporciona un n\u00famero relativamente grande de proyectos que ayudan con las pruebas y la verificaci\u00f3n. Este es el tema de una secci\u00f3n en esta Gu\u00eda del Desarrollador, y los proyectos est\u00e1n enumerados al final de esta secci\u00f3n.</p> </li> <li> <p>Formaci\u00f3n: los equipos de desarrollo necesitan continuamente formaci\u00f3n en seguridad. Aunque no forma parte del ciclo iterativo interno del SDLC, la formaci\u00f3n todav\u00eda debe considerarse en el ciclo de vida del proyecto. OWASP proporciona muchos entornos y materiales de formaci\u00f3n - vea la lista al final de esta secci\u00f3n.</p> </li> <li> <p>Desarrollo de Cultura: una buena cultura de seguridad dentro de una organizaci\u00f3n empresarial ayudar\u00e1 enormemente a mantener seguras las aplicaciones y los sistemas. Hay muchas actividades que en conjunto ayudan a crear la cultura de seguridad, el proyecto Cultura de Seguridad de OWASP entra en m\u00e1s detalle sobre estas actividades, y un buen programa de Campeones de Seguridad dentro del negocio es fundamental para una buena postura de seguridad. La Gu\u00eda de Defensores de Seguridad de OWASP proporciona orientaci\u00f3n y material para crear defensores de seguridad dentro de los equipos de desarrollo - idealmente cada equipo deber\u00eda tener un defensor de seguridad que tenga un inter\u00e9s especial en la seguridad y haya recibido formaci\u00f3n adicional, permitiendo al equipo integrar la seguridad.</p> </li> <li> <p>Operaciones: la Gu\u00eda de DevSecOps de OWASP explica c\u00f3mo implementar mejor un canal(pipeline) seguro, utilizando mejores pr\u00e1cticas y herramientas de automatizaci\u00f3n para ayudar a reducir tiempo y costos al resolver los problemas de seguridad ya en etapas tempranas del proyecto(principio shift-left). Consulte la Gu\u00eda de DevSecOps para obtener m\u00e1s informaci\u00f3n sobre cualquiera de los temas dentro de DevSecOps y en particular las secciones sobre Operaciones.</p> </li> <li> <p>Cadena de suministro: los ataques que aprovechan la cadena de suministro pueden ser devastadores y ha habido varios casos de alto perfil de productos que han sido explotados con \u00e9xito. Una Lista de Materiales de Software (SBOM-Software Bill of Materials) es el primer paso para evitar estos ataques y vale la pena utilizar el est\u00e1ndar CycloneDX de OWASP para la Lista de Materiales (BOM-Bill of Materials) est\u00e1ndar para la reducci\u00f3n de riesgos en la cadena de suministro. Adem\u00e1s, el proyecto Dependency-Track de OWASP es una Plataforma de An\u00e1lisis Continuo de SBOM que puede ayudar a prevenir estas explotaciones de la cadena de suministro proporcionando control del SBOM.</p> </li> <li> <p>Dependencias de terceros: mantener un seguimiento de qu\u00e9 bibliotecas de terceros se incluyen en la aplicaci\u00f3n, y qu\u00e9 vulnerabilidades tienen, es f\u00e1cilmente automatizable. Muchos repositorios p\u00fablicos como github y gitlab ofrecen este servicio junto con algunos proveedores comerciales. OWASP proporciona la herramienta de An\u00e1lisis de Composici\u00f3n de Software (SCA-Software Composition Analysis) Dependency-Check para rastrear bibliotecas externas.</p> </li> <li> <p>Pruebas de seguridad de aplicaciones: hay varios tipos de pruebas de seguridad que se pueden automatizar en solicitudes de admisi\u00f3n de c\u00f3digo (pull-requests), fusiones(merges) o compilaciones nocturnas, o incluso manualmente, pero son m\u00e1s poderosas cuando se automatizan. Com\u00fanmente hay Pruebas de Seguridad de Aplicaciones Est\u00e1ticas (SAST-Static Application Security Testing), que analizan el c\u00f3digo sin ejecutarlo, y Pruebas de Seguridad de Aplicaciones Din\u00e1micas (DAST-Dynamic Application Security Testing), que aplican entrada a la aplicaci\u00f3n mientras se ejecuta en un sandbox u otros tipos de entornos aislados. Las Pruebas de Seguridad de Aplicaciones Interactivas (IAST-Interactive Application Security Testing) est\u00e1n dise\u00f1adas para ejecutarse manualmente as\u00ed como automatizadas, y proporcionan retroalimentaci\u00f3n instant\u00e1nea sobre las pruebas mientras se ejecutan.</p> </li> </ul>"},{"location":"es/02-foundations/02-secure-development/#lecturas-adicionales-de-owasp","title":"Lecturas adicionales de OWASP","text":"<ul> <li>Serie de Hojas de Referencia</li> <li>Hoja de Referencia de Seguridad CI/CD</li> <li>Cornucopia</li> <li>Est\u00e1ndar de Lista de Materiales (BOM) CycloneDX</li> <li>Gu\u00eda de DevSecOps</li> <li>Gu\u00eda de Defensores de Seguridad</li> <li>Proyecto de Cultura de Seguridad</li> <li>Top 10 Controles Proactivos</li> </ul>"},{"location":"es/02-foundations/02-secure-development/#proyectos-de-verificacion-de-owasp","title":"Proyectos de verificaci\u00f3n de OWASP","text":"<ul> <li>Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS)</li> <li>Proyecto Amass</li> <li>Code Pulse</li> <li>Defect Dojo</li> <li>Seguridad de Aplicaciones M\u00f3viles (MAS)</li> <li>Nettacker</li> <li>Framework de Pruebas Web Ofensivas (OWTF)</li> <li>Gu\u00eda de Pruebas de Seguridad Web (WSTG)</li> <li>Zed Attack Proxy (ZAP)</li> </ul>"},{"location":"es/02-foundations/02-secure-development/#proyectos-de-formacion-de-owasp","title":"Proyectos de formaci\u00f3n de OWASP","text":"<ul> <li>Proyecto de Seguridad API (API Top 10)</li> <li>Juice Shop</li> <li>Mobile Top 10</li> <li>Security Shepherd</li> <li>Snakes And Ladders</li> <li>Top 10 de Riesgos de Seguridad en Aplicaciones Web</li> <li>WebGoat</li> </ul>"},{"location":"es/02-foundations/02-secure-development/#recursos-de-owasp","title":"Recursos de OWASP","text":"<ul> <li>Librer\u00eda CSRFGuard</li> <li>An\u00e1lisis de Composici\u00f3n de Software (SCA) Dependency-Check</li> <li>Plataforma de An\u00e1lisis Continuo de SBOM Dependency-Track</li> <li>API de Seguridad Empresarial (ESAPI)</li> <li>Proyecto de Est\u00e1ndares de Integraci\u00f3n Wayfinder de Seguridad de Aplicaciones</li> <li>Seguridad de Aplicaciones M\u00f3viles (MAS)</li> <li>Modelado de Amenazas Pyth\u00f3nico</li> <li>Threat Dragon</li> <li>SecurityRAT (Herramienta de Automatizaci\u00f3n de Requisitos)</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/02-foundations/03-security-principles/","title":"Principios de seguridad","text":"<p>Esta secci\u00f3n es una introducci\u00f3n muy breve a algunos conceptos utilizados en el dominio de la seguridad del software, ya que estos pueden no ser familiares para muchos desarrolladores de aplicaciones. La serie de Hojas de Referencia de OWASP proporciona explicaciones m\u00e1s detalladas de estos principios de seguridad, vea las lecturas adicionales al final de esta secci\u00f3n.</p>"},{"location":"es/02-foundations/03-security-principles/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>Hay varios conceptos y t\u00e9rminos utilizados en el dominio de la seguridad que son fundamentales para la comprensi\u00f3n y discusi\u00f3n de la seguridad de aplicaciones. Los arquitectos de seguridad y los ingenieros de seguridad estar\u00e1n familiarizados con estos t\u00e9rminos, y los equipos de desarrollo tambi\u00e9n necesitar\u00e1n esta comprensi\u00f3n para implementar aplicaciones seguras.</p>"},{"location":"es/02-foundations/03-security-principles/#seguridad-por-diseno","title":"Seguridad por Dise\u00f1o","text":"<p>La seguridad no deber\u00eda ser una ocurrencia de \u00faltimo minuto o un complemento. Al desarrollar sistemas, se debe comenzar identificando los requisitos de seguridad relevantes y tratarlos como una parte integral del proceso general y del dise\u00f1o del sistema. Comience estableciendo y adoptando principios y pol\u00edticas relevantes como base para su dise\u00f1o, luego integre la seguridad en su ciclo de vida de desarrollo. Tenga tambi\u00e9n en cuenta que el sistema que est\u00e1 construyendo tambi\u00e9n necesitar\u00e1 mantenimiento y que los operadores del sistema necesitar\u00e1n gestionarlo de manera segura e incluso apagarlo y eliminarlo. Por lo tanto, comprom\u00e9tase con operaciones seguras desarrollando principios y pr\u00e1cticas de \"gesti\u00f3n operativa\"[^1] seguras.</p>"},{"location":"es/02-foundations/03-security-principles/#seguridad-por-defecto","title":"Seguridad por Defecto","text":"<p>Seguro por defecto significa que la configuraci\u00f3n predeterminada es la m\u00e1s segura posible. Esta no es necesariamente la configuraci\u00f3n m\u00e1s f\u00e1cil de usar. Eval\u00fae cu\u00e1les deber\u00edan ser las configuraciones, bas\u00e1ndose tanto en el an\u00e1lisis de riesgos como en pruebas de usabilidad. Como resultado, el significado preciso depende solamente de su decisi\u00f3n. Sin embargo, configure el sistema para proporcionar solo la funcionalidad m\u00ednima y para prohibir y/o restringir espec\u00edficamente el uso de todas las dem\u00e1s funciones, puertos, protocolos y/o servicios. Tambi\u00e9n configure los valores predeterminados para que sean lo m\u00e1s restrictivos posible, de acuerdo con las mejores pr\u00e1cticas, sin comprometer la \"Aceptabilidad psicol\u00f3gica\" y la \"Usabilidad y Manejabilidad\" del sistema.</p>"},{"location":"es/02-foundations/03-security-principles/#sin-garantia-de-seguridad","title":"Sin garant\u00eda de seguridad","text":"<p>Uno de los principios m\u00e1s importantes de la seguridad del software es que ninguna aplicaci\u00f3n o sistema est\u00e1 100% garantizado de ser seguro contra todos los ataques. Esto puede parecer un punto de partida inusualmente pesimista, pero simplemente reconoce el mundo real; dado suficiente tiempo y recursos, cualquier sistema puede ser puesto en peligro. El objetivo de la seguridad del software no es '100% seguro', sino hacer que sea lo suficientemente dif\u00edcil y las recompensas lo suficientemente peque\u00f1as para que los actores malintencionados desistan y busquen en otro lugar sistemas para explotar.</p>"},{"location":"es/02-foundations/03-security-principles/#defensa-en-profundidad","title":"Defensa en Profundidad","text":"<p>Tambi\u00e9n conocida como defensa por capas, la defensa en profundidad es un principio de seguridad donde la defensa contra ataques se proporciona mediante m\u00faltiples controles de seguridad. El objetivo es que se eliminen o mitiguen los puntos \u00fanicos de compromiso completo mediante la incorporaci\u00f3n de una serie o m\u00faltiples capas de salvaguardas de seguridad y contramedidas de mitigaci\u00f3n de riesgos.</p> <p>Si una capa de defensa resulta inadecuada, entonces, si se implementan estrategias defensivas diversas, otra capa de defensa puede prevenir una vulneraci\u00f3n completa y si esa es eludida, la siguiente capa puede bloquear la explotaci\u00f3n.</p>"},{"location":"es/02-foundations/03-security-principles/#fallar-de-forma-segura","title":"Fallar de Forma Segura","text":"<p>Este es un principio de seguridad que tiene como objetivo mantener la confidencialidad, integridad y disponibilidad cuando se detecta una condici\u00f3n de error. Estas condiciones de error pueden ser resultado de un ataque, o pueden deberse a fallas de dise\u00f1o o implementaci\u00f3n; en cualquier caso, el sistema/aplicaciones debe predeterminar un estado seguro en lugar de un estado inseguro.</p> <p>Por ejemplo, a menos que se le d\u00e9 acceso expl\u00edcito a un objeto a una entidad, se le debe negar el acceso a ese objeto por defecto. Esto a menudo se describe como 'Valores Predeterminados a Prueba de Fallos' o 'Seguro por Defecto'.</p> <p>En el contexto de la seguridad del software, el t\u00e9rmino 'fallo seguro' se usa com\u00fanmente de manera intercambiable con fallo a prueba de errores, que proviene de la terminolog\u00eda de seguridad f\u00edsica. Fallar de forma segura tambi\u00e9n ayuda a la resiliencia del software en el sentido de que el sistema/aplicaci\u00f3n puede recuperarse r\u00e1pidamente ante defectos de dise\u00f1o o implementaci\u00f3n.</p>"},{"location":"es/02-foundations/03-security-principles/#minimo-privilegio","title":"M\u00ednimo Privilegio","text":"<p>Un principio de seguridad en el que a una persona o proceso se le otorga solo el nivel m\u00ednimo de derechos de acceso (privilegios) que sea necesario para que esa persona o proceso complete una operaci\u00f3n asignada. Este derecho debe otorgarse solo por la cantidad m\u00ednima de tiempo necesaria para completar la operaci\u00f3n.</p> <p>Esto ayuda a limitar el da\u00f1o cuando un sistema es comprometido al minimizar la capacidad de un atacante para escalar privilegios tanto lateral como verticalmente. Para aplicar este principio de m\u00ednimo privilegio, se debe establecer una granularidad adecuada de privilegios y permisos.</p>"},{"location":"es/02-foundations/03-security-principles/#compartimentar","title":"Compartimentar","text":"<p>El principio de m\u00ednimo privilegio funciona mejor si los derechos de acceso no son un modelo de acceso \"todo o nada\". En su lugar, compartimente el acceso a la informaci\u00f3n en base a la \"necesidad de conocer\" para realizar ciertas tareas. El principio de compartimentaci\u00f3n ayuda a minimizar el impacto de una brecha de seguridad en caso de un intento de violaci\u00f3n exitoso, pero debe usarse con moderaci\u00f3n para evitar que el sistema se vuelva inmanejable. Por lo tanto, siga tambi\u00e9n el principio de \"Econom\u00eda de Mecanismo\".</p>"},{"location":"es/02-foundations/03-security-principles/#separacion-de-deberes","title":"Separaci\u00f3n de Deberes","text":"<p>Tambi\u00e9n conocida como separaci\u00f3n de privilegios, la separaci\u00f3n de deberes es un principio de seguridad que requiere que la finalizaci\u00f3n exitosa de una sola tarea dependa de dos o m\u00e1s condiciones que son insuficientes, individualmente por s\u00ed mismas, para completar la tarea.</p> <p>Hay muchas aplicaciones para este principio, por ejemplo, limitar el da\u00f1o que un empleado molesto o malintencionado puede hacer, o limitando la escalaci\u00f3n de privilegios.</p>"},{"location":"es/02-foundations/03-security-principles/#economia-de-mecanismo","title":"Econom\u00eda de Mecanismo","text":"<p>Tambi\u00e9n conocido como 'mantenlo simple', si hay m\u00faltiples implementaciones, se debe elegir la implementaci\u00f3n m\u00e1s simple y f\u00e1cil de entender.</p> <p>La probabilidad de vulnerabilidades aumenta con la complejidad del dise\u00f1o arquitect\u00f3nico del software y el c\u00f3digo, y aumenta a\u00fan m\u00e1s si es dif\u00edcil seguir o revisar el c\u00f3digo. La superficie de ataque del software se reduce manteniendo el dise\u00f1o del software y los detalles de implementaci\u00f3n simples y comprensibles.</p>"},{"location":"es/02-foundations/03-security-principles/#mediacion-completa","title":"Mediaci\u00f3n Completa","text":"<p>Un principio de seguridad que asegura que la autoridad no sea eludida en solicitudes consecutivas de un objeto por un sujeto, verificando la autorizaci\u00f3n (derechos y privilegios) en cada solicitud del objeto.</p> <p>En otras palabras, las solicitudes de acceso de un sujeto para un objeto son completamente mediadas cada vez, de modo que todos los accesos a los objetos deben ser verificados para asegurar que est\u00e1n permitidos.</p>"},{"location":"es/02-foundations/03-security-principles/#diseno-abierto","title":"Dise\u00f1o Abierto","text":"<p>El principio de seguridad de dise\u00f1o abierto establece que los detalles de implementaci\u00f3n del dise\u00f1o deben ser independientes del dise\u00f1o en s\u00ed, permitiendo que el dise\u00f1o permanezca abierto mientras que la implementaci\u00f3n puede mantenerse en secreto. Esto contrasta con la seguridad por oscuridad, donde la seguridad del software depende de la oscuridad del dise\u00f1o en s\u00ed.</p> <p>Cuando la arquitectura del software utiliza el concepto de dise\u00f1o abierto, la revisi\u00f3n del dise\u00f1o en s\u00ed no resultar\u00e1 en perjuicio de los medios de defensa del software.</p>"},{"location":"es/02-foundations/03-security-principles/#mecanismo-menos-comun","title":"Mecanismo menos Com\u00fan","text":"<p>El principio de seguridad de los mecanismos menos comunes proh\u00edbe compartir mecanismos que son comunes a m\u00e1s de un usuario o proceso si los usuarios o procesos est\u00e1n en diferentes niveles de privilegio. Esto es importante cuando se defiende contra la escalaci\u00f3n de privilegios.</p>"},{"location":"es/02-foundations/03-security-principles/#aceptabilidad-psicologica","title":"Aceptabilidad Psicol\u00f3gica","text":"<p>Un principio de seguridad que tiene como objetivo maximizar el uso y la adopci\u00f3n de la funcionalidad de seguridad en el software asegurando que la funcionalidad de seguridad sea f\u00e1cil de usar y al mismo tiempo transparente para el usuario. La facilidad de uso y la transparencia son requisitos esenciales para que este principio de seguridad sea efectivo.</p> <p>Los controles de seguridad no deber\u00edan hacer que el recurso sea significativamente m\u00e1s dif\u00edcil de acceder que si el control de seguridad no estuviera presente. Si un control de seguridad proporciona demasiada fricci\u00f3n para los usuarios, entonces pueden buscar formas de eliminar el control y \"mantener las puertas abiertas\".</p>"},{"location":"es/02-foundations/03-security-principles/#usabilidad-y-gestionabilidad","title":"Usabilidad y Gestionabilidad","text":"<p>Es un principio relacionado con la aceptabilidad psicol\u00f3gica, pero va m\u00e1s all\u00e1 de la mera aceptabilidad psicol\u00f3gica percibida para incluir tambi\u00e9n el dise\u00f1o, implementaci\u00f3n y operaci\u00f3n de los controles de seguridad. La configuraci\u00f3n, administraci\u00f3n e integraci\u00f3n de los componentes de seguridad no debe ser excesivamente compleja u oscura. Por lo tanto, utilice siempre est\u00e1ndares abiertos para la portabilidad e interoperabilidad, use un lenguaje com\u00fan en el desarrollo de requisitos de seguridad, dise\u00f1e la seguridad para permitir la adopci\u00f3n regular de nueva tecnolog\u00eda, asegure que exista un proceso de actualizaci\u00f3n seguro y l\u00f3gico, automatice las actividades de gesti\u00f3n de seguridad y esfu\u00e9rcese por proporcionar la facilidad de uso operativa.</p>"},{"location":"es/02-foundations/03-security-principles/#asegurar-el-eslabon-mas-debil","title":"Asegurar el Eslab\u00f3n m\u00e1s D\u00e9bil","text":"<p>Este principio de seguridad establece que la resiliencia de su software contra intentos de hackers depender\u00e1 en gran medida de la protecci\u00f3n de sus componentes m\u00e1s d\u00e9biles, ya sea el c\u00f3digo, el servicio o una interfaz. Por lo tanto, identificar el componente m\u00e1s d\u00e9bil y abordar el riesgo m\u00e1s grave primero, hasta alcanzar un nivel aceptable de riesgo, se considera una buena pr\u00e1ctica de seguridad.</p>"},{"location":"es/02-foundations/03-security-principles/#aprovechamiento-de-componentes-existentes","title":"Aprovechamiento de Componentes Existentes","text":"<p>Este es un principio de seguridad que se enfoca en asegurar que la superficie de ataque no aumente y que no se introduzcan nuevas vulnerabilidades mediante el fomento de la reutilizaci\u00f3n de componentes de software existentes, c\u00f3digo y funcionalidad.</p> <p>Es m\u00e1s probable que los componentes existentes hayan sido probados y testeados, y por lo tanto sean m\u00e1s seguros, y tambi\u00e9n deber\u00edan tener parches de seguridad disponibles. Adem\u00e1s, los componentes desarrollados dentro de la comunidad de c\u00f3digo abierto tienen el beneficio adicional de 'muchos ojos' y por lo tanto es probable que sean a\u00fan m\u00e1s seguros.</p>"},{"location":"es/02-foundations/03-security-principles/#referencias","title":"Referencias","text":"<ul> <li>Serie de Hojas de Referencia de OWASP</li> <li>Hoja de Referencia de Autenticaci\u00f3n</li> <li>Hoja de Referencia de Autorizaci\u00f3n</li> <li>Hoja de Referencia de Dise\u00f1o de Producto Seguro</li> <li>Top 10 Controles Proactivos de OWASP</li> <li>C5: Configuraciones Seguras por Defecto</li> <li>Otros</li> <li>Compartmentalization (information security), (Wikipedia)</li> <li>Funcionalidad M\u00ednima, (NIST)</li> <li>Seguridad por Dise\u00f1o, (Open Group)</li> <li>Usabilidad y Manejabilidad, (Open Group)</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p> <p>[^1]: Gesti\u00f3n Operativa, (SAMM)</p>"},{"location":"es/02-foundations/04-crypto-principles/","title":"Principios de criptograf\u00eda","text":"<p>La criptograf\u00eda es fundamental para la Confidencialidad e Integridad de las aplicaciones y sistemas. La serie de Hojas de Referencia de OWASP describe el uso de la criptograf\u00eda y algunas de ellas est\u00e1n listadas en la lectura adicional al final de esta secci\u00f3n.</p>"},{"location":"es/02-foundations/04-crypto-principles/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>Esta secci\u00f3n proporciona una breve introducci\u00f3n a la criptograf\u00eda (a menudo simplemente referida como \"crypto\") y los t\u00e9rminos utilizados. La criptograf\u00eda es un tema amplio y puede volverse muy matem\u00e1tico, pero afortunadamente para la mayor\u00eda de los equipos de desarrollo, una comprensi\u00f3n general de los conceptos es suficiente. Esta comprensi\u00f3n general, con la gu\u00eda de arquitectos de seguridad, deber\u00eda permitir la implementaci\u00f3n de criptograf\u00eda por parte del equipo de desarrollo para la aplicaci\u00f3n o sistema.</p>"},{"location":"es/02-foundations/04-crypto-principles/#usos-de-la-criptografia","title":"Usos de la criptograf\u00eda","text":"<p>Aunque la criptograf\u00eda estaba inicialmente restringida principalmente al \u00e1mbito militar y acad\u00e9mico, se ha vuelto omnipresente en la seguridad de las aplicaciones de software. Los usos cotidianos comunes de la criptograf\u00eda incluyen tel\u00e9fonos m\u00f3viles, contrase\u00f1as, VPNs SSL, tarjetas inteligentes y DVDs. La criptograf\u00eda ha invadido la vida cotidiana y es muy utilizada por muchas aplicaciones web.</p> <p>La criptograf\u00eda es uno de los temas m\u00e1s avanzados de la seguridad de la informaci\u00f3n, y uno cuya comprensi\u00f3n requiere m\u00e1s formaci\u00f3n y experiencia. Es dif\u00edcil de implementar correctamente porque hay muchos enfoques para la encriptaci\u00f3n, cada uno con ventajas y desventajas que deben ser entendidas a fondo por los arquitectos de soluciones.</p> <p>La implementaci\u00f3n correcta y precisa de la criptograf\u00eda es extremadamente cr\u00edtica para su eficacia. Un peque\u00f1o error en la configuraci\u00f3n o codificaci\u00f3n resultar\u00e1 en la eliminaci\u00f3n de la mayor\u00eda de la protecci\u00f3n y har\u00e1 que la implementaci\u00f3n criptogr\u00e1fica sea in\u00fatil.</p> <p>Se requiere una buena comprensi\u00f3n de la criptograf\u00eda para poder discernir entre productos s\u00f3lidos y soluciones enga\u00f1osas. La complejidad inherente de la criptograf\u00eda hace que sea f\u00e1cil caer en afirmaciones fant\u00e1sticas de los proveedores sobre su producto. T\u00edpicamente, estas son \"un avance en criptograf\u00eda\" o \"irrompible\" o proporcionan seguridad \"de grado militar\". Si un proveedor dice \"conf\u00ede en nosotros, hemos tenido expertos que lo han revisado\", \u00a1es probable que no fueran expertos!</p>"},{"location":"es/02-foundations/04-crypto-principles/#confidencialidad","title":"Confidencialidad","text":"<p>Para los prop\u00f3sitos de esta secci\u00f3n, la confidencialidad se define como \"ninguna divulgaci\u00f3n no autorizada de informaci\u00f3n\". La criptograf\u00eda aborda esto mediante la encriptaci\u00f3n de los datos en reposo o datos en tr\u00e1nsito, ocultando la informaci\u00f3n a todos aquellos que no posean la clave de descifrado. Los hashes criptogr\u00e1ficos (hashes seguros, unidireccionales) previenen la divulgaci\u00f3n de contrase\u00f1as.</p>"},{"location":"es/02-foundations/04-crypto-principles/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>La Autenticaci\u00f3n es el proceso de verificar una afirmaci\u00f3n de que un sujeto es quien dice ser a trav\u00e9s de alguna evidencia corroborativa proporcionada. La criptograf\u00eda es primordial para la autenticaci\u00f3n:</p> <ol> <li>para proteger la evidencia corroborativa proporcionada (por ejemplo,     el hash de contrase\u00f1as para su posterior almacenamiento)</li> <li>en protocolos de autenticaci\u00f3n que a menudo usan criptograf\u00eda para autenticar entidades directamente     o para intercambiar credenciales de manera segura</li> <li>para verificar la identidad de una o ambas partes en el intercambio de mensajes,     por ejemplo, la verificaci\u00f3n de identidad dentro de la Seguridad de la Capa de Transporte (TLS)</li> </ol> <p>OpenID Connect es ampliamente utilizado como una capa de identidad sobre el protocolo OAuth 2.0, ver la HOja d Referencia del Protocolo OAuth 2.0.</p>"},{"location":"es/02-foundations/04-crypto-principles/#integridad","title":"Integridad","text":"<p>La integridad asegura que incluso los usuarios autorizados no hayan realizado alteraciones accidentales o maliciosas de la informaci\u00f3n. La criptograf\u00eda puede usarse para prevenir la manipulaci\u00f3n mediante C\u00f3digos de Autenticaci\u00f3n de Mensajes (MACs) o firmas digitales.</p> <p>El t\u00e9rmino 'autenticidad del mensaje' se refiere a asegurar la integridad de la informaci\u00f3n, a menudo usando encriptaci\u00f3n sim\u00e9trica y claves compartidas, pero no autentica a la parte que env\u00eda.</p> <p>El t\u00e9rmino 'encriptaci\u00f3n autenticada' tambi\u00e9n asegura la integridad de la informaci\u00f3n, y, si se usa encriptaci\u00f3n asim\u00e9trica, puede autenticar al remitente.</p>"},{"location":"es/02-foundations/04-crypto-principles/#no-repudio","title":"No repudio","text":"<p>El no repudio del remitente asegura que alguien que env\u00eda un mensaje no deber\u00eda poder negar posteriormente que lo ha enviado. El no repudio del receptor significa que el receptor de un mensaje no deber\u00eda poder negar que lo ha recibido. La criptograf\u00eda puede usarse para proporcionar no repudio al proporcionar mensajes o respuestas a mensajes que no se pueden falsificar.</p> <p>El no repudio es \u00fatil para intercambios financieros, de comercio electr\u00f3nico y contractuales. Se puede lograr haciendo que el remitente o destinatario firme digitalmente alg\u00fan registro transaccional \u00fanico.</p>"},{"location":"es/02-foundations/04-crypto-principles/#atestacion","title":"Atestaci\u00f3n","text":"<p>La atestaci\u00f3n es el acto de \"dar testimonio\" o certificar algo para un uso o prop\u00f3sito particular. La atestaci\u00f3n generalmente se discute en el contexto de un M\u00f3dulo de Plataforma Confiable (TPM), Gesti\u00f3n de Derechos Digitales (DRM) y Arranque Seguro UEFI.</p> <p>Por ejemplo, la Gesti\u00f3n de Derechos Digitales est\u00e1 interesada en atestiguar que su dispositivo o sistema no ha sido comprometido con alguna puerta trasera para permitir que alguien copie ilegalmente contenido protegido por DRM.</p> <p>La criptograf\u00eda puede usarse para proporcionar una cadena de evidencia de que todo est\u00e1 como se espera que est\u00e9, para probar a un contrincante que todo est\u00e1 de acuerdo con las expectativas del contrincante. Por ejemplo, la atestaci\u00f3n remota puede usarse para probar a un contrincante que realmente est\u00e1 ejecutando el software que afirma estar ejecutando. La mayor\u00eda de las veces la atestaci\u00f3n se realiza proporcionando una cadena de firmas digitales comenzando con un cargador de arranque confiable (firmado digitalmente).</p>"},{"location":"es/02-foundations/04-crypto-principles/#hashes-criptograficos","title":"Hashes criptogr\u00e1ficos","text":"<p>Los hashes criptogr\u00e1ficos, tambi\u00e9n conocidos como res\u00famenes de mensaje, son funciones que mapean cadenas de bits de longitud arbitraria a una cadena de bits de longitud fija conocida como 'valor hash' o 'valor de resumen'. Estas funciones hash son mapeos de muchos a uno que son funciones de compresi\u00f3n.</p> <p>Las funciones hash criptogr\u00e1ficas se utilizan para proporcionar integridad de datos (es decir, para detectar la manipulaci\u00f3n intencional de datos), para almacenar contrase\u00f1as o frases de paso, y para proporcionar firmas digitales de manera m\u00e1s eficiente que usando cifrados asim\u00e9tricos. Las funciones hash criptogr\u00e1ficas tambi\u00e9n se utilizan para extender un peque\u00f1o bit de entrop\u00eda para que se puedan construir generadores de n\u00fameros aleatorios seguros.</p> <p>Cuando se utilizan para proporcionar integridad de datos, las funciones criptogr\u00e1ficas proporcionan dos tipos de integridad: hashes con clave, a menudo llamados 'c\u00f3digos de autenticaci\u00f3n de mensaje', y hashes sin clave llamados 'c\u00f3digos de integridad de mensaje'.</p>"},{"location":"es/02-foundations/04-crypto-principles/#cifrados","title":"Cifrados","text":"<p>Un cifrado es un algoritmo que realiza encriptaci\u00f3n o desencriptaci\u00f3n. Los cifrados modernos se pueden categorizar de varias maneras diferentes. Las distinciones m\u00e1s comunes entre ellos son:</p> <ul> <li>Si trabajan en un n\u00famero fijo de bits (cifrados de bloque) o en un flujo continuo de bits (cifrados de flujo)</li> <li>Si se usa la misma clave para encriptaci\u00f3n y desencriptaci\u00f3n (cifrados sim\u00e9tricos)     o claves separadas para encriptaci\u00f3n y desencriptaci\u00f3n (cifrados asim\u00e9tricos)</li> </ul>"},{"location":"es/02-foundations/04-crypto-principles/#cifrados-simetricos","title":"Cifrados Sim\u00e9tricos","text":"<p>Los cifrados sim\u00e9tricos encriptan y desencriptan usando la misma clave. Esto implica que si una parte encripta datos que una segunda parte debe desencriptar, esas dos partes deben compartir una clave com\u00fan.</p> <p>Los cifrados sim\u00e9tricos vienen en dos tipos principales:</p> <ol> <li>Cifrados de bloque, que operan en un bloque de caracteres (t\u00edpicamente 8 o 16 octetos) a la vez.     Un ejemplo de cifrado de bloque es AES</li> <li>Cifrados de flujo, que operan en un solo bit (u ocasionalmente un solo byte) a la vez.     Ejemplos de cifrados de flujo son RC4 (tambi\u00e9n conocido como ARC4) y Salsa20</li> </ol> <p>Tenga en cuenta que todos los cifrados de bloque tambi\u00e9n pueden operar en 'modo de transmisi\u00f3n' seleccionando el modo de cifrado apropiado.</p>"},{"location":"es/02-foundations/04-crypto-principles/#modos-de-cifrado","title":"Modos de Cifrado","text":"<p>Los cifrados de bloque pueden funcionar en diferentes modos de operaci\u00f3n conocidos como \"modos de cifrado\". Este modo de cifrado describe algor\u00edtmicamente c\u00f3mo un cifrado opera para aplicar repetidamente su mecanismo de encriptaci\u00f3n o desencriptaci\u00f3n a un bloque de cifrado determinado. Los modos de cifrado son importantes porque tienen un impacto enorme tanto en la confidencialidad como en la autenticidad del mensaje de los mensajes de texto cifrado resultantes.</p> <p>Casi todas las bibliotecas criptogr\u00e1ficas admiten los cuatro modos de cifrado originales de DES: ECB, CBC (Encadenamiento de Bloques de Cifrado) OFB (Retroalimentaci\u00f3n de Salida) y CFB (Retroalimentaci\u00f3n de Cifrado). Muchas tambi\u00e9n admiten el modo CTR (Contador).</p>"},{"location":"es/02-foundations/04-crypto-principles/#vector-de-inicializacion","title":"Vector de inicializaci\u00f3n","text":"<p>Un vector de inicializaci\u00f3n criptogr\u00e1fico (IV) es una entrada de tama\u00f1o fijo a la primitiva de encriptaci\u00f3n / desencriptaci\u00f3n de un cifrado de bloque. Se recomienda (y en muchos casos, se requiere) que el IV sea aleatorio o al menos pseudo-aleatorio.</p>"},{"location":"es/02-foundations/04-crypto-principles/#relleno","title":"Relleno","text":"<p>Excepto cuando operan en modo de transmisi\u00f3n, los cifrados de bloque generalmente operan en bloques de tama\u00f1o fijo. Estos cifrados de bloque tambi\u00e9n deben operar en mensajes de cualquier tama\u00f1o, no solo aquellos que son un m\u00faltiplo sin residuo del tama\u00f1o del bloque del cifrado, por lo que el mensaje puede ser rellenado para ajustarse al siguiente bloque de tama\u00f1o fijo.</p>"},{"location":"es/02-foundations/04-crypto-principles/#cifrados-asimetricos","title":"Cifrados asim\u00e9tricos","text":"<p>Los cifrados asim\u00e9tricos encriptan y desencriptan con dos claves diferentes. Una clave generalmente se designa como la clave privada y la otra se designa como la clave p\u00fablica. Generalmente, la clave p\u00fablica se comparte ampliamente y la clave privada se mantiene segura.</p> <p>Los cifrados asim\u00e9tricos son m\u00e1s lentos que los cifrados sim\u00e9tricos en varios \u00f3rdenes de magnitud. Por esta raz\u00f3n, se utilizan frecuentemente en criptosistemas h\u00edbridos, que combinan cifrados asim\u00e9tricos y sim\u00e9tricos. En tales criptosistemas h\u00edbridos, se genera una clave de sesi\u00f3n sim\u00e9trica aleatoria que solo se utiliza durante la duraci\u00f3n de la comunicaci\u00f3n encriptada. Esta clave de sesi\u00f3n aleatoria luego se encripta usando un cifrado asim\u00e9trico y la clave privada del destinatario. Los datos de texto plano en s\u00ed se encriptan con la clave de sesi\u00f3n. Luego, todo el paquete (clave de sesi\u00f3n encriptada y mensaje encriptado) se env\u00eda junto. Tanto TLS como S/MIME son criptosistemas comunes que utilizan criptograf\u00eda h\u00edbrida.</p>"},{"location":"es/02-foundations/04-crypto-principles/#firma-digital","title":"Firma digital","text":"<p>Las firmas digitales son una cadena de datos criptogr\u00e1ficamente \u00fanica que se utiliza para garantizar la integridad de los datos y probar la autenticidad de alg\u00fan mensaje digital, y que asocia alg\u00fan mensaje de entrada con una entidad originadora. Un algoritmo de generaci\u00f3n de firma digital es un algoritmo criptogr\u00e1ficamente fuerte que se utiliza para generar una firma digital.</p>"},{"location":"es/02-foundations/04-crypto-principles/#protocolo-de-acuerdo-de-claves","title":"Protocolo de acuerdo de claves","text":"<p>Los protocolos de acuerdo de claves son protocolos mediante los cuales N partes (generalmente dos) pueden acordar una clave com\u00fan sin intercambiar realmente la clave. Cuando se dise\u00f1an e implementan correctamente, los protocolos de acuerdo de claves evitan que los adversarios aprendan la clave o fuercen su propia elecci\u00f3n de clave a las partes participantes.</p>"},{"location":"es/02-foundations/04-crypto-principles/#encriptacion-a-nivel-de-aplicacion","title":"Encriptaci\u00f3n a nivel de aplicaci\u00f3n","text":"<p>La encriptaci\u00f3n a nivel de aplicaci\u00f3n se refiere a la encriptaci\u00f3n que se considera parte de la aplicaci\u00f3n misma; no implica nada sobre d\u00f3nde en el c\u00f3digo de la aplicaci\u00f3n se realiza realmente la encriptaci\u00f3n.</p>"},{"location":"es/02-foundations/04-crypto-principles/#derivacion-de-claves","title":"Derivaci\u00f3n de claves","text":"<p>Una funci\u00f3n de derivaci\u00f3n de claves (KDF) es un algoritmo determinista para derivar una clave de un tama\u00f1o dado a partir de alg\u00fan valor secreto. Si dos partes usan el mismo valor secreto compartido y el mismo KDF, siempre deber\u00edan derivar exactamente la misma clave.</p>"},{"location":"es/02-foundations/04-crypto-principles/#envoltura-de-claves","title":"Envoltura de claves","text":"<p>La envoltura de claves es una construcci\u00f3n utilizada con cifrados sim\u00e9tricos para proteger material de claves criptogr\u00e1ficas encript\u00e1ndolo de una manera especial. Los algoritmos de envoltura de claves est\u00e1n destinados a proteger las claves mientras se mantienen en almacenamiento no confiable o mientras se transmiten claves a trav\u00e9s de redes de comunicaci\u00f3n no seguras.</p>"},{"location":"es/02-foundations/04-crypto-principles/#algoritmos-de-intercambio-de-claves","title":"Algoritmos de intercambio de claves","text":"<p>Los algoritmos de intercambio de claves (tambi\u00e9n conocidos como algoritmos de establecimiento de claves) son protocolos que se utilizan para intercambiar claves criptogr\u00e1ficas secretas entre un remitente y un receptor de una manera que cumple con ciertas restricciones de seguridad. Los algoritmos de intercambio de claves intentan abordar el problema de compartir de manera segura una clave secreta com\u00fan entre dos partes a trav\u00e9s de un canal de comunicaci\u00f3n inseguro de manera que ninguna otra parte pueda obtener acceso a una copia de la clave secreta.</p> <p>El algoritmo de intercambio de claves m\u00e1s conocido es el Intercambio de Claves Diffie-Hellman. Tambi\u00e9n existen algoritmos de intercambio de claves autenticados por contrase\u00f1a. El intercambio de claves RSA usando PKI o redes de confianza o servidores de claves confiables tambi\u00e9n se usa com\u00fanmente.</p>"},{"location":"es/02-foundations/04-crypto-principles/#protocolos-de-transporte-de-claves","title":"Protocolos de transporte de claves","text":"<p>Los protocolos de Transporte de claves son donde una parte genera la clave y la env\u00eda de manera segura al(los) destinatario(s).</p>"},{"location":"es/02-foundations/04-crypto-principles/#protocolos-de-acuerdo-de-claves","title":"Protocolos de acuerdo de claves","text":"<p>Los protocolos de Acuerdo de claves son protocolos mediante los cuales N partes (normalmente dos) pueden acordar una clave com\u00fan con todas las partes contribuyendo al valor de la clave. Estos protocolos evitan que los adversarios aprendan la clave o fuercen su propia elecci\u00f3n de clave a las partes participantes.</p> <p>Referencias</p> <ul> <li> <p>Serie de Hojas de Referencia de OWASP</p> </li> <li> <p>Autenticaci\u00f3n</p> </li> <li>Autorizaci\u00f3n</li> <li>Almacenamiento Criptogr\u00e1fico</li> <li>Gesti\u00f3n de Claves</li> <li>Protocolo OAuth 2.0</li> <li>Seguridad SAML</li> <li>Dise\u00f1o de Producto Seguro</li> <li>Protecci\u00f3n de Privacidad del Usuario</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/02-foundations/05-top-ten/","title":"OWASP Top 10","text":"<p>El OWASP Top Ten es una lista muy conocida de riesgos de seguridad en aplicaciones web, y est\u00e1 incluida en el Modelo de Madurez de Aseguramiento de Software de OWASP (SAMM) en la pr\u00e1ctica de Educaci\u00f3n y Orientaci\u00f3n dentro de la funci\u00f3n empresarial de Gobernanza.</p>"},{"location":"es/02-foundations/05-top-ten/#descripcion-general","title":"Descripci\u00f3n General","text":"<p>El proyecto OWASP Top 10 de Riesgos de Seguridad en Aplicaciones Web es probablemente el concepto de seguridad m\u00e1s conocido dentro de la comunidad de seguridad, logrando una amplia aceptaci\u00f3n y fama poco despu\u00e9s de su lanzamiento en 2003. Generalmente conocido simplemente como el 'OWASP Top Ten', es una lista que identifica las amenazas m\u00e1s importantes para las aplicaciones web y busca clasificarlas seg\u00fan su importancia y gravedad.</p> <p>La lista ha cambiado con el tiempo, con algunos tipos de amenazas convirti\u00e9ndose en un problema mayor para las aplicaciones web y otras amenazas convirti\u00e9ndose en un riesgo menor a medida que las tecnolog\u00edas cambian. La \u00faltima versi\u00f3n fue publicada en 2021 y cada categor\u00eda se resume a continuaci\u00f3n.</p> <p>Tenga en cuenta que existen varios proyectos 'OWASP Top Ten', por ejemplo, el 'OWASP Top 10 para Aplicaciones de Modelos Extensos de Lenguaje', por lo que para evitar confusiones se debe tener en cuenta el contexto al referirse a estas listas.</p>"},{"location":"es/02-foundations/05-top-ten/#a012021-perdida-de-control-de-acceso","title":"A01:2021 P\u00e9rdida de Control de Acceso","text":"<p>El control de acceso involucra el uso de mecanismos de protecci\u00f3n que pueden categorizarse como:</p> <ul> <li>Autenticaci\u00f3n (evidenciar la identidad de un actor)</li> <li>Autorizaci\u00f3n (asegurar que un actor dado tenga acceso a un recurso)</li> <li>Responsabilidad (seguimiento de las actividades realizadas)</li> </ul> <p>La P\u00e9rdida de Control de Acceso ocurre cuando el producto no restringe, o restringe incorrectamente, el acceso a un recurso por parte de un actor no autorizado o malicioso. Cuando un control de seguridad falla o no se aplica, los atacantes pueden comprometer la seguridad del producto obteniendo privilegios, leyendo informaci\u00f3n sensible, ejecutando comandos, evadiendo la detecci\u00f3n, etc.</p> <p>La P\u00e9rdida de Control de Acceso puede tomar muchas formas, como la navegaci\u00f3n por directorios o la elevaci\u00f3n de privilegios, por lo cual consulte tanto la Enumeraci\u00f3n de Debilidades Comunes CWE-284 como A01 P\u00e9rdida de Control de Acceso y tambi\u00e9n siga las diversas Hojas de Referencia de OWASP relacionadas con los controles de acceso.</p>"},{"location":"es/02-foundations/05-top-ten/#a022021-fallos-criptograficos","title":"A02:2021 Fallos Criptogr\u00e1ficos","text":"<p>Refiri\u00e9ndose a OWASP Top 10 A02:2021, los datos sensibles deben protegerse tanto en reposo como en tr\u00e1nsito. Los fallos criptogr\u00e1ficos ocurren cuando el control de seguridad criptogr\u00e1fico ha sido vulnerado o no se aplica, y los datos quedan expuestos a actores no autorizados, maliciosos o no.</p> <p>Es importante proteger los datos tanto en reposo, cuando est\u00e1n almacenados en un \u00e1rea de memoria, como cuando est\u00e1n en tr\u00e1nsito, como cuando se transmiten a trav\u00e9s de un canal de comunicaci\u00f3n o se est\u00e1n transformando. Un buen ejemplo de protecci\u00f3n de transformaci\u00f3n de datos se da en A02 Fallos Criptogr\u00e1ficos donde los datos sensibles est\u00e1n correctamente cifrados en una base de datos, pero la funci\u00f3n de exportaci\u00f3n descifra autom\u00e1ticamente los datos, llevando a la exposici\u00f3n de datos sensibles.</p> <p>Los fallos criptogr\u00e1ficos pueden tomar muchas formas y pueden ser sutiles - un control de seguridad que parece seguro puede ser f\u00e1cilmente vulnerado. Siga las Hojas de Referencia de criptograf\u00eda para implementar los controles criptogr\u00e1ficos b\u00e1sicos y considere establecer una auditor\u00eda criptogr\u00e1fica.</p>"},{"location":"es/02-foundations/05-top-ten/#a032021-inyeccion","title":"A03:2021 Inyecci\u00f3n","text":"<p>La falta de validaci\u00f3n y sanitizaci\u00f3n de entrada puede llevar a operaciones de inyecci\u00f3n, y este riesgo ha sido una caracter\u00edstica constante del OWASP Top Ten desde que se public\u00f3 la primera versi\u00f3n en 2003. Estas vulnerabilidades ocurren cuando se utilizan directamente datos hostiles dentro de la aplicaci\u00f3n y pueden resultar en que datos maliciosos se utilicen para modificar la aplicaci\u00f3n; consulte A03 Inyecci\u00f3n para m\u00e1s explicaciones.</p> <p>El control de seguridad es directo: todas las entradas de fuentes no confiables deben ser sanitizadas y validadas. Consulte las Hojas de Referencia de Inyecci\u00f3n para los diversos tipos de entrada y sus controles.</p>"},{"location":"es/02-foundations/05-top-ten/#a042021-diseno-inseguro","title":"A04:2021 Dise\u00f1o Inseguro","text":"<p>Es importante que la seguridad se incorpore en las aplicaciones desde el principio y no se aplique como una ocurrencia tard\u00eda. La categor\u00eda A04 Dise\u00f1o Inseguro reconoce esto y aconseja que el uso del modelado de amenazas, patrones de dise\u00f1o seguro y arquitecturas de referencia debe incorporarse dentro de las actividades de dise\u00f1o y arquitectura de la aplicaci\u00f3n.</p> <p>En la pr\u00e1ctica, esto implica establecer un ciclo de vida de desarrollo seguro que fomente la identificaci\u00f3n de requisitos de seguridad, el uso habitual del modelado de amenazas y la inclusi\u00f3n de bibliotecas y marcos seguros existentes. Esta categor\u00eda se introdujo en la versi\u00f3n 2021 y por ahora las hojas de referencia de soporte solo cubren el modelado de amenazas; a medida que esta categor\u00eda se establezca m\u00e1s, se espera que m\u00e1s informaci\u00f3n de soporte est\u00e9 disponible.</p>"},{"location":"es/02-foundations/05-top-ten/#a052021-configuracion-incorrecta-de-seguridad","title":"A05:2021 Configuraci\u00f3n Incorrecta de Seguridad","text":"<p>Los sistemas y aplicaciones grandes suelen ser configurables, y esta configuraci\u00f3n a menudo se utiliza para asegurar el sistema/aplicaci\u00f3n. Si esta configuraci\u00f3n se aplica incorrectamente, la aplicaci\u00f3n puede dejar de ser segura y, en su lugar, ser susceptible a vulneraciones bien conocidas. La p\u00e1gina A05 Configuraci\u00f3n Incorrecta de Seguridad contiene un ejemplo com\u00fan de configuraci\u00f3n incorrecta donde las cuentas predeterminadas y sus contrase\u00f1as siguen habilitadas y sin cambios. Estas contrase\u00f1as y cuentas suelen ser bien conocidas y proporcionan una manera f\u00e1cil para que los actores maliciosos pongan en peligro las aplicaciones.</p> <p>Tanto el OWASP Top 10 A05:2021 como las Hojas de Referencias de OWASP vinculadas proporcionan estrategias para establecer un proceso concertado y repetible de configuraci\u00f3n de seguridad de aplicaciones para minimizar la configuraci\u00f3n incorrecta.</p>"},{"location":"es/02-foundations/05-top-ten/#a062021-componentes-vulnerables-y-desactualizados","title":"A06:2021 Componentes Vulnerables y Desactualizados","text":"<p>Quiz\u00e1s una de las actividades de seguridad m\u00e1s f\u00e1ciles y efectivas es mantener actualizadas todas las dependencias de software de terceros. Si un actor malicioso identifica una dependencia vulnerable durante la fase de reconocimiento de un ataque, hay bases de datos disponibles, como Exploit Database, que proporcionar\u00e1n una descripci\u00f3n de cualquier exploit. Estas bases de datos tambi\u00e9n pueden proporcionar scripts y t\u00e9cnicas ya preparados para atacar una vulnerabilidad dada, facilitando la explotaci\u00f3n de dependencias de software de terceros vulnerables.</p> <p>El riesgo A06 Componentes Vulnerables y Desactualizados subraya la importancia de esta actividad y recomienda que las correcciones y actualizaciones de la plataforma subyacente, marcos y dependencias se basen en una evaluaci\u00f3n de riesgos y se realicen de manera \"oportuna\". Se pueden usar varias herramientas para analizar dependencias y marcar vulnerabilidades, consulte las Hojas de Referencias para estas.</p>"},{"location":"es/02-foundations/05-top-ten/#a072021-fallos-de-identificacion-y-autenticacion","title":"A07:2021 Fallos de Identificaci\u00f3n y Autenticaci\u00f3n","text":"<p>La confirmaci\u00f3n de la identidad del usuario, la autenticaci\u00f3n y la gesti\u00f3n de sesiones es cr\u00edtica para proteger el sistema o aplicaci\u00f3n contra ataques relacionados con la autenticaci\u00f3n. Refiri\u00e9ndose al riesgo A07 Fallos de Identificaci\u00f3n y Autenticaci\u00f3n, la autorizaci\u00f3n puede fallar de varias maneras que a menudo involucran otros riesgos del OWASP Top Ten:</p> <ul> <li>controles de acceso vulnerados (A01)</li> <li>fallo criptogr\u00e1fico (A02)</li> <li>contrase\u00f1as predeterminadas (A05)</li> <li>bibliotecas desactualizadas (A06)</li> </ul> <p>Consulte las Hojas de Referencia para las varias buenas pr\u00e1cticas que se necesitan para una autorizaci\u00f3n segura. Tambi\u00e9n hay proveedores externos de Gesti\u00f3n de Identidad y Acceso (IAM) que proporcionar\u00e1n esto como servicio, considere el costo/beneficio de usar estos proveedores (a menudo comerciales).</p>"},{"location":"es/02-foundations/05-top-ten/#a082021-fallos-de-integridad-de-software-y-datos","title":"A08:2021 Fallos de Integridad de Software y Datos","text":"<p>Los fallos de integridad de software y datos se relacionan con c\u00f3digo e infraestructura que no protege contra violaciones de integridad. Esta es una categor\u00eda de amplio alcance que describe ataques a la cadena de suministro, actualizaciones autom\u00e1ticas comprometidas y uso de componentes no confiables,por ejemplo. A08 Fallos de Integridad de Software y Datos fue una nueva categor\u00eda introducida en 2021, por lo que hay poca informaci\u00f3n disponible en las Hojas de Referencia, pero esto seguramente cambiar\u00e1 para una amenaza tan importante.</p>"},{"location":"es/02-foundations/05-top-ten/#a092021-fallos-en-el-registro-y-monitoreo-de-seguridad","title":"A09:2021 Fallos en el Registro y Monitoreo de Seguridad","text":"<p>El registro y monitoreo ayuda a detectar, escalar y responder a infracciones activas; sin \u00e9ste, las infracciones no ser\u00e1n detectadas. A09 Fallos en el Registro y Monitoreo de Seguridad enumera varias t\u00e9cnicas de registro y monitoreo que deber\u00edan ser familiares, pero tambi\u00e9n otras que pueden no ser tan comunes; por ejemplo, monitorear la cadena de suministro de DevOps puede ser tan importante como monitorear la aplicaci\u00f3n o sistema. Las Hojas de referencia proporcionan orientaci\u00f3n sobre registro suficiente y tambi\u00e9n proporcionan un vocabulario com\u00fan de registro. El objetivo de este vocabulario com\u00fan es proporcionar un registro que utilice un conjunto com\u00fan de t\u00e9rminos, formatos y palabras clave; y esto permite facilitar el monitoreo, an\u00e1lisis y las alertas.</p>"},{"location":"es/02-foundations/05-top-ten/#a102021-falsificacion-de-solicitud-del-lado-del-servidor","title":"A10:2021 Falsificaci\u00f3n de Solicitud del Lado del Servidor","text":"<p>Refiri\u00e9ndose a A10 Falsificaci\u00f3n de Solicitudes del Lado del Servidor (SSRF), estas vulnerabilidades pueden ocurrir cuando una aplicaci\u00f3n web est\u00e1 recuperando un recurso remoto sin validar la URL proporcionada por el usuario. Estos exploits permiten a un atacante forzar a la aplicaci\u00f3n a enviar una solicitud manipulada a un destino inesperado, incluso cuando est\u00e1 protegido por un firewall, VPN u otro tipo de lista de control de acceso a la red. Recuperar una URL se ha convertido en un escenario com\u00fan para las aplicaciones web modernas y como resultado la incidencia de SSRF est\u00e1 aumentando, especialmente para servicios en la nube y arquitecturas de aplicaciones m\u00e1s complejas.</p> <p>Esta es una nueva categor\u00eda introducida en 2021 con una \u00fanica (por ahora) Hoja de Referencia que trata acerca de SSRF.</p>"},{"location":"es/02-foundations/05-top-ten/#proyectos-top-10-de-owasp","title":"Proyectos Top 10 de OWASP","text":"<p>Hay varios proyectos 'Top 10' creados por OWASP que, dependiendo del contexto, tambi\u00e9n pueden ser referidos como 'Top 10 de OWASP'. Aqu\u00ed hay una lista de los proyectos 'Top 10 de OWASP' estables:</p> <ul> <li>Top 10 de Seguridad de API</li> <li>Top 10 de Seguridad de Datos</li> <li>Top 10 sin c\u00f3digo o Low-Code/No-Code</li> <li>Top 10 M\u00f3vil</li> <li>Top 10 sin Servidor o Serverless</li> <li>Top 10 de Riesgos de Seguridad CI/CD</li> <li>Top 10 para Aplicaciones de Modelos Extensos de Lenguaje</li> <li>Top 10 de Riesgos de Privacidad</li> <li>Top 10 de Controles Proactivos</li> <li>Top 10 de Riesgos de Seguridad en Aplicaciones Web</li> </ul> <p>Otros Top 10 de OWASP son proyectos 'incubadora', que est\u00e1n en progreso, por lo que esta lista cambiar\u00e1 con el tiempo.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/","title":"Descripci\u00f3n","text":"<p>Los requisitos de seguridad tambi\u00e9n proporcionan una base de funcionalidad de seguridad minuciosamente verificada para una aplicaci\u00f3n. En lugar de crear un enfoque personalizado de seguridad para cada aplicaci\u00f3n, los requisitos de seguridad est\u00e1ndar permiten a los desarrolladores reutilizar la definici\u00f3n de controles de seguridad y mejores pr\u00e1cticas; esos mismos requisitos de seguridad verificados proporcionan soluciones para problemas de seguridad que han ocurrido en el pasado.</p> <p>La importancia de comprender los requisitos clave de seguridad se describe en la pr\u00e1ctica de Requisitos de Seguridad que forma parte de la secci\u00f3n de funci\u00f3n empresarial Dise\u00f1o dentro del modelo SAMM de OWASP. Idealmente, los requisitos de seguridad de software estructurados est\u00e1n disponibles dentro de un marco de requisitos de seguridad, y estos son utilizados tanto por los equipos de desarrolladores como por los equipos de producto. Adem\u00e1s, los proveedores de la organizaci\u00f3n deben cumplir con los requisitos de seguridad; incorporar la seguridad en los acuerdos con proveedores para garantizar el cumplimiento de los requisitos de seguridad organizacionales.</p> <p>En resumen, los requisitos de seguridad existen para prevenir la repetici\u00f3n de fallos de seguridad pasados.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda de Desarrollador OWASP es un esfuerzo comunitario; si hay algo que necesite cambios entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/01-requirements/","title":"Requisitos en la pr\u00e1ctica","text":"<p>Esta secci\u00f3n trata sobre los Requisitos de Seguridad, que es una pr\u00e1ctica de seguridad en la secci\u00f3n de funci\u00f3n empresarial de Dise\u00f1o del Modelo de Madurez de Garant\u00eda de Software de OWASP (SAMM). Esta pr\u00e1ctica de requisitos de seguridad tiene dos actividades: Requisitos de Software y Seguridad de Proveedores, siendo los requisitos regulatorios y estatutarios un subconjunto importante de ambas actividades.</p>"},{"location":"es/03-requirements/01-requirements/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>Los requisitos de seguridad son parte de cada proceso de desarrollo seguro y forman la base de la postura de seguridad de la aplicaci\u00f3n. Los requisitos ayudar\u00e1n sin duda en la prevenci\u00f3n de muchos tipos de vulnerabilidades.</p> <p>Los requisitos provienen de diversas fuentes, siendo tres las m\u00e1s comunes:</p> <ol> <li>Requisitos relacionados con el software que especifican objetivos y expectativas     para proteger el servicio y los datos en el n\u00facleo de la aplicaci\u00f3n</li> <li>Requisitos relativos a organizaciones proveedoras que son parte del contexto de desarrollo de la aplicaci\u00f3n</li> <li>Requisitos regulatorios y reglamentarios</li> </ol> <p>Idealmente, los requisitos de seguridad se integran al inicio del desarrollo, pero no hay un mal momento para considerar estos requisitos de seguridad y a\u00f1adir nuevos cuando sea necesario.</p>"},{"location":"es/03-requirements/01-requirements/#requisitos-de-software","title":"Requisitos de software","text":"<p>Definir requisitos de seguridad puede ser desalentador a veces, por ejemplo, pueden hacer referencia a t\u00e9cnicas criptogr\u00e1ficas que pueden aplicarse incorrectamente, pero es completamente aceptable expresar estos requisitos en lenguaje cotidiano. Por ejemplo, un requisito de seguridad podr\u00eda escribirse como \"Identificar al usuario de la aplicaci\u00f3n en todo momento\" y esto es ciertamente suficiente para requerir que la autenticaci\u00f3n se incluya en el dise\u00f1o.</p> <p>La pr\u00e1ctica de Requisitos de Seguridad de SAMM enumera los niveles de madurez de los requisitos de seguridad de software que especifican objetivos y expectativas. Elija el nivel apropiado para la organizaci\u00f3n y el equipo de desarrollo, con la comprensi\u00f3n de que cualquiera de estos niveles es completamente aceptable.</p> <p>Los niveles de madurez de los requisitos de seguridad de software son:</p> <ol> <li>Los objetivos de seguridad de la aplicaci\u00f3n de alto nivel son mapeados a requisitos funcionales</li> <li>Requisitos de seguridad estructurados est\u00e1n disponibles y son utilizados por equipos de desarrollo</li> <li>Construir un marco de requisitos para que los equipos de producto lo utilicen</li> </ol> <p>OWASP proporciona proyectos que pueden ayudar a identificar requisitos de seguridad que proteger\u00e1n el servicio y los datos en el n\u00facleo de la aplicaci\u00f3n. El Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones proporciona una lista de requisitos para el desarrollo seguro, y puede usarse como punto de partida para los requisitos de seguridad. La Seguridad de Aplicaciones M\u00f3viles proporciona un conjunto similar de requisitos de seguridad est\u00e1ndar para aplicaciones m\u00f3viles.</p> <p>Considere usar Casos de Abuso para identificar posibles ataques y los controles necesarios para mitigarlos. Esto puede luego formar parte de los requisitos de seguridad de software.</p>"},{"location":"es/03-requirements/01-requirements/#seguridad-de-proveedores","title":"Seguridad de proveedores","text":"<p>Los proveedores externos involucrados en el proceso de desarrollo deben ser evaluados por sus pr\u00e1cticas de seguridad y cumplimiento. Dependiendo de su nivel de participaci\u00f3n, estos proveedores pueden tener un impacto significativo en la seguridad de la aplicaci\u00f3n, por lo que ser\u00e1 necesario negociar con ellos un conjunto de requisitos de seguridad.</p> <p>SAMM enumera los niveles de madurez para los requisitos de seguridad que aclarar\u00e1n las fortalezas y debilidades de sus proveedores. Tenga en cuenta que la seguridad de los proveedores es distinta de la seguridad de software y bibliotecas de terceros, y se trata el uso de software de terceros y de c\u00f3digo abierto en su propia secci\u00f3n sobre verificaci\u00f3n y seguimiento de dependencias.</p> <p>Los niveles de madurez de los requisitos de seguridad de proveedores son:</p> <ol> <li>Evaluar al proveedor seg\u00fan los requisitos de seguridad organizacionales</li> <li>Incorporar la seguridad en los acuerdos con proveedores para garantizar     el cumplimiento de los requisitos organizacionales</li> <li>Asegurar una cobertura de seguridad adecuada para proveedores externos proporcionando objetivos claros</li> </ol>"},{"location":"es/03-requirements/01-requirements/#requisitos-regulatorios-y-reglamentarios","title":"Requisitos regulatorios y reglamentarios","text":"<p>Los requisitos regulatorios pueden incluir requisitos de seguridad que deben tenerse en cuenta. Diferentes industrias est\u00e1n reguladas en mayor o menor medida, y el \u00fanico consejo general es estar consciente de ellos y seguir las regulaciones.</p> <p>Diferentes jurisdicciones tendr\u00e1n distintos requisitos reglamentarios que pueden resultar en requisitos de seguridad. Cualquier requisito de seguridad reglamentario aplicable debe a\u00f1adirse a los requisitos de seguridad de la aplicaci\u00f3n. De manera similar a los requisitos regulatorios, el \u00fanico consejo general es estar familiarizado y seguir los requisitos reglamentarios apropiados.</p>"},{"location":"es/03-requirements/01-requirements/#revision-periodica","title":"Revisi\u00f3n peri\u00f3dica","text":"<p>Los requisitos de seguridad deben identificarse y registrarse al inicio de cualquier nuevo desarrollo y tambi\u00e9n cuando se a\u00f1aden nuevas caracter\u00edsticas a una aplicaci\u00f3n existente. Estos requisitos de seguridad deben revisarse peri\u00f3dicamente y modificarse seg\u00fan sea necesario; por ejemplo, los est\u00e1ndares de seguridad se actualizan y entran en vigor nuevas regulaciones, ambos pueden tener un impacto directo en la aplicaci\u00f3n.</p>"},{"location":"es/03-requirements/01-requirements/#referencias","title":"Referencias","text":"<ul> <li>Proyectos OWASP:</li> <li>Modelo de Madurez de Garant\u00eda de Software (SAMM)</li> <li>Top 10 Controles Proactivos</li> <li>Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS)</li> <li>Seguridad de Aplicaciones M\u00f3viles</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador OWASP es un esfuerzo comunitario; si hay algo que necesite cambios entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/02-risk/","title":"Perfil de riesgo","text":"<p>Esta secci\u00f3n aborda el Perfil de Riesgo de la Aplicaci\u00f3n, una actividad en el Modelo de Madurez de Garant\u00eda de Software de OWASP (SAMM). La actividad de perfil de riesgo es parte de la pr\u00e1ctica de Evaluaci\u00f3n de Amenazas en la funci\u00f3n empresarial de Dise\u00f1o.</p>"},{"location":"es/03-requirements/02-risk/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>La gesti\u00f3n de riesgos es la identificaci\u00f3n, evaluaci\u00f3n y priorizaci\u00f3n de riesgos para la aplicaci\u00f3n o sistema. El objetivo de la gesti\u00f3n de riesgos es garantizar que la incertidumbre no desv\u00ede las actividades de desarrollo de los objetivos empresariales.</p> <p>La remediaci\u00f3n es la estrategia elegida en respuesta a un riesgo para el sistema empresarial, y estos riesgos se identifican utilizando diversas t\u00e9cnicas como modelado de amenazas y an\u00e1lisis de requisitos de seguridad.</p> <p>La gesti\u00f3n de riesgos puede dividirse en dos fases. Primero, crear un perfil de riesgo para la aplicaci\u00f3n y luego proporcionar soluciones (remediar) a esos riesgos de la manera que mejor convenga al negocio; la gesti\u00f3n de riesgos siempre debe estar orientada por los objetivos el negocio.</p>"},{"location":"es/03-requirements/02-risk/#perfil-de-riesgo-de-la-aplicacion","title":"Perfil de riesgo de la aplicaci\u00f3n","text":"<p>El perfil de riesgo de la aplicaci\u00f3n se crea para comprender la probabilidad y el impacto de un ataque. Con el tiempo, se podr\u00edan crear varios perfiles que deber\u00edan almacenarse en un inventario de perfiles de riesgo, e idealmente, los perfiles de riesgo deber\u00edan revisarse como parte de la estrategia de desarrollo seguro de la organizaci\u00f3n.</p> <p>Cuantificar los riesgos es a menudo dif\u00edcil y hay muchas formas de abordar esto; consulte la lista de lectura a continuaci\u00f3n para conocer diversas estrategias para crear un modelo de calificaci\u00f3n de riesgos. La p\u00e1gina de OWASP sobre Metodolog\u00eda de Calificaci\u00f3n de Riesgos describe algunos pasos para identificar y cuantificar riesgos:</p> <ol> <li>Identificar un riesgo</li> <li>Factores para estimar la probabilidad</li> <li>Factores para estimar el impacto</li> <li>Determinar la gravedad del riesgo</li> <li>Decidir qu\u00e9 corregir</li> <li>Personalizar el modelo de calificaci\u00f3n de riesgos</li> </ol> <p>Las actividades involucradas en la creaci\u00f3n de un perfil de riesgo dependen mucho de los procesos y el nivel de madurez de la organizaci\u00f3n, lo cual est\u00e1 m\u00e1s all\u00e1 del alcance de esta Gu\u00eda del Desarrollador, por lo que consulte la lectura adicional que se lista a continuaci\u00f3n para obtener orientaci\u00f3n y ejemplos.</p>"},{"location":"es/03-requirements/02-risk/#remediacion","title":"Remediaci\u00f3n","text":"<p>Los riesgos identificados durante la evaluaci\u00f3n de amenazas, por ejemplo, a trav\u00e9s del perfil de riesgo o mediante modelado de amenazas, deben tener soluciones o remedios aplicados.</p> <p>Hay cuatro formas comunes de manejar el riesgo, a menudo representadas por el acr\u00f3nimo TAME:</p> <ol> <li> <p>Transferir: el riesgo se considera grave pero puede transferirse a otra parte</p> </li> <li> <p>Aceptar: el negocio es consciente del riesgo pero se ha decidido que no se necesita tomar ninguna acci\u00f3n;     el nivel de riesgo se considera aceptable</p> </li> <li> <p>Mitigar: el riesgo se considera lo suficientemente grave como para requerir la implementaci\u00f3n de controles de seguridad     para reducir el riesgo a un nivel aceptable</p> </li> <li> <p>Eliminar / Evitar: el riesgo puede evitarse o eliminarse completamente,     a menudo eliminando el objeto asociado con el riesgo</p> </li> </ol> <p>Ejemplos:</p> <ol> <li> <p>Transferir: un ejemplo com\u00fan de transferencia de riesgo es el uso de un seguro de terceros     en respuesta al riesgo de RansomWare.     Se pagan primas de seguro, pero las p\u00e9rdidas para el negocio est\u00e1n cubiertas por el seguro</p> </li> <li> <p>Aceptar: a veces un riesgo es lo suficientemente bajo en prioridad, o el resultado tolerable, para no mitigarlo,     un ejemplo podr\u00eda ser cuando se muestra la versi\u00f3n de software y esto es aceptable (o incluso deseable)</p> </li> <li> <p>Mitigar: es com\u00fan implementar un control de seguridad para mitigar el impacto de un riesgo, por ejemplo,     la sanitizaci\u00f3n de entrada o la codificaci\u00f3n de salida pueden usarse para informaci\u00f3n proporcionada     por una fuente no confiable, o el uso de canales de comunicaci\u00f3n cifrados para transferir informaci\u00f3n de alto riesgo</p> </li> <li> <p>Eliminar: un ejemplo puede ser que una aplicaci\u00f3n implemente funcionalidad heredada que ya no se usa,     si hay un riesgo de que sea explotada, el riesgo puede eliminarse quitando esta funcionalidad heredada</p> </li> </ol>"},{"location":"es/03-requirements/02-risk/#referencias","title":"Referencias","text":"<ul> <li>Metodolog\u00eda de Calificaci\u00f3n de Riesgos de OWASP</li> <li>NIST 800-30 - Gu\u00eda para Realizar Evaluaciones de Riesgos</li> <li>Metodolog\u00eda Armonizada de Evaluaci\u00f3n de Amenazas y Riesgos del Gobierno de Canad\u00e1</li> <li>Resumen de Evaluaci\u00f3n de Riesgos de Mozilla y Evaluaci\u00f3n R\u00e1pida de Riesgos (RRA)</li> <li>Sistema de Puntuaci\u00f3n de Vulnerabilidades Comunes (CVSS) utilizado para clasificaci\u00f3n de severidad y riesgo</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda de Desarrollador OWASP es un esfuerzo comunitario; si hay algo que necesite cambios entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/03-opencre/","title":"OpenCRE","text":"<p>El Enumeraci\u00f3n Com\u00fan Abierta de Requisitos (OpenCRE) es un cat\u00e1logo de requisitos de seguridad: enumerando temas de seguridad y proporcionando enlaces a varios est\u00e1ndares, hojas de referencia y gu\u00edas.</p> <p>El proyecto de Est\u00e1ndares de Integraci\u00f3n de OWASP incluye tanto OpenCRE como Seguridad y el Navegador de Seguridad de Aplicaciones, es un proyecto de documentaci\u00f3n de OWASP con estado de producci\u00f3n.</p>"},{"location":"es/03-requirements/03-opencre/#que-es-el-proyecto-de-estandares-de-integracion","title":"\u00bfQu\u00e9 es el proyecto de Est\u00e1ndares de Integraci\u00f3n?","text":"<p>El proyecto de Est\u00e1ndares de Integraci\u00f3n est\u00e1 en el centro de la comunidad de proyectos OWASP; proporciona orientaci\u00f3n sobre c\u00f3mo navegar y utilizar los numerosos proyectos dentro de OWASP. Lo hace de dos maneras, primero est\u00e1 el Navegador de Seguridad de Aplicaciones que proporciona un mapa visual de los proyectos de OWASP m\u00e1s importantes - a agosto de 2024 hay 345 proyectos OWASP por lo que esta es una visualizaci\u00f3n realmente \u00fatil. La segunda es la Enumeraci\u00f3n Com\u00fan Abierta de Requisitos (OpenCRE) que proporciona una referencia consolidada de est\u00e1ndares, hojas de referencias, herramientas y otras enumeraciones (como CWE).</p> <p>El proyecto de Est\u00e1ndares de Integraci\u00f3n tambi\u00e9n ha producido un informe sobre Fragmentaci\u00f3n de Seguridad de Aplicaciones de OWASP sobre OWASP y el Ciclo de Vida de Desarrollo de Software (SDLC) seguro. Esto proporciona una visi\u00f3n general de herramientas y t\u00e9cnicas utilizadas en la mayor\u00eda de los SDLC.</p>"},{"location":"es/03-requirements/03-opencre/#que-es-opencre","title":"\u00bfQu\u00e9 es OpenCRE?","text":"<p>OpenCRE es un cat\u00e1logo o enumeraci\u00f3n de varios est\u00e1ndares y material de referencia, incluyendo:</p> <ul> <li>CAPEC</li> <li>CWE</li> <li>Publicaciones Especiales de NIST 800-53 y 800-63</li> <li>OWASP ASVS</li> <li>OWASP Top10</li> <li>OWASP Controles Proactivos</li> <li>OWASP Hojas de Referencia</li> <li>OWASP WSTG</li> <li>ZAP</li> </ul> <p>El objetivo de este proyecto es 'Vincular todas las cosas con OpenCRE', lo que:</p> <ul> <li>Facilitar\u00e1 a ingenieros, oficiales de seguridad, evaluadores y departamentos de compras encontrar informaci\u00f3n relevante</li> <li>Facilitar\u00e1 a los creadores de est\u00e1ndares crear y mantener referencias</li> </ul>"},{"location":"es/03-requirements/03-opencre/#por-que-usar-opencre","title":"\u00bfPor qu\u00e9 usar OpenCRE?","text":"<p>OpenCRE: 'Todo organizado'</p> <p>OpenCRE es una herramienta poderosa que puede proporcionar a los desarrolladores enlaces a muchos recursos, y es f\u00e1cil de usar. Proporciona un conjunto consolidado de referencias sobre varios t\u00e9rminos y dominios de seguridad, y lo crucial es que se mantienen autom\u00e1ticamente actualizados. Proporciona un pr\u00e1ctico cat\u00e1logo de seguridad que se puede buscar para diversos est\u00e1ndares o t\u00e9rminos de seguridad.</p> <p>Adem\u00e1s de ser \u00fatil para preguntas cotidianas de seguridad, OpenCRE tambi\u00e9n puede usarse como secci\u00f3n de referencias en documentaci\u00f3n; vincular a OpenCRE en lugar de proporcionar una lista de referencias significa que los enlaces se mantienen autom\u00e1ticamente actualizados.</p>"},{"location":"es/03-requirements/03-opencre/#como-usar-opencre","title":"C\u00f3mo usar OpenCRE","text":"<p>El cat\u00e1logo de OpenCRE se puede acceder de formas tradicionales como usar b\u00fasquedas o vincular directamente. Por ejemplo, las referencias de OpenCRE a la Enumeraci\u00f3n de Debilidades Comunes pueden accederse usando la funci\u00f3n de b\u00fasqueda o vinculando directamente a un Requisito Com\u00fan Abierto espec\u00edfico.</p> <p>OpenCRE tambi\u00e9n es \u00fatil al proporcionar referencias en documentaci\u00f3n. OpenCRE puede usarse para estas referencias en lugar de listar varias referencias a un concepto o requisito de seguridad. Esto proporcionar\u00e1 enlaces a est\u00e1ndares, hojas de referencia, herramientas y otras enumeraciones - junto con otras fuentes que se han agregado con el tiempo - y todo se mantiene actualizado. \u00a1As\u00ed que no m\u00e1s enlaces rotos o referencias a versiones desactualizadas! :)</p> <p>Ahora estamos en la era de los modelos extensos de lenguaje, y OpenCRE ha adoptado esta tecnolog\u00eda. Respuestas inmediatas a preguntas de seguridad o b\u00fasquedas pueden proporcionarse por OpenCRE Chat.</p> <p>Por ejemplo, en respuesta a la pregunta \"\u00bfDe qu\u00e9 sirve la Gu\u00eda de Desarrollador de OWASP?\" OpenCRE Chat proporciona la siguiente respuesta:</p> <p>\"La Gu\u00eda de Desarrollador de OWASP proporciona una visi\u00f3n general completa de los riesgos de seguridad de aplicaciones y c\u00f3mo mitigarlos. Cubre temas como validaci\u00f3n de entrada, codificaci\u00f3n de salida, pr\u00e1cticas de codificaci\u00f3n segura y principios de dise\u00f1o seguro. La gu\u00eda es un recurso valioso para desarrolladores que quieren crear aplicaciones seguras.\"</p>"},{"location":"es/03-requirements/03-opencre/#referencias","title":"Referencias","text":"<ul> <li>OWASP OpenCRE</li> <li>Spotlight sobre OpenCRE</li> <li>Fragmentaci\u00f3n de Seguridad de Aplicaciones de OWASP</li> <li>Proyecto de Est\u00e1ndares de Integraci\u00f3n de OWASP</li> <li>Comprendiendo la Cadena Completa de Seguridad de Aplicaciones Usando OpenCRE org</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda de Desarrollador OWASP es un esfuerzo comunitario; si hay algo que necesite cambios entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/04-security-rat/","title":"SecurityRAT","text":"<p>La Herramienta de Automatizaci\u00f3n de RequisitosSecurityRAT de OWASP se utiliza para generar y gestionar requisitos de seguridad usando informaci\u00f3n del proyecto OWASP ASVS. Tambi\u00e9n proporciona un enfoque automatizado para la gesti\u00f3n de requisitos durante el desarrollo de aplicaciones frontend, de servidor y m\u00f3viles.</p> <p>En la actualidad es un proyecto de Incubadora de OWASP, pero es probable que pronto se actualice al estado de Laboratorio.</p>"},{"location":"es/03-requirements/04-security-rat/#que-es-securityrat","title":"\u00bfQu\u00e9 es SecurityRAT?","text":"<p>SecurityRAT es una herramienta complementaria para el conjunto de requisitos de ASVS; puede usarse para generar un conjunto inicial de requisitos a partir de ASVS y luego hacer un seguimiento del estado y las actualizaciones de estos requisitos. Viene con documentaci\u00f3n e instrucciones sobre c\u00f3mo instalar y ejecutar SecurityRAT.</p> <p>Para generar la lista inicial de requisitos, SecurityRAT necesita que se le proporcionen tres atributos definidos por ASVS:</p> <ul> <li>ID del cap\u00edtulo del Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones - por ejemplo 'V2 - Autenticaci\u00f3n'</li> <li>Nivel de Verificaci\u00f3n de Seguridad de Aplicaciones - el nivel de cumplimiento, por ejemplo 'L2'</li> <li>Autenticaci\u00f3n - si se utiliza autenticaci\u00f3n de inicio de sesi\u00f3n \u00fanico (SSO) o no</li> </ul> <p>SecurityRAT genera entonces una lista inicial de requisitos recomendados. Esta lista puede almacenarse en una base de datos de SecurityRAT que permite el seguimiento y actualizaci\u00f3n del conjunto de requisitos. SecurityRAT tambi\u00e9n proporciona integraci\u00f3n con JIRA de Atlassian para la creaci\u00f3n y seguimiento de problemas de software.</p> <p>La serie Spotlight de OWASP proporciona una visi\u00f3n general de lo que puede hacer SecurityRAT y c\u00f3mo usarlo: 'Proyecto 5 - OWASP SecurityRAT'.</p>"},{"location":"es/03-requirements/04-security-rat/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>En el momento de su redacci\u00f3n, ASVS tiene m\u00e1s de 280 requisitos sugeridos para el desarrollo de software seguro. Este n\u00famero de requisitos lleva tiempo para clasificarlos y determinar si son aplicables o no a un proyecto de desarrollo determinado.</p> <p>El uso de SecurityRAT para crear un subconjunto m\u00e1s manejable de los requisitos de ASVS es un beneficio directo tanto para arquitectos de seguridad como para el equipo de desarrollo. Adem\u00e1s, SecurityRAT permite el seguimiento y actualizaci\u00f3n de este conjunto de requisitos durante todo el ciclo de desarrollo, a\u00f1adiendo seguridad a la aplicaci\u00f3n al ayudar a garantizar que se cumplan los requisitos de seguridad.</p>"},{"location":"es/03-requirements/04-security-rat/#como-usar-securityrat","title":"C\u00f3mo usar SecurityRAT","text":"<p>Instale las aplicaciones de SecurityRAT de Producci\u00f3n y Desarrollo descargando una versi\u00f3n e instal\u00e1ndola en el Kit de Desarrollo Java JDK11. Alternativamente, descargue y ejecute la imagen Docker desde DockerHub. Configure SecurityRAT consultando la documentaci\u00f3n de implementaci\u00f3n; esto no es muy sencillo, por lo que para comenzar hay una demostraci\u00f3n en l\u00ednea disponible.</p> <p>Al iniciar sesi\u00f3n en el sitio de demostraci\u00f3n, usando las credenciales de la p\u00e1gina del proyecto, se muestra la definici\u00f3n de un conjunto de requisitos o la importaci\u00f3n de un conjunto existente. Suponiendo que queremos un nuevo conjunto de requisitos, asigne un nombre al artefacto de requisitos y luego seleccione secciones/cap\u00edtulos espec\u00edficos de ASVS de la lista:</p> <ul> <li>V1 - Arquitectura, Dise\u00f1o y Modelado de Amenazas</li> <li>V2 - Autenticaci\u00f3n</li> <li>V3 - Gesti\u00f3n de Sesiones</li> <li>V4 - Control de Acceso</li> <li>V5 - Validaci\u00f3n, Sanitizaci\u00f3n y Codificaci\u00f3n</li> <li>V6 - Criptograf\u00eda Almacenada</li> <li>V7 - Manejo de Errores y Registro</li> <li>V8 - Protecci\u00f3n de Datos</li> <li>V9 - Comunicaci\u00f3n</li> <li>V10 - C\u00f3digo Malicioso</li> <li>V11 - L\u00f3gica de Negocio</li> <li>V12 - Archivos y Recursos</li> <li>V13 - API y Servicio Web</li> <li>V14 - Configuraci\u00f3n</li> </ul> <p>o d\u00e9jelo en blanco para incluir todos los requisitos de verificaci\u00f3n.</p> <p>Seleccione el nivel usando los niveles de cumplimiento de seguridad definidos por ASVS:</p> <ul> <li>Nivel 1 es para niveles de garant\u00eda bajos y completamente verificables mediante pruebas de penetraci\u00f3n</li> <li>Nivel 2 es para aplicaciones que contienen datos sensibles y es el nivel recomendado para la mayor\u00eda de las aplicaciones</li> <li>Nivel 3 es para las aplicaciones m\u00e1s cr\u00edticas</li> </ul> <p>Finalmente, seleccione si se est\u00e1 utilizando autenticaci\u00f3n SSO y genere una lista de requisitos. Este artefacto de requisitos se almacena ahora en SecurityRAT y puede recuperarse en sesiones posteriores.</p> <p>SecurityRAT presenta entonces una pantalla de administraci\u00f3n que permite el seguimiento y edici\u00f3n de los requisitos de verificaci\u00f3n de ASVS. Consulte el Spotlight de OWASP sobre SecurityRAT para obtener una explicaci\u00f3n de c\u00f3mo integrarlo con JIRA de Atlassian.</p>"},{"location":"es/03-requirements/04-security-rat/#que-es-securitycat","title":"\u00bfQu\u00e9 es SecurityCAT?","text":"<p>SecurityCAT (Herramienta de Automatizaci\u00f3n de Cumplimiento) es una extensi\u00f3n de SecurityRAT destinada a la prueba autom\u00e1tica de requisitos. No existe una implementaci\u00f3n real de SecurityCAT, SecurityRAT proporciona una API que permite crear una herramienta de cumplimiento, por lo que este puede ser un desarrollo futuro de SecurityRAT.</p>"},{"location":"es/03-requirements/04-security-rat/#referencias","title":"Referencias","text":"<ul> <li>SecurityRAT de OWASP</li> <li>Documentaci\u00f3n de SecurityRAT de OWASP</li> <li>SecurityCAT de OWASP</li> <li>Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda de Desarrollador OWASP es un esfuerzo comunitario; si hay algo que necesite cambios entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/05-asvs/","title":"ASVS","text":"<p>El Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) es un proyecto insignia de OWASP establecido desde hace tiempo, y es ampliamente utilizado para sugerir requisitos de seguridad, as\u00ed como para la verificaci\u00f3n central de aplicaciones web.</p> <p>Se puede descargar desde la p\u00e1gina del proyecto OWASP en varios idiomas y formatos: PDF, Word, CSV, XML y JSON. Dicho esto, la forma recomendada de consumir el ASVS es acceder directamente a las p\u00e1ginas markdown de github - esto asegurar\u00e1 que se utilice la versi\u00f3n m\u00e1s reciente.</p>"},{"location":"es/03-requirements/05-asvs/#que-es-asvs","title":"\u00bfQu\u00e9 es ASVS?","text":"<p>El ASVS es un est\u00e1ndar abierto que establece la cobertura y el nivel de rigor esperados cuando se trata de realizar la verificaci\u00f3n de seguridad de aplicaciones web. El est\u00e1ndar tambi\u00e9n proporciona una base para probar cualquier control t\u00e9cnico de seguridad en el que se conf\u00eda para proteger contra vulnerabilidades en la aplicaci\u00f3n.</p> <p>El ASVS se divide en varias secciones:</p> <ul> <li>V1 Arquitectura, Dise\u00f1o y Modelado de Amenazas</li> <li>V2 Autenticaci\u00f3n</li> <li>V3 Gesti\u00f3n de Sesiones</li> <li>V4 Control de Acceso</li> <li>V5 Validaci\u00f3n, Sanitizaci\u00f3n y Codificaci\u00f3n</li> <li>V6 Criptograf\u00eda Almacenada</li> <li>V7 Manejo de Errores y Registro</li> <li>V8 Protecci\u00f3n de Datos</li> <li>V9 Comunicaci\u00f3n</li> <li>V10 C\u00f3digo Malicioso</li> <li>V11 L\u00f3gica de Negocio</li> <li>V12 Archivos y Recursos</li> <li>V13 API y Servicios Web</li> <li>V14 Configuraci\u00f3n</li> </ul> <p>El ASVS define tres niveles de verificaci\u00f3n de seguridad:</p> <ol> <li>aplicaciones que solo necesitan niveles bajos de garant\u00eda; estas aplicaciones   son completamente comprobables mediante pruebas de penetraci\u00f3n</li> <li>aplicaciones que contienen datos sensibles que requieren protecci\u00f3n;   el nivel recomendado para la mayor\u00eda de las aplicaciones</li> <li>las aplicaciones m\u00e1s cr\u00edticas que requieren el m\u00e1s alto nivel de confianza</li> </ol> <p>La mayor\u00eda de las aplicaciones apuntar\u00e1n al Nivel 2, y solo aquellas aplicaciones que realizan transacciones de alto valor, o contienen datos m\u00e9dicos sensibles, aspirar\u00e1n al m\u00e1s alto nivel de confianza en el nivel 3.</p>"},{"location":"es/03-requirements/05-asvs/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>El ASVS es utilizado por muchas organizaciones como base para la verificaci\u00f3n de sus aplicaciones web. Est\u00e1 bien establecido, las versiones anteriores fueron escritas en 2008, y ha sido continuamente respaldado desde entonces. El ASVS es exhaustivo, por ejemplo, la versi\u00f3n 4.0.3 tiene una lista de 286 requisitos de verificaci\u00f3n, y estos requisitos de verificaci\u00f3n han sido creados y acordados por una amplia comunidad de seguridad.</p> <p>Por estas razones, el ASVS es un buen punto de partida para crear y actualizar requisitos de seguridad para aplicaciones web. El uso generalizado de este est\u00e1ndar abierto significa que los equipos de desarrollo y proveedores pueden ya estar familiarizados con los requisitos, lo que facilita la adopci\u00f3n de los requisitos de seguridad.</p>"},{"location":"es/03-requirements/05-asvs/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>La serie OWASP Spotlight proporciona una visi\u00f3n general del ASVS y sus usos: 'Proyecto 19 - Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) de OWASP'.</p> <p>Se debe elegir el nivel apropiado de verificaci\u00f3n de los niveles ASVS:</p> <ul> <li>Nivel 1: Primeros pasos, automatizado, o vista de toda la cartera</li> <li>Nivel 2: La mayor\u00eda de las aplicaciones</li> <li>Nivel 3: Alto valor, alta garant\u00eda o alta seguridad</li> </ul> <p>Herramientas como SecurityRAT pueden ayudar a crear un subconjunto m\u00e1s manejable de los requisitos de seguridad ASVS, permitiendo el enfoque y las decisiones sobre si cada uno es aplicable a la aplicaci\u00f3n web o no.</p> <p>Las Hojas de Referencia (Cheat Sheets) de OWASP han sido indexadas espec\u00edficamente para cada secci\u00f3n del ASVS, que pueden usarse como documentaci\u00f3n para ayudar a decidir si una categor\u00eda de requisitos debe incluirse en el esquema de pruebas.</p>"},{"location":"es/03-requirements/05-asvs/#referencias","title":"Referencias","text":"<ul> <li>Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) de OWASP</li> <li>Hojas de Referencias para ASVS de OWASP</li> <li>SecurityRAT de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiar entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/06-mas/","title":"MAS","text":"<p>El proyecto insignia de OWASP Seguridad de Aplicaciones M\u00f3viles (MAS) proporciona est\u00e1ndares de la industria para la seguridad de aplicaciones m\u00f3viles.</p> <p>El proyecto MAS cubre los procesos, t\u00e9cnicas y herramientas utilizados para las pruebas de seguridad de aplicaciones m\u00f3viles. Proporciona un conjunto de casos de prueba que permite a los testeadores entregar resultados consistentes y completos. El proyecto OWASP MAS proporciona tanto el Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones M\u00f3viles (MASVS) para aplicaciones m\u00f3viles como la Gu\u00eda de Pruebas de Seguridad de Aplicaciones M\u00f3viles (MASTG).</p>"},{"location":"es/03-requirements/06-mas/#que-es-masvs","title":"\u00bfQu\u00e9 es MASVS?","text":"<p>El OWASP MASVS es utilizado por arquitectos y desarrolladores de software m\u00f3vil para desarrollar aplicaciones m\u00f3viles seguras, as\u00ed como por evaluadores de seguridad para garantizar la integridad y consistencia de los resultados de las pruebas. El proyecto MAS tiene varios usos; cuando se trata de definir requisitos, el MASVS contiene una lista de controles de seguridad para aplicaciones m\u00f3viles.</p> <p>Los controles de seguridad se dividen en varias categor\u00edas:</p> <ul> <li>MASVS-STORAGE / Hojas de Referencia</li> <li>MASVS-CRYPTO / Hojas de Referencia</li> <li>MASVS-AUTH / Hojas de Referencia</li> <li>MASVS-NETWORK / Hojas de Referencia</li> <li>MASVS-PLATFORM / Hojas de Referencia</li> <li>MASVS-CODE / Hojas de Referencia</li> <li>MASVS-RESILIENCE / Hojas de Referencia</li> <li>MASVS-PRIVACY / Hojas de Referencia</li> </ul> <p>La \u00faltima categor\u00eda, MASVS-PRIVACY, est\u00e1 siendo reelaborada por lo que est\u00e1 sujeta a cambios.</p>"},{"location":"es/03-requirements/06-mas/#por-que-usar-masvs","title":"\u00bfPor qu\u00e9 usar MASVS?","text":"<p>El OWASP MASVS es el est\u00e1ndar de la industria para seguridad de aplicaciones m\u00f3viles y se espera que cualquier conjunto dado de requisitos de seguridad satisfaga el MASVS. Al definir requisitos de seguridad para aplicaciones m\u00f3viles, cada control de seguridad en el MASVS debe ser considerado.</p>"},{"location":"es/03-requirements/06-mas/#como-usar-masvs","title":"C\u00f3mo usar MASVS","text":"<p>MASVS puede ser accedido en l\u00ednea y se pueden seguir los enlaces para cada control de seguridad. Adem\u00e1s, MASVS puede descargarse como PDF que puede, por ejemplo, utilizarse para fines de evidencia o cumplimiento. Inspeccione cada control dentro de MASVS y consid\u00e9relo como un requisito de seguridad potencial.</p> <p>Las Hojas de Referencia de OWASP han sido indexadas espec\u00edficamente para cada categor\u00eda del MASVS, que pueden utilizarse como gu\u00eda para decidir si la categor\u00eda debe incluirse en el esquema de pruebas.</p>"},{"location":"es/03-requirements/06-mas/#referencias","title":"Referencias","text":"<ul> <li>Seguridad de Aplicaciones M\u00f3viles de OWASP(MAS - Mobile Application Security)</li> <li>Proyecto MAS</li> <li>Lista de verificaci\u00f3n MAS</li> <li>Est\u00e1ndar de Verificaci\u00f3n MAS (MASVS)</li> <li>Hojas de Referencia de Seguridad de Aplicaciones M\u00f3viles de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiar entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/03-requirements/07-skf/","title":"SKF","text":"<p>El framework de conocimientos de seguridadSecurity Knowledge Framework (SKF) es una aplicaci\u00f3n de sistema experto que utiliza varios proyectos de c\u00f3digo abierto para apoyar a los equipos de desarrollo y arquitectos de seguridad en la construcci\u00f3n de aplicaciones seguras. El SKF se basa en el Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) de OWASP para ayudar a los desarrolladores tanto en las fases previas al desarrollo como posteriores al desarrollo y crear aplicaciones seguras por dise\u00f1o.</p> <p>Despu\u00e9s de haber sido un proyecto insignia de OWASP durante muchos a\u00f1os, el SKF ya no forma parte de la organizaci\u00f3n OWASP; y continuar\u00e1 siendo referenciado en el OWASP Wayfinder y otros proyectos de OWASP porque es un proyecto insignia para cualquier organizaci\u00f3n.</p>"},{"location":"es/03-requirements/07-skf/#que-es-el-security-knowledge-framework","title":"\u00bfQu\u00e9 es el Security Knowledge Framework?","text":"<p>El SKF es una aplicaci\u00f3n web que est\u00e1 disponible en el repositorio de github. Hay una versi\u00f3n demo de SKF que es \u00fatil para explorar los m\u00faltiples beneficios del SKF. Tenga en cuenta que SKF est\u00e1 en proceso de migraci\u00f3n a un nuevo repositorio por lo que el enlace de descarga puede cambiar.</p> <p>El SKF proporciona capacitaci\u00f3n y orientaci\u00f3n para la seguridad de aplicaciones:</p> <ul> <li>Organizador de requisitos</li> <li>Cursos de aprendizaje:</li> <li>Desarrollo de Software Seguro (LFD121)</li> <li>Entendiendo las 10 Principales Amenazas de Seguridad de OWASP (SKF100)</li> <li>Desarrollo de Software Seguro: Implementaci\u00f3n (LFD105x)</li> <li>Laboratorios de pr\u00e1ctica</li> <li>Documentaci\u00f3n sobre instalaci\u00f3n y uso del SKF</li> </ul>"},{"location":"es/03-requirements/07-skf/#por-que-usar-el-skf-para-requisitos","title":"\u00bfPor qu\u00e9 usar el SKF para requisitos?","text":"<p>El SKF organiza los requisitos de seguridad en varias categor\u00edas que proporcionan un buen punto de partida para la seguridad de aplicaciones.</p> <ul> <li>API y Servicio Web</li> <li>Control de Acceso</li> <li>Arquitectura, Dise\u00f1o y Modelado de Amenazas</li> <li>Autenticaci\u00f3n</li> <li>L\u00f3gica de Negocio</li> <li>Comunicaci\u00f3n</li> <li>Configuraci\u00f3n</li> <li>Protecci\u00f3n de Datos</li> <li>Manejo de Errores y Registro</li> <li>Archivos y Recursos</li> <li>C\u00f3digo Malicioso</li> <li>Gesti\u00f3n de Sesiones</li> <li>Criptograf\u00eda Almacenada</li> <li>Validaci\u00f3n, Sanitizaci\u00f3n y Codificaci\u00f3n</li> </ul>"},{"location":"es/03-requirements/07-skf/#como-usar-el-skf-para-requisitos","title":"C\u00f3mo usar el SKF para requisitos","text":"<p>Visite el sitio web de la herramienta de requisitos y seleccione los requisitos relevantes de las diversas categor\u00edas. Exporte la selecci\u00f3n al formato de su elecci\u00f3n (Markdown, hoja de c\u00e1lculo CSV o texto plano) y util\u00edcelo como punto de partida para los requisitos de seguridad de la aplicaci\u00f3n.</p> <p>La serie OWASP Spotlight proporciona una visi\u00f3n general del SKF: 'Proyecto 7 - Security Knowledge Framework (SKF)'.</p>"},{"location":"es/03-requirements/07-skf/#referencias","title":"Referencias","text":"<ul> <li>Security Knowledge Framework (SKF)</li> <li>Cursos y laboratorios de SKF</li> <li>Requisitos de SKF</li> <li>OWASP Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS)</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiar entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/","title":"Descripci\u00f3n","text":"<p>Refiri\u00e9ndose a la Hoja de Referencia de Dise\u00f1o de Producto Seguro, el prop\u00f3sito de la arquitectura y dise\u00f1o seguros es garantizar que todos los productos cumplan o excedan los requisitos de seguridad establecidos por la organizaci\u00f3n, centr\u00e1ndose en la seguridad vinculada a los componentes y tecnolog\u00edas utilizados durante el desarrollo de la aplicaci\u00f3n.</p> <p>El Dise\u00f1o de Arquitectura Segura examina la selecci\u00f3n y composici\u00f3n de componentes que forman la base de la soluci\u00f3n. La Gesti\u00f3n de Tecnolog\u00eda examina la seguridad de las tecnolog\u00edas de apoyo utilizadas durante el desarrollo, despliegue y operaciones, como el stack de tecnolog\u00eda de desarrollo y sus herramientas, herramientas de despliegue, y sistemas operativos y sus herramientas.</p> <p>Un dise\u00f1o seguro ayudar\u00e1 a establecer valores predeterminados seguros, minimizar el \u00e1rea de superficie de ataque y fallar de manera segura hacia valores predeterminados bien definidos y comprendidos. Tambi\u00e9n considerar\u00e1 y seguir\u00e1 varios principios, como:</p> <ul> <li>Privilegio M\u00ednimo y Separaci\u00f3n de Deberes</li> <li>Defensa en Profundidad</li> <li>Confianza Cero</li> <li>Seguridad en lo Abierto</li> </ul> <p>Un Ciclo de Vida de Desarrollo Seguro (SDLC) ayuda a asegurar que todas las decisiones de seguridad tomadas sobre el producto en desarrollo sean elecciones expl\u00edcitas y resulten en el nivel correcto de seguridad para el dise\u00f1o del producto. Se pueden utilizar varios ciclos de vida de desarrollo seguro y generalmente incluyen el modelado de amenazas en el proceso de dise\u00f1o.</p> <p>Las listas de verificaci\u00f3n y las Hojas de Referencia son herramientas importantes durante el proceso de dise\u00f1o; proporcionan una referencia f\u00e1cil de conocimiento y ayudan a evitar la repetici\u00f3n de errores y fallos de dise\u00f1o.</p> <p>El Dise\u00f1o de aplicaciones de software es una de las principales funciones de negocio descritas en el Modelo de Madurez de Aseguramiento de Software (SAMM), e incluye pr\u00e1cticas de seguridad:</p> <ul> <li>Evaluaci\u00f3n de Amenazas</li> <li>Requisitos de Seguridad</li> <li>Arquitectura de Seguridad</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/03-mas-checklist/","title":"Lista de verificaci\u00f3n MAS","text":"<p>El proyecto insignia de OWASP Seguridad de Aplicaciones M\u00f3viles (MAS) proporciona est\u00e1ndares de la industria para la seguridad de aplicaciones m\u00f3viles.</p> <p>El proyecto OWASP MAS proporciona el Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones M\u00f3viles (MASVS) para aplicaciones m\u00f3viles y una completa Gu\u00eda de Pruebas de Seguridad de Aplicaciones M\u00f3viles (MASTG).</p> <p>La Lista de verificaci\u00f3n de Seguridad de Aplicaciones M\u00f3viles contiene enlaces a los casos de prueba MASTG para cada control MASVS.</p>"},{"location":"es/04-design/03-mas-checklist/#que-es-la-lista-de-verificacion-mas","title":"\u00bfQu\u00e9 es la Lista de verificaci\u00f3n MAS?","text":"<p>La Lista de verificaci\u00f3n MAS proporciona una lista que hace seguimiento de los casos de prueba MASTG para un control MASVS determinado. Esta Lista de verificaci\u00f3n MAS est\u00e1 dividida en categor\u00edas que coinciden con las categor\u00edas MASVS:</p> <ul> <li>MASVS-STORAGE almacenamiento de datos sensibles</li> <li>MASVS-CRYPTO mejores pr\u00e1cticas de criptograf\u00eda</li> <li>MASVS-AUTH mecanismos de autenticaci\u00f3n y autorizaci\u00f3n</li> <li>MASVS-NETWORK comunicaciones de red</li> <li>MASVS-PLATFORM interacciones con la plataforma m\u00f3vil</li> <li>MASVS-CODE puntos de entrada de la plataforma y datos junto con software de terceros</li> <li>MASVS-RESILIENCE integridad y ejecuci\u00f3n en una plataforma confiable</li> <li>MASVS-PRIVACY privacidad de usuarios, datos y recursos</li> </ul> <p>Adem\u00e1s de los enlaces web, hay una hoja de c\u00e1lculo descargable.</p>"},{"location":"es/04-design/03-mas-checklist/#por-que-usarla","title":"\u00bfPor qu\u00e9 usarla?","text":"<p>El OWASP MASVS es el est\u00e1ndar de la industria para seguridad de aplicaciones m\u00f3viles. Si se est\u00e1 aplicando el MASTG a una aplicaci\u00f3n m\u00f3vil, la Lista de verificaci\u00f3n MAS es una referencia \u00fatil que tambi\u00e9n puede utilizarse para fines de cumplimiento.</p>"},{"location":"es/04-design/03-mas-checklist/#como-utilizarla","title":"C\u00f3mo utilizarla","text":"<p>La versi\u00f3n en l\u00ednea es \u00fatil para listar los controles MASVS y qu\u00e9 pruebas MASTG aplican. Siga los enlaces para acceder a los controles y pruebas individuales.</p> <p>La descarga de la hoja de c\u00e1lculo permite registrar el estado de cada prueba, con una hoja separada para cada categor\u00eda MASVS. Este registro de resultados de pruebas puede utilizarse como evidencia para fines de cumplimiento.</p>"},{"location":"es/04-design/03-mas-checklist/#referencias","title":"Referencias","text":"<ul> <li>Proyecto de Seguridad de Aplicaciones M\u00f3viles (MAS)</li> <li>Lista de verificaci\u00f3n MAS</li> <li>Est\u00e1ndar de Verificaci\u00f3n MAS (MASVS)</li> <li>Gu\u00eda de Pruebas MAS (MASTG)</li> <li>Hoja de Referencia de OWASP sobre Seguridad de Aplicaciones M\u00f3viles</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/01-threat-modeling/","title":"Descripci\u00f3n","text":"<p>Seg\u00fan la Hoja de Referencia de Modelado de Amenazas, el modelado de amenazas es un enfoque estructurado para identificar y priorizar amenazas potenciales a un sistema. El proceso de modelado de amenazas incluye determinar el valor que las posibles mitigaciones tendr\u00edan para reducir o neutralizar estas amenazas.</p> <p>Evaluar las amenazas potenciales durante la fase de dise\u00f1o de su proyecto puede ahorrar recursos significativos si durante una fase posterior del proyecto se requiere refactorizaci\u00f3n para incluir mitigaciones de riesgos. Los resultados de las actividades de modelado de amenazas generalmente incluyen:</p> <ul> <li>Documentar c\u00f3mo fluyen los datos a trav\u00e9s de un sistema para identificar d\u00f3nde podr\u00eda ser atacado</li> <li>Identificar tantas amenazas potenciales al sistema como sea posible</li> <li>Sugerir controles de seguridad que pueden implementarse para reducir la probabilidad o el impacto de una amenaza potencial</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/","title":"Modelado de amenazas en la pr\u00e1ctica","text":"<p>Esta secci\u00f3n trata sobre el Modelado de Amenazas, una actividad descrita en el Modelo de Madurez de Aseguramiento de Software de OWASP (SAMM). El modelado de amenazas es parte de la pr\u00e1ctica de seguridad de Evaluaci\u00f3n de Amenazas en la funci\u00f3n empresarial de Dise\u00f1o.</p> <p>Gran parte del material de esta secci\u00f3n est\u00e1 extra\u00eddo del proyecto de Modelado de Amenazas de OWASP, y la filosof\u00eda de esta secci\u00f3n intenta seguir el Manifiesto de Modelado de Amenazas.</p> <p></p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#descripcion-general","title":"Descripci\u00f3n general","text":"<p>Las actividades de modelado de amenazas intentan descubrir lo que podr\u00eda salir mal dentro de un sistema y determinar qu\u00e9 hacer al respecto. Los resultados del modelado de amenazas toman diversas formas, incluyendo modelos y diagramas de sistemas, listas de amenazas, mitigaciones o suposiciones, notas de reuniones y m\u00e1s. Esto puede reunirse en un \u00fanico documento de modelo de amenazas; una representaci\u00f3n estructurada de toda la informaci\u00f3n que afecta a la seguridad de una aplicaci\u00f3n. Una buena visi\u00f3n general de esta actividad se proporciona en la secci\u00f3n sobre modelado de amenazas del proyecto Cultura de Seguridad.</p> <p>En esencia, es una visi\u00f3n de la aplicaci\u00f3n y su entorno a trav\u00e9s de cristales de seguridad.</p> <p>El modelado de amenazas es un proceso para capturar, organizar y analizar toda esta informaci\u00f3n y permite la toma de decisiones informadas sobre el riesgo de seguridad de la aplicaci\u00f3n. Adem\u00e1s de producir un modelo, los esfuerzos t\u00edpicos de modelado de amenazas tambi\u00e9n producen una lista priorizada de vulnerabilidades de seguridad potenciales en el concepto, los requisitos, el dise\u00f1o o la implementaci\u00f3n. Cualquier vulnerabilidad potencial que se haya identificado a partir del modelo debe ser remediada utilizando una de las estrategias comunes: mitigar, eliminar, transferir o aceptar la amenaza de ser explotada.</p> <p>Hay muchas razones para hacer modelado de amenazas, pero la m\u00e1s importante es que esta actividad es \u00fatil, probablemente es la \u00fanica etapa en un ciclo de vida de desarrollo donde un equipo se detiene y pregunta: \"\u00bfQu\u00e9 puede salir mal?\".</p> <p>Hay otras razones para el modelado de amenazas, por ejemplo, el cumplimiento de est\u00e1ndares o el an\u00e1lisis para la recuperaci\u00f3n ante desastres, pero el objetivo principal del modelado de amenazas es remediar vulnerabilidades (posibles) antes de que los actores maliciosos puedan explotarlas.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#que-es-el-modelado-de-amenazas","title":"Qu\u00e9 es el modelado de amenazas","text":"<p>El modelado de amenazas trabaja para identificar, comunicar y comprender las amenazas y mitigaciones dentro del contexto de proteger algo de valor.</p> <p>El modelado de amenazas se puede aplicar a una amplia gama de cosas, incluyendo software, aplicaciones, sistemas, redes, sistemas distribuidos, cosas en Internet de las cosas, procesos de negocio, etc. Hay muy pocos productos t\u00e9cnicos que no puedan tener un modelado de amenazas; que sea m\u00e1s o menos gratificante, dependiendo de cu\u00e1nto \u00e9ste se comunica, o interact\u00faa, con el mundo.</p> <p>Un documento de modelo de amenazas es un registro del proceso de modelado de amenazas, y a menudo incluye:</p> <ul> <li>una descripci\u00f3n / dise\u00f1o / modelo de lo que es preocupante</li> <li>una lista de suposiciones que pueden ser verificadas o rechazadas en el futuro     a medida que cambia el panorama de amenazas</li> <li>amenazas potenciales al sistema</li> <li>remediaci\u00f3n / acciones a tomar para cada amenaza</li> <li>formas de validar el modelo y las amenazas, y verificaci\u00f3n del \u00e9xito de las acciones tomadas</li> </ul> <p>El modelo de amenazas debe estar en una forma que pueda ser f\u00e1cilmente revisada y modificada durante las discusiones posteriores de modelado de amenazas.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#por-que-hacerlo","title":"Por qu\u00e9 hacerlo","text":"<p>Como todas las actividades de ingenier\u00eda, el esfuerzo dedicado al modelado de amenazas tiene que ser justificable. Raramente cualquier proyecto o desarrollo tiene esfuerzo de ingenier\u00eda que \"salga sobrando\", y los beneficios del modelado de amenazas tienen que superar el costo de ingenier\u00eda de esta actividad. Usualmente esto es dif\u00edcil de cuantificar; una forma m\u00e1s f\u00e1cil de abordarlo puede ser preguntar \u00bfcu\u00e1les son los costos de no hacer modelado de amenazas? Estos costos pueden consistir en fallas de cumplimiento, un mayor riesgo de ser explotado, da\u00f1o a la reputaci\u00f3n, etc.</p> <p>La inclusi\u00f3n del modelado de amenazas en las actividades de desarrollo seguro puede ayudar a:</p> <ul> <li>Construir un dise\u00f1o seguro</li> <li>Inversi\u00f3n eficiente de recursos; priorizar adecuadamente la seguridad, el desarrollo y otras tareas</li> <li>Reunir a Seguridad y Desarrollo para colaborar en una comprensi\u00f3n compartida, informando el desarrollo del sistema</li> <li>Identificar amenazas y requisitos de cumplimiento, y evaluar su riesgo</li> <li>Definir y construir los controles requeridos.</li> <li>Equilibrar riesgos, controles y usabilidad</li> <li>Identificar d\u00f3nde construir un control es innecesario, basado en un riesgo aceptable</li> <li>Documentar amenazas y mitigaci\u00f3n</li> <li>Asegurar que los requisitos de negocio (o metas) est\u00e9n adecuadamente protegidos frente a     un actor malicioso, accidentes u otras causas de impacto</li> <li>Identificaci\u00f3n de casos de prueba de seguridad / escenarios de prueba de seguridad     para probar los requisitos de seguridad</li> </ul> <p>El modelado de amenazas tambi\u00e9n proporciona una clara \"l\u00ednea de visi\u00f3n\" (mediante l\u00edmites y alcances del objetivo) a trav\u00e9s de un proyecto que puede ser utilizada para justificar otros esfuerzos de seguridad. El modelo de amenazas permite que las decisiones de seguridad se tomen racionalmente, con toda la informaci\u00f3n disponible, para que las decisiones de seguridad puedan ser adecuadamente respaldadas. El proceso de modelado de amenazas naturalmente produce un argumento de aseguramiento que puede ser utilizado para explicar y defender la seguridad de una aplicaci\u00f3n. Un argumento de aseguramiento comienza con algunas afirmaciones de alto nivel y luego las justifica con sub-afirmaciones o evidencias.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#cuando-modelar-amenazas","title":"Cu\u00e1ndo modelar amenazas","text":"<p>No hay un momento incorrecto para hacer modelado de amenazas; cuanto antes se haga en el ciclo de vida del desarrollo, m\u00e1s beneficioso es, pero el modelado de amenazas tambi\u00e9n es \u00fatil en cualquier momento durante el desarrollo de la aplicaci\u00f3n.</p> <p>El modelado de amenazas se aplica mejor de forma continua a lo largo de un proyecto de desarrollo de software. El proceso es esencialmente el mismo en diferentes niveles de abstracci\u00f3n, aunque la informaci\u00f3n se vuelve cada vez m\u00e1s granular a lo largo del ciclo de vida del desarrollo. Idealmente, un modelo de amenazas de alto nivel deber\u00eda definirse en la fase de concepto o planificaci\u00f3n, y luego refinarse durante las fases de desarrollo. A medida que se agregan m\u00e1s detalles al sistema, se identifican nuevos vectores de ataque, por lo que el proceso continuo de modelado de amenazas debe examinar, diagnosticar y abordar estas amenazas.</p> <p>N\u00f3tese que es una parte natural del refinamiento de un sistema que se expongan nuevas amenazas. Cuando se selecciona una tecnolog\u00eda particular, como Java por ejemplo, se asume la responsabilidad de identificar las nuevas amenazas que se crean por esa elecci\u00f3n. Incluso decisiones de implementaci\u00f3n como usar expresiones regulares para la validaci\u00f3n introducen nuevas amenazas potenciales que hay que tratar.</p> <p>Modelado de amenazas: cuanto antes mejor, pero nunca demasiado tarde</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#preguntas-que-hacer","title":"Preguntas que hacer","text":"<p>A menudo, el modelado de amenazas es una actividad conceptual m\u00e1s que un proceso riguroso, donde se re\u00fanen equipos de desarrollo y se les pide que piensen en formas de comprometer la seguridad de su sistema. Para proporcionar algo de estructura, es \u00fatil comenzar con el Marco de Cuatro Preguntas de Shostack:</p> <p>1 \u00bfEn qu\u00e9 estamos trabajando?</p> <p>Como punto de partida, se debe definir el alcance del Modelo de Amenazas. Esto requerir\u00e1 una comprensi\u00f3n de la aplicaci\u00f3n que se est\u00e1 construyendo, y algunos ejemplos de entradas para el modelo de amenazas podr\u00edan ser:</p> <ul> <li>Diagramas de arquitectura</li> <li>Transiciones de flujo de datos</li> <li>Clasificaciones de datos</li> </ul> <p>Es com\u00fan representar las respuestas a esta pregunta con uno o m\u00e1s diagramas de flujo de datos y a menudo diagramas complementarios como diagramas de secuencia de mensajes.</p> <p>Es mejor reunir a personas de diferentes roles con suficiente conciencia t\u00e9cnica y de riesgo para que puedan acordar el marco a utilizar durante el ejercicio de modelado de amenazas.</p> <p>2 \u00bfQu\u00e9 puede salir mal?</p> <p>Esta es una actividad de investigaci\u00f3n para encontrar las principales amenazas que se aplican a tu aplicaci\u00f3n. Hay muchas formas de abordar la pregunta, incluida la discusi\u00f3n abierta o el uso de una estructura para ayudar a pensarlo. Las t\u00e9cnicas y metodolog\u00edas a considerar incluyen CIA, STRIDE, LINDDUN, cadenas de eliminaci\u00f3n cibern\u00e9tica, PASTA, patrones de ataque comunes (CAPEC) y otros.</p> <p>Existen recursos disponibles que ayudar\u00e1n a identificar amenazas y vulnerabilidades. OWASP proporciona un conjunto de tarjetas, Cornucopia, que ofrecen sugerencias y explicaciones para vulnerabilidades generales. El juego de tarjetas de modelado de amenazas Elevation of Privileges es una forma f\u00e1cil de comenzar con el modelado de amenazas, y existe la versi\u00f3n OWASP de Serpientes y Escaleras que realmente gamifica estas actividades.</p> <p>3 \u00bfQu\u00e9 vamos a hacer al respecto?</p> <p>En esta fase, se convierte los hallazgos del modelo de amenazas en acciones espec\u00edficas. Considere la remediaci\u00f3n apropiada para cada amenaza identificada: Transferir, Evitar, Mitigar o Eliminar.</p> <p>4 \u00bfHicimos un trabajo lo suficientemente bueno?</p> <p>Finalmente, realiza una actividad retrospectiva sobre el trabajo identificado para verificar calidad, viabilidad, progreso o planificaci\u00f3n.</p> <p>El Manual de Modelado de Amenazas de OWASP profundiza en estos aspectos pr\u00e1cticos y proporciona estrategias para mantener el modelado de amenazas dentro de una organizaci\u00f3n.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#como-hacerlo","title":"C\u00f3mo hacerlo","text":"<p>No existe un \u00fanico proceso para el modelado de amenazas. C\u00f3mo se hace en la pr\u00e1ctica variar\u00e1 seg\u00fan la cultura de la organizaci\u00f3n, seg\u00fan qu\u00e9 tipo de sistema/aplicaci\u00f3n se est\u00e1 modelando y seg\u00fan las preferencias del propio equipo de desarrollo. Las diversas t\u00e9cnicas y conceptos se discuten en la Hoja de Referencia de Modelado de Amenazas y se pueden resumir as\u00ed:</p> <ol> <li>Terminolog\u00eda: intente usar t\u00e9rminos est\u00e1ndar como actores, l\u00edmites de confianza, etc,     ya que esto ayudar\u00e1 a transmitir estos conceptos</li> <li>Alcance: sea claro sobre lo que se est\u00e1 modelando y mant\u00e9ngase dentro de este alcance</li> <li>Documentar: decida qu\u00e9 herramientas y qu\u00e9 resultados se requieren para satisfacer el cumplimiento, por ejemplo</li> <li>Descomponer: divida el sistema que se est\u00e1 modelando en partes manejables</li> <li>Confianza: identifique los l\u00edmites de confianza, considere la segmentaci\u00f3n de red</li> <li>Agentes: identifique qui\u00e9nes son los actores (maliciosos o no) y qu\u00e9 pueden hacer</li> <li>Categorizar: priorice las amenazas teniendo en cuenta la probabilidad, el impacto y cualquier otro factor</li> <li>Remediaci\u00f3n: aseg\u00farese de decidir qu\u00e9 hacer con las amenazas identificadas, la raz\u00f3n principal del modelado de amenazas</li> </ol> <p>Vale la pena decirlo de nuevo: hay muchas formas de hacer modelado de amenazas, todas perfectamente v\u00e1lidas, as\u00ed que elija el proceso correcto que funcione para un equipo espec\u00edfico.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#recomendacion-final","title":"Recomendaci\u00f3n final","text":"<p>Algunas palabras finales sobre el modelado de amenazas.</p> <p>H\u00e1galo incremental:</p> <p>Considere firmemente usar modelado de amenazas incremental. Sin duda alguna es una mala idea tratar de modelar completamente una aplicaci\u00f3n o sistema existente; puede ser muy lento modelar todo un sistema, y para cuando se complete dicho modelo, probablemente ya estar\u00eda desactualizado. En cambio, modela incrementalmente nuevas caracter\u00edsticas o mejoras a medida que se desarrollan.</p> <p>El modelado de amenazas incremental asume que las aplicaciones y caracter\u00edsticas existentes ya han sido atacadas con el tiempo y estas vulnerabilidades del mundo real han sido remediadas. Son las nuevas caracter\u00edsticas o nuevas aplicaciones las que presentan un mayor riesgo de seguridad; si son vulnerables, reducir\u00e1n la seguridad de la aplicaci\u00f3n o sistema existente. Concentrarse en los nuevos cambios aplica el esfuerzo de modelado de amenazas en el lugar donde m\u00e1s se necesita; como m\u00ednimo, los cambios no deber\u00edan empeorar la seguridad, e, idealmente, la seguridad deber\u00eda mejorar.</p> <p>Las herramientas son secundarias:</p> <p>Es bueno estandarizar las herramientas de modelado de amenazas en toda la organizaci\u00f3n, pero tambi\u00e9n permitir que los equipos elijan c\u00f3mo registran sus modelos de amenazas. Si un equipo decide usar Threat Dragon, por ejemplo, y otro quiere usar una pizarra, entonces eso generalmente est\u00e1 bien. Las discusiones mantenidas durante el proceso de modelado de amenazas son m\u00e1s importantes que la herramienta utilizada, aunque podr\u00edas preguntar al equipo que usa la pizarra c\u00f3mo implementan el control de cambios para sus modelos.</p> <p>La brevedad es primordial:</p> <p>Es muy f\u00e1cil crear un modelo de amenazas que se parezca mucho a un diagrama del sistema, con muchos componentes y flujos de datos. Esto lograr\u00e1 un diagrama convincente, pero no es un modelo espec\u00edfico para la amenaza de exploits. En cambio, conc\u00e9ntrese en las superficies de ataque/amenaza y sea robusto al consolidar m\u00faltiples componentes del sistema en un solo componente del modelo de amenazas. Esto mantendr\u00e1 el n\u00famero de componentes y flujos de datos de tamano manejable, y enfoca la discusi\u00f3n en lo que m\u00e1s importa: actores maliciosos (externos o internos) tratando de comprometer la seguridad de su sistema.</p> <p>Elige tu metodolog\u00eda:</p> <p>Es una buena estrategia elegir una metodolog\u00eda de categorizaci\u00f3n de amenazas para toda la organizaci\u00f3n y luego tratar de mantenerla. Por ejemplo, podr\u00eda ser STRIDE o LINDDUN, pero si la tr\u00edada CIA proporciona suficiente granularidad, entonces tambi\u00e9n es una elecci\u00f3n perfectamente buena.</p>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#lectura-adicional","title":"Lectura adicional","text":"<ul> <li>Manifiesto de Modelado de Amenazas</li> <li>Proyecto de Modelo de Amenazas de OWASP</li> <li>[Hoja de Referencia de Modelado de Amenazas]  cstm  de OWASP</li> <li>Manual de Modelado de Amenazas (OTMP)  de OWASP</li> <li>Hoja de Referencia de An\u00e1lisis de Superficie de Ataque  de OWASP</li> <li>P\u00e1ginas comunitarias de OWASP sobre Modelado de Amenazas y el Proceso de Modelado de Amenazas</li> <li>El Marco de Cuatro Preguntas Para el Modelado de Amenazas video de 60 segundos</li> <li>Cadena de Eliminaci\u00f3n Cibern\u00e9tica de Lockheed</li> <li>Proceso de VerSprite para Simulaci\u00f3n de Ataques y An\u00e1lisis de Amenazas (PASTA)</li> <li>Modelado de Amenazas: Dise\u00f1ando para la Seguridad</li> <li>Modelado de Amenazas: Una Gu\u00eda Pr\u00e1ctica para Equipos de Desarrollo</li> </ul>"},{"location":"es/04-design/01-threat-modeling/01-threat-modeling/#recursos","title":"Recursos","text":"<ul> <li>Marco de Cuatro Preguntas de Shostack</li> <li>pytm herramienta de Modelado de Amenazas Pyth\u00f3nico de OWASP</li> <li>OWASP Threat Dragon herramienta de modelado de amenazas usando diagramas de flujo de datos</li> <li>Threagile, un proyecto de c\u00f3digo abierto que proporciona modelado de amenazas \u00c1gil</li> <li>Herramienta de Modelado de Amenazas de Microsoft, una herramienta ampliamente utilizada     en toda la comunidad de seguridad y de descarga gratuita</li> <li>threatspec, una herramienta de c\u00f3digo abierto basada     en comentarios en l\u00ednea con el c\u00f3digo</li> <li>Enumeraci\u00f3n y Clasificaci\u00f3n de Patrones de Ataque Comunes de MITRE (CAPEC)</li> <li>Calculadora del Sistema Com\u00fan de Puntuaci\u00f3n de Vulnerabilidades de NIST</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/01-threat-modeling/02-pytm/","title":"pytm","text":"<p>El proyecto OWASP pytm (Modelado de Amenazas Pyth\u00f3nico) es un marco para el modelado de amenazas y su automatizaci\u00f3n. El objetivo de pytm es realizar el modelado de amenazas Shift-Left, lo que significa iniciar el modelado ya en etapas tempranas del proyecto, haciendo que el modelado de amenazas sea m\u00e1s automatizado y centrado en el desarrollador.</p> <p>Pytm es un Proyecto de Laboratorio de OWASP con una comunidad de colaboradores que crean versiones regulares.</p>"},{"location":"es/04-design/01-threat-modeling/02-pytm/#que-es-pytm","title":"\u00bfQu\u00e9 es pytm?","text":"<p>Pytm es una biblioteca Java que proporciona una forma program\u00e1tica de modelado de amenazas; el modelo de aplicaci\u00f3n en s\u00ed se define como un archivo fuente de python3 y sigue la sintaxis del programa Python. Los hallazgos se incluyen en el programa python del modelo de aplicaci\u00f3n con amenazas definidas como filas en un archivo de texto asociado. El archivo de amenazas puede reutilizarse entre proyectos y permite la acumulaci\u00f3n de una base de conocimiento.</p> <p>Usando pytm, el modelo y las amenazas pueden ser program\u00e1ticamente generados como un diagrama de flujo de datos dot que se muestra utilizando Graphviz, una utilidad de software de visualizaci\u00f3n de gr\u00e1ficos de c\u00f3digo abierto. Alternativamente, el modelo y las amenazas pueden generarse como un archivo PlantUML que luego puede mostrarse, usando Java y el archivo <code>.jar</code> de PlantUML, como un diagrama de secuencia.</p> <p>Si se requiere un documento de informe, un script de pytm puede generar el modelo, las amenazas y los hallazgos como markdown. Programas como pandoc pueden tomar este archivo markdown despues y proporcionar el documento en varios formatos como PDF, ePub o html.</p> <p>La serie Spotlight de OWASP proporciona una visi\u00f3n general de pytm: 'Proyecto 6 - OWASP pytm'.</p>"},{"location":"es/04-design/01-threat-modeling/02-pytm/#por-que-usar-pytm","title":"\u00bfPor qu\u00e9 usar pytm?","text":"<p>El equipo de desarrollo de pytm se\u00f1ala con raz\u00f3n que el modelado de amenazas tradicional a menudo llega demasiado tarde en el proceso de desarrollo, y a veces puede no ocurrir en absoluto. Adem\u00e1s, crear flujos de datos manuales/diagram\u00e1ticos e informes puede consumir much\u00edsimo tiempo. Estas son ciertamente observaciones v\u00e1lidas, y por lo tanto pytm intenta que el modelado de amenazas \"se desplace a la izquierda\" en el ciclo de vida del desarrollo.</p> <p>Muchas herramientas tradicionales de modelado de amenazas como OWASP Threat Dragon proporcionan una forma gr\u00e1fica de crear diagramas e introducir amenazas. Estas aplicaciones almacenan los modelos como texto, por ejemplo JSON y YAML, pero el m\u00e9todo principal de entrada es a trav\u00e9s de la aplicaci\u00f3n.</p> <p>Pytm es diferente - el m\u00e9todo principal para crear y actualizar los modelos de amenazas es a trav\u00e9s de c\u00f3digo. Este c\u00f3digo fuente define completamente el modelo junto con sus hallazgos, amenazas y remediaciones. Los diagramas e informes se consideran salidas del modelo; no las entradas al modelo. Esto hace que pytm sea una herramienta poderosa para describir un sistema o aplicaci\u00f3n, y permite que el modelo se contin\u00fae construyendo con el tiempo.</p> <p>Este enfoque en el modelo como c\u00f3digo y salidas program\u00e1ticas hace que Pytm sea particularmente \u00fatil en entornos automatizados, ayudando a que el modelo de amenazas se integre en el proceso de dise\u00f1o desde el principio, as\u00ed como en sesiones de modelado de amenazas m\u00e1s tradicionales.</p>"},{"location":"es/04-design/01-threat-modeling/02-pytm/#como-usar-pytm","title":"C\u00f3mo usar pytm","text":"<p>La mejor descripci\u00f3n de c\u00f3mo usar pytm se encuentra en el cap\u00edtulo 4 del libro Threat Modeling: a practical guide for development teams que est\u00e1 escrito por dos de los principales colaboradores del proyecto pytm.</p> <p>Pytm est\u00e1 basado en c\u00f3digo dentro de un entorno de programa, en lugar de ejecutarse como una aplicaci\u00f3n \u00fanica, por lo que hay varios componentes que deben instalarse en la m\u00e1quina de destino para permitir que pytm se ejecute. Actualmente no funciona en Windows, solo en Linux o MacOS, por lo que si necesita ejecutar Windows, use una VM de Linux o siga las instrucciones para crear un contenedor Docker.</p> <p>Las siguientes herramientas y bibliotecas deben estar instaladas:</p> <ul> <li>Python 3.x</li> <li>Paquete Graphviz</li> <li>Java, como OpenJDK 10 u 11</li> <li>El archivo JAR ejecutable de PlantUML</li> <li>Y por supuesto pytm: clone el repositorio del proyecto pytm</li> </ul> <p>Una vez instalado el entorno, navegue al directorio principal de su copia local del proyecto.</p> <p>Siga el ejemplo proporcionado por el repositorio del proyecto pytm y ejecuta los scripts sugeridos para generar el diagrama de flujo de datos, el diagrama de secuencia y el informe:</p> <pre><code>mkdir -p tm\n./tm.py --report docs/basic_template.md | pandoc -f markdown -t html &gt; tm/report.html\n./tm.py --dfd | dot -Tpng -o tm/dfd.png\n./tm.py --seq | java -Djava.awt.headless=true -jar $PLANTUML_PATH -tpng -pipe &gt; tm/seq.png\n</code></pre>"},{"location":"es/04-design/01-threat-modeling/02-pytm/#referencias","title":"Referencias","text":"<ul> <li>Modelado de Amenazas Pyth\u00f3nico  (pytm) de OWASP</li> <li>Graphviz</li> <li>pandoc</li> <li>PlantUML</li> <li>Repositorio pytm</li> <li>Spotlight sobre pytm</li> <li>Threat Modeling: una gu\u00eda pr\u00e1ctica para equipos de desarrollo</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/01-threat-modeling/03-threat-dragon/","title":"Threat Dragon","text":"<p>El proyecto Threat Dragon de OWASP  proporciona una herramienta diagram\u00e1tica para el modelado de amenazas de aplicaciones, APIs y sistemas de software. Es un Proyecto de Laboratorio OWASP con varias versiones y est\u00e1 en desarrollo activo.</p>"},{"location":"es/04-design/01-threat-modeling/03-threat-dragon/#que-es-threat-dragon","title":"\u00bfQu\u00e9 es Threat Dragon?","text":"<p>Threat Dragon es una herramienta que puede ayudar a los equipos de desarrollo con su proceso de modelado de amenazas. Permite crear y modificar diagramas de flujo de datos que proporcionan el contexto y direcci\u00f3n para las actividades de modelado de amenazas. Tambi\u00e9n almacena los detalles de las amenazas identificadas durante las sesiones de modelado de amenazas, y \u00e9stas se guardan junto con el diagrama del modelo de amenazas en un archivo basado en texto. Threat Dragon tambi\u00e9n puede generar el diagrama del modelo de amenazas y las amenazas asociadas como un reporte PDF.</p>"},{"location":"es/04-design/01-threat-modeling/03-threat-dragon/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>Threat Dragon es una herramienta \u00fatil para equipos peque\u00f1os que desean crear modelos de amenazas r\u00e1pida y f\u00e1cilmente. Threat Dragon tiene como objetivos:</p> <ul> <li>Simplicidad - puedes instalar y comenzar a usar Threat Dragon muy r\u00e1pidamente</li> <li>Flexibilidad - la diagramaci\u00f3n y generaci\u00f3n de amenazas permite describir todo tipo de amenazas</li> <li>Accesibilidad - varios tipos diferentes de equipos pueden beneficiarse de la facilidad de uso de Threat Dragon</li> </ul> <p>Admite varias metodolog\u00edas y categorizaciones de amenazas utilizadas durante las actividades de modelado de amenazas:</p> <ul> <li>STRIDE</li> <li>LINDDUN</li> <li>PLOT4ai</li> <li>CIA</li> <li>DIE</li> </ul> <p>y puede ser utilizado por todo tipo de equipos de desarrollo.</p>"},{"location":"es/04-design/01-threat-modeling/03-threat-dragon/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>La serie Spotlight de OWASP proporciona una visi\u00f3n general de Threat Dragon y c\u00f3mo usarlo: 'Proyecto 22 - OWASP Threat Dragon'.</p> <p>Es sencillo comenzar a usar Threat Dragon; la \u00faltima versi\u00f3n est\u00e1 disponible para usar en l\u00ednea:</p> <ol> <li>seleccione 'Conectarse con Sesi\u00f3n Local' (Iniciar sesi\u00f3n en sesi\u00f3n local)</li> <li>seleccione 'Crear un nuevo modelo de amenazas (threat model) desde cero' (Explorar un modelo de amenazas de ejemplo)</li> <li>seleccione 'Version 2 Demo Model' (Modelo de demostraci\u00f3n versi\u00f3n 2)</li> <li>Se muestra los metadatos del modelo de amenazas que pueden ser editados</li> <li>haga clic en el diagrama 'Main Request Data Flow' (Flujo de datos de solicitud principal)     para mostrar el diagrama de flujo de datos</li> <li>los componentes del diagrama pueden ser inspeccionados, y se muestran sus amenazas asociadas</li> <li>los componentes pueden ser a\u00f1adidos y eliminados, junto con la edici\u00f3n de sus propiedades</li> </ol> <p>Threat Dragon se distribuye como una aplicaci\u00f3n de escritorio multiplataforma y como una aplicaci\u00f3n web. La aplicaci\u00f3n de escritorio puede descargarse para Windows, Linux y MacOS. La aplicaci\u00f3n web puede ejecutarse utilizando un contenedor Docker o desde el c\u00f3digo fuente.</p> <p>Una caracter\u00edstica importante de Threat Dragon es la salida de informes en PDF que puede utilizarse para documentaci\u00f3n y prop\u00f3sitos de cumplimiento GRC; desde la ventana de metadatos del modelo de amenazas, haga clic en el bot\u00f3n Reporte.</p>"},{"location":"es/04-design/01-threat-modeling/03-threat-dragon/#referencias","title":"Referencias","text":"<ul> <li>OWASP Threat Dragon</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/01-threat-modeling/04-cornucopia/","title":"Cornucopia","text":"<p>No hay traducci\u00f3n de esta p\u00e1gina, consulte versi\u00f3n original en ingl\u00e9s.</p>"},{"location":"es/04-design/01-threat-modeling/05-linddun-go/","title":"LINDDUN GO","text":"<p>No hay traducci\u00f3n de esta p\u00e1gina, consulte versi\u00f3n original en ingl\u00e9s.</p>"},{"location":"es/04-design/01-threat-modeling/06-toolkit/","title":"Threat Modeling toolkit","text":"<p>No hay traducci\u00f3n de esta p\u00e1gina, consulte versi\u00f3n original en ingl\u00e9s.</p>"},{"location":"es/04-design/02-web-app-checklist/","title":"Descripci\u00f3n","text":""},{"location":"es/04-design/02-web-app-checklist/#42-lista-de-verificacion-para-aplicaciones-web","title":"4.2 Lista de verificaci\u00f3n para aplicaciones web","text":"<p>Las listas de verificaci\u00f3n son un recurso valioso para los equipos de desarrollo. Proporcionan estructura para establecer buenas pr\u00e1cticas y procesos y tambi\u00e9n son \u00fatiles durante las revisiones de c\u00f3digo y actividades de dise\u00f1o.</p> <p>Las listas de verificaci\u00f3n que siguen son listas generales categorizadas para seguir los controles enumerados en el proyecto Top 10 Controles Proactivos de OWASP. Estas listas de verificaci\u00f3n proporcionan sugerencias que definitivamente deben adaptarse a los requisitos y entorno espec\u00edficos de un proyecto; no est\u00e1n destinadas a seguirse en su totalidad.</p> <p>Probablemente el mejor punto de partida para una lista de verificaci\u00f3n es el proporcionado por el Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS). El ASVS puede utilizarse para proporcionar un marco para una lista de verificaci\u00f3n inicial, seg\u00fan el nivel de verificaci\u00f3n de seguridad, y esta lista de verificaci\u00f3n inicial del ASVS puede ampliarse utilizando las siguientes secciones de la lista de verificaci\u00f3n.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/01-define-security-requirements/","title":"Definir Requisitos de Seguridad","text":"<p>Un requisito de seguridad es una declaraci\u00f3n de funcionalidad de seguridad que garantiza que se est\u00e1 satisfaciendo la seguridad del software. Los requisitos de seguridad se derivan de est\u00e1ndares de la industria, leyes aplicables y un historial de vulnerabilidades pasadas.</p> <p>Consulte el control proactivo C4: Abordar la Seguridad desde el Principio y sus hojas de referencia para m\u00e1s contexto del proyecto Top 10 Controles Proactivos de OWASP, y use las listas a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada al proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/01-define-security-requirements/#1-configuracion-del-sistema","title":"1. Configuraci\u00f3n del sistema","text":"<ol> <li>Restringir aplicaciones, procesos y cuentas de servicio a los m\u00ednimos privilegios posibles</li> <li>Si la aplicaci\u00f3n debe ejecutarse con privilegios elevados, elevar privilegios lo m\u00e1s tarde posible     y reducirlos tan pronto como sea posible</li> <li>Eliminar toda funcionalidad y archivos innecesarios</li> <li>Eliminar c\u00f3digo de prueba o cualquier funcionalidad no destinada a producci\u00f3n, antes del despliegue</li> <li>El almac\u00e9n de configuraci\u00f3n de seguridad para la aplicaci\u00f3n debe estar disponible     en formato legible para humanos para facilitar las auditor\u00edas</li> <li>Aislar los entornos de desarrollo de la producci\u00f3n y proporcionar acceso solo a grupos autorizados de desarrollo y prueba</li> <li>Implementar un sistema de control de cambios de software para gestionar     y registrar cambios en el c\u00f3digo tanto en desarrollo como en producci\u00f3n</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/01-define-security-requirements/#2-practicas-criptograficas","title":"2. Pr\u00e1cticas criptogr\u00e1ficas","text":"<ol> <li>Utilizar m\u00f3dulos criptogr\u00e1ficos de c\u00f3digo abierto y revisados por pares</li> <li>Todas las funciones criptogr\u00e1ficas utilizadas para proteger secretos del usuario     de la aplicaci\u00f3n deben implementarse en un sistema confiable</li> <li>Los m\u00f3dulos criptogr\u00e1ficos deben fallar de manera segura</li> <li>Asegurarse de que todos los elementos aleatorios como n\u00fameros, nombres de archivo,     UUID(identificador \u00fanico universal) y cadenas se generan     utilizando el generador de n\u00fameros aleatorios aprobado del m\u00f3dulo criptogr\u00e1fico</li> <li>Los m\u00f3dulos criptogr\u00e1ficos utilizados por la aplicaci\u00f3n cumplen con FIPS 140-2 o un est\u00e1ndar equivalente</li> <li>Establecer y utilizar una pol\u00edtica y proceso para la gesti\u00f3n de claves criptogr\u00e1ficas</li> <li>Asegurar que cualquier clave secreta est\u00e9 protegida contra acceso no autorizado</li> <li>Almacenar claves en una b\u00f3veda de secretos adecuada como se describe a continuaci\u00f3n</li> <li>Utilizar claves independientes cuando se requieren m\u00faltiples claves</li> <li>Crear soporte para cambiar algoritmos y claves cuando sea necesario</li> <li>Construir caracter\u00edsticas de la aplicaci\u00f3n para manejar una rotaci\u00f3n de claves</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/01-define-security-requirements/#3-gestion-de-archivos","title":"3. Gesti\u00f3n de archivos","text":"<ol> <li>No pasar datos suministrados por el usuario directamente a ninguna funci\u00f3n de inclusi\u00f3n din\u00e1mica</li> <li>Requerir autenticaci\u00f3n antes de permitir la carga de un archivo</li> <li>Limitar el tipo de archivos que se pueden cargar solo a aquellos tipos que son necesarios para fines del negocio</li> <li>Validar que los archivos cargados son del tipo esperado comprobando las cabeceras de archivo en lugar de la extensi\u00f3n</li> <li>No guardar archivos en el mismo contexto web de la aplicaci\u00f3n</li> <li>Prevenir o restringir la carga de cualquier archivo que pueda ser interpretado por el servidor web</li> <li>Desactivar los privilegios de ejecuci\u00f3n en los directorios de carga de archivos</li> <li>Al hacer referencia a archivos existentes, utilizar una lista blanca de nombres y tipos de archivos permitidos</li> <li>No pasar datos suministrados por el usuario a una redirecci\u00f3n din\u00e1mica</li> <li>No pasar rutas de directorio o archivo, utilizar valores de \u00edndice mapeados a una lista predefinida de rutas</li> <li>Nunca enviar la ruta absoluta del archivo al cliente</li> <li>Asegurar que los archivos y recursos de la aplicaci\u00f3n sean de solo lectura</li> <li>Escanear los archivos cargados por usuarios en busca de virus y malware</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/01-define-security-requirements/#referencias","title":"Referencias","text":"<ul> <li>Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) de OWASP</li> <li>Seguridad de Aplicaciones M\u00f3viles de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/02-frameworks-libraries/","title":"Aprovechar Marcos y Bibliotecas de Seguridad","text":"<p>Las bibliotecas de c\u00f3digo seguro y los marcos de software con seguridad integrada ayudan a los desarrolladores a protegerse contra fallos de dise\u00f1o e implementaci\u00f3n relacionados con la seguridad.</p> <p>Consulte el control proactivo C4: Abordar la Seguridad desde el Principio y sus hojas de referencia para m\u00e1s contexto del proyecto Top 10 Controles Proactivos de OWASP.</p> <p>Para listas de verificaci\u00f3n espec\u00edficas de tecnolog\u00eda, consulte las Hojas de Referencia de OWASP apropiadas:</p> <ul> <li>Seguridad AJAX</li> <li>Fortalecimiento de seguridad de la cadena de herramientas basada en C</li> <li>Seguridad Django</li> <li>Django REST framework</li> <li>Seguridad Docker</li> <li>Seguridad DotNet</li> <li>Seguridad GraphQL</li> <li>Infraestructura como C\u00f3digo</li> <li>Seguridad Java</li> <li>Gesti\u00f3n de Javascript</li> <li>Kubernetes</li> <li>Seguridad Laravel</li> <li>Seguridad de Microservicios</li> <li>Mejores pr\u00e1cticas de seguridad NPM</li> <li>Seguridad Node.js</li> <li>Seguridad Node.js para Docker</li> <li>Configuraci\u00f3n PHP</li> <li>APIs REST y c\u00f3mo evaluarlas</li> <li>Seguridad Ruby on Rails</li> <li>Framework Symfony</li> <li>Servicios Web</li> <li>Seguridad XML</li> </ul> <p>y util\u00edcelas como punto de partida para una lista de verificaci\u00f3n adaptada a la tecnolog\u00eda utilizada por el proyecto.</p> <p>Adem\u00e1s, considere las siguientes comprobaciones adicionales para marcos y bibliotecas.</p>"},{"location":"es/04-design/02-web-app-checklist/02-frameworks-libraries/#marcos-y-bibliotecas-de-seguridad","title":"Marcos y Bibliotecas de Seguridad","text":"<ol> <li>Asegurar que los servidores, marcos y componentes del sistema ejecuten las \u00faltimas versiones y parches aprobados</li> <li>Utilizar bibliotecas y marcos de fuentes confiables que se mantengan activamente y sean ampliamente utilizados</li> <li>Revisar todas las aplicaciones secundarias y bibliotecas de terceros para determinar la necesidad empresarial</li> <li>Validar la funcionalidad segura de todas las aplicaciones secundarias y bibliotecas de terceros</li> <li>Crear y mantener un cat\u00e1logo de inventario de todas las bibliotecas de terceros utilizando     An\u00e1lisis de Composici\u00f3n de Software (SCA)</li> <li>Mantener proactivamente actualizadas todas las bibliotecas y componentes de terceros</li> <li>Reducir la superficie de ataque encapsulando la biblioteca y exponiendo solo el comportamiento requerido en su software</li> <li>Utilizar c\u00f3digo administrado testeado y aprobado en lugar de crear nuevo c\u00f3digo no administrado para tareas comunes</li> <li>Utilizar APIs espec\u00edficas para tareas integradas para realizar tareas del sistema operativo</li> <li>No permitir que la aplicaci\u00f3n emita comandos directamente al Sistema Operativo</li> <li>Utilizar sumas de verificaci\u00f3n o hashes para verificar la integridad del c\u00f3digo interpretado,     bibliotecas, ejecutables y archivos de configuraci\u00f3n</li> <li>Restringir a los usuarios la generaci\u00f3n de nuevo c\u00f3digo o la alteraci\u00f3n del c\u00f3digo existente</li> <li>Implementar actualizaciones seguras utilizando canales cifrados</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/02-frameworks-libraries/#referencias","title":"Referencias","text":"<ul> <li>Dependency Check de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces env\u00eda un issue o edita en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/03-secure-database-access/","title":"Acceso Seguro a Bases de Datos","text":"<p>Asegure que el acceso a todos los almacenes de datos sea seguro, incluyendo tanto bases de datos relacionales como bases de datos NoSQL.</p> <p>Consulte el control proactivo C3: Validar todas las Entradas y Manejar Excepciones y sus hojas de referencia para m\u00e1s contexto sobre el proyecto Top 10 Controles Proactivos de OWASP, y use la lista a continuaci\u00f3n como sugerencias para una lista de comprobaci\u00f3n adaptada al proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/03-secure-database-access/#1-consultas-seguras","title":"1. Consultas seguras","text":"<ol> <li>Utilizar Parametrizaci\u00f3n de Consultas para evitar que entradas no confiables sean interpretadas     como parte de un comando SQL</li> <li>Utilizar consultas parametrizadas fuertemente tipadas</li> <li>Utilizar validaci\u00f3n de entrada y codificaci\u00f3n de salida, asegur\u00e1ndose de encargarse de los meta caracteres</li> <li>No ejecutar el comando de base de datos si la validaci\u00f3n de entrada falla</li> <li>Asegurar que las variables est\u00e9n fuertemente tipadas</li> <li>Las cadenas de conexi\u00f3n no deben estar codificadas de forma fija dentro de la aplicaci\u00f3n</li> <li>Las cadenas de conexi\u00f3n deben almacenarse en un archivo de configuraci\u00f3n separado en un sistema confiable     y deben estar cifradas</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/03-secure-database-access/#2-configuracion-segura","title":"2. Configuraci\u00f3n segura","text":"<ol> <li>La aplicaci\u00f3n debe usar el nivel m\u00e1s bajo posible de privilegios al acceder a la base de datos</li> <li>Utilizar procedimientos almacenados para abstraer el acceso a datos y permitir la eliminaci\u00f3n de permisos     a las tablas base en la base de datos</li> <li>Cerrar la conexi\u00f3n de la base de datos tan pronto como sea posible</li> <li>Desactivar toda funcionalidad innecesaria de la base de datos</li> <li>Eliminar contenido predeterminado innecesario del proveedor, por ejemplo esquemas de muestra</li> <li>Deshabilitar cualquier cuenta predeterminada que no sea necesaria para soportar los requisitos del negocio</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/03-secure-database-access/#3-autenticacion-segura","title":"3. Autenticaci\u00f3n segura","text":"<ol> <li>Eliminar o cambiar todas las contrase\u00f1as administrativas predeterminadas de la base de datos</li> <li>La aplicaci\u00f3n debe conectarse a la base de datos con credenciales diferentes para cada nivel de confianza     (por ejemplo, usuario, usuario de solo lectura, invitado, administradores)</li> <li>Utilizar credenciales seguras para el acceso a la base de datos</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/03-secure-database-access/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Parametrizaci\u00f3n de Consultas de OWASP</li> <li>Hoja de Referencia: Seguridad de Bases de Datosde OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p> <p>\\newpage</p>"},{"location":"es/04-design/02-web-app-checklist/04-encode-escape-data/","title":"Codificar y Escapar Datos","text":"<p>La codificaci\u00f3n y el escapado de datos de salida son t\u00e9cnicas defensivas destinadas a detener ataques de inyecci\u00f3n en un sistema o aplicaci\u00f3n objetivo que est\u00e1 recibiendo los datos de salida.</p> <p>El sistema objetivo puede ser otro componente de software o puede reflejarse de nuevo en el sistema inicial, como comandos del sistema operativo, por lo que codificar y escapar datos de salida ayuda a proporcionar defensa en profundidad para el sistema en su conjunto.</p> <p>Consulte el control proactivo C3: Validar todas las Entradas y Manejar Excepciones y sus hojas de referencia para m\u00e1s contexto del proyecto OWASP Top 10 Controles Proactivos, y use la lista a continuaci\u00f3n como sugerencias para una lista de comprobaci\u00f3n adaptada al proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/04-encode-escape-data/#1-codificacion-de-caracteres-y-canonicalizacion","title":"1. Codificaci\u00f3n de caracteres y canonicalizaci\u00f3n","text":"<ol> <li>Aplicar codificaci\u00f3n a la salida justo antes de que el contenido sea pasado al sistema objetivo</li> <li>Realizar toda la codificaci\u00f3n de salida en un sistema confiable</li> <li>Utilizar una rutina est\u00e1ndar y probada para cada tipo de codificaci\u00f3n de salida</li> <li>Especificar conjuntos de caracteres, como UTF-8, para todas las salidas</li> <li>Aplicar canonicalizaci\u00f3n para convertir datos unicode en una forma est\u00e1ndar</li> <li>Asegurar que la codificaci\u00f3n de salida sea segura para todos los sistemas objetivo</li> <li>En particular, desinfectar todas las salidas utilizadas para comandos del sistema operativo</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/04-encode-escape-data/#2-codificacion-contextual-de-salida","title":"2. Codificaci\u00f3n contextual de salida","text":"<p>La codificaci\u00f3n contextual de salida de datos se basa en c\u00f3mo ser\u00e1 utilizada por el objetivo. Los m\u00e9todos espec\u00edficos var\u00edan dependiendo de la forma en que se utilizan los datos de salida, como la codificaci\u00f3n de entidades HTML.</p> <ol> <li>Codificar contextualmente todos los datos devueltos al cliente desde fuentes no confiables</li> <li>Codificar contextualmente toda la salida de datos no confiables en consultas para SQL, XML y LDAP</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/04-encode-escape-data/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Prevenci\u00f3n de Inyecci\u00f3n de OWASP</li> <li>Proyecto Java Encoder de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/05-validate-inputs/","title":"Validar Todas las Entradas","text":"<p>La validaci\u00f3n de entradas es una colecci\u00f3n de t\u00e9cnicas que aseguran que solo los datos con formato adecuado puedan ingresar a una aplicaci\u00f3n de software o componente del sistema.</p> <p>Es vital que se realice la validaci\u00f3n de entradas para proporcionar el punto de partida para una aplicaci\u00f3n o sistema seguro. Sin validaci\u00f3n de entradas, la aplicaci\u00f3n/sistema de software seguir\u00e1 siendo vulnerable a ataques nuevos y variados.</p> <p>Consulte el control proactivo C3: Validar Todas las Entradas y Manejar Excepciones y sus hojas de referencia para m\u00e1s contexto del proyecto Top 10 Controles Proactivos de OWASP, y use la lista a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada al proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/05-validate-inputs/#1-validez-sintactica-y-semantica","title":"1. Validez sint\u00e1ctica y sem\u00e1ntica","text":"<ol> <li>Identificar todas las fuentes de datos y clasificarlas en confiables y no confiables</li> <li>Validar todos los datos de entrada de fuentes no confiables, como datos proporcionados por el cliente</li> <li>Codificar la entrada a un conjunto de caracteres com\u00fan antes de validar</li> <li>Especificar conjuntos de caracteres, como UTF-8, para todas las fuentes de entrada</li> <li>Si el sistema admite conjuntos de caracteres extendidos UTF-8, validar despu\u00e9s de completar la decodificaci\u00f3n UTF-8</li> <li>Verificar que los valores de encabezado del protocolo en solicitudes y respuestas contengan solo caracteres ASCII</li> <li>Validar datos de redirecciones</li> <li>Validar el rango de datos y tambi\u00e9n la longitud de datos</li> <li>Utilizar la canonicalizaci\u00f3n para tratar con ataques de ofuscaci\u00f3n</li> <li>Todos los fallos de validaci\u00f3n deben resultar en el rechazo de la entrada</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/05-validate-inputs/#2-bibliotecas-y-frameworks","title":"2. Bibliotecas y frameworks","text":"<ol> <li>Realizar toda la validaci\u00f3n de entrada en un sistema confiable [^SCP1]</li> <li>Usar una biblioteca o framework de validaci\u00f3n de entrada centralizado para toda la aplicaci\u00f3n</li> <li>Si la rutina de validaci\u00f3n est\u00e1ndar no puede hacerse cargo de algunas entradas, use verificaciones discretas adicionales</li> <li>Si cualquier entrada potencialmente peligrosa debe permitirse, implemente controles adicionales</li> <li>Validar para los tipos de datos esperados utilizando una lista de permitidos en lugar de una lista de denegados</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/05-validate-inputs/#3-validar-datos-serializados","title":"3. Validar datos serializados","text":"<ol> <li>Implementar verificaciones de integridad o cifrado de los objetos serializados     para prevenir la creaci\u00f3n de objetos hostiles o la manipulaci\u00f3n de datos</li> <li>Aplicar restricciones estrictas de tipo durante la deserializaci\u00f3n antes de la creaci\u00f3n de objetos;     t\u00edpicamente se espera un conjunto definible de clases</li> <li>Aislar las funciones que hacen deserializaci\u00f3n para que se ejecuten en entornos de muy bajo privilegio,     como contenedores temporales</li> <li>Registrar excepciones y fallos de deserializaci\u00f3n de seguridad</li> <li>Restringir o monitorear la conectividad de red entrante y saliente de contenedores o servidores que deserializan</li> <li>Monitorear la deserializaci\u00f3n, por ejemplo, alertando si un agente de usuario deserializa constantemente</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/05-validate-inputs/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Validaci\u00f3n de Entrada de OWASP</li> <li>Proyecto Java HTML Sanitizer de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiar, entonces cree un issue o ed\u00edtelo en GitHub.</p> <p>[^SCP1]: Lista de verificaci\u00f3n de pr\u00e1cticas de codificaci\u00f3n segura</p>"},{"location":"es/04-design/02-web-app-checklist/06-digital-identity/","title":"Implementar Identidad Digital","text":"<p>La autenticaci\u00f3n es el proceso de verificar que un individuo o entidad es quien dice ser. La gesti\u00f3n de sesiones es un proceso mediante el cual un servidor mantiene el estado de la autenticaci\u00f3n de los usuarios para que el usuario pueda continuar utilizando el sistema sin tener que volver a autenticarse.</p> <p>Consulte el control proactivo C7: Implementar Identidad Digital y sus hojas de referencia para obtener m\u00e1s contexto del proyecto OWASP Top 10 Controles Proactivos, y utilice la lista a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada para el proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/06-digital-identity/#1-autenticacion","title":"1. Autenticaci\u00f3n","text":"<ol> <li>Dise\u00f1ar a fondo la autenticaci\u00f3n del control de acceso desde el principio</li> <li>Forzar que todas las solicitudes pasen por controles de acceso a menos que sean p\u00fablicas</li> <li>No codificar de forma fija (hard code) controles de acceso basados en roles</li> <li>Registrar todos los eventos de control de acceso</li> <li>Utilizar Autenticaci\u00f3n Multi-Factor (MFA) para cuentas transaccionales sensibles o de alto valor</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/06-digital-identity/#2-contrasenas","title":"2. Contrase\u00f1as","text":"<ol> <li>Requerir autenticaci\u00f3n para todas las p\u00e1ginas y recursos, excepto aquellos espec\u00edficamente destinados a ser p\u00fablicos</li> <li>Todos los controles de autenticaci\u00f3n deben aplicarse en un sistema confiable</li> <li>Establecer y utilizar servicios de autenticaci\u00f3n est\u00e1ndar y probados siempre que sea posible</li> <li>Utilizar una implementaci\u00f3n centralizada para todos los controles de autenticaci\u00f3n</li> <li>Segregar la l\u00f3gica de autenticaci\u00f3n del recurso solicitado y     utilizar redirecci\u00f3n hacia y desde el control de autenticaci\u00f3n centralizado</li> <li>Todos los controles de autenticaci\u00f3n deben fallar de manera segura</li> <li>La administraci\u00f3n y gesti\u00f3n de cuentas debe ser al menos tan segura como el mecanismo de autenticaci\u00f3n principal</li> <li>Si su aplicaci\u00f3n gestiona un almac\u00e9n de credenciales, utilice hashes unidireccionales criptogr\u00e1ficamente     fuertes con un salt</li> <li>El hash de contrase\u00f1as debe implementarse en un sistema confiable</li> <li>Validar los datos de autenticaci\u00f3n solo al completar toda la entrada de datos</li> <li>Las respuestas de fallo de autenticaci\u00f3n no deben indicar qu\u00e9 parte de los datos de autenticaci\u00f3n fue incorrecta</li> <li>Utilizar autenticaci\u00f3n para conexiones a sistemas externos que involucren informaci\u00f3n o funciones confidenciales</li> <li>Las credenciales de autenticaci\u00f3n para acceder a servicios externos a la aplicaci\u00f3n deben almacenarse     en un almac\u00e9n seguro</li> <li>Utilizar solo solicitudes HTTP POST para transmitir credenciales de autenticaci\u00f3n</li> <li>Enviar  contrase\u00f1as no temporales solo a trav\u00e9s de una conexi\u00f3n cifrada o como datos cifrados</li> <li>Aplicar requisitos de complejidad y longitud de contrase\u00f1a establecidos por pol\u00edticas o regulaciones</li> <li>Aplicar la desactivaci\u00f3n de cuentas despu\u00e9s de un n\u00famero establecido de intentos de inicio de sesi\u00f3n no v\u00e1lidos</li> <li>Las operaciones de restablecimiento y cambio de contrase\u00f1a requieren el mismo nivel de controles     que la creaci\u00f3n de cuentas y la autenticaci\u00f3n</li> <li>Las preguntas de restablecimiento de contrase\u00f1a est\u00e1n en desuso,     consulte Hoja de Referencia sobre Elegir y Usar Preguntas de Seguridad para saber por qu\u00e9</li> <li>Si utiliza restablecimientos basados en correo electr\u00f3nico, env\u00ede correo electr\u00f3nico solo     a una direcci\u00f3n preregistrada con un enlace/contrase\u00f1a temporal</li> <li>Las contrase\u00f1as y enlaces temporales deben tener un tiempo de caducidad corto</li> <li>Aplicar el cambio de contrase\u00f1as temporales en el pr\u00f3ximo uso</li> <li>Notificar a los usuarios cuando ocurre un restablecimiento de contrase\u00f1a</li> <li>Prevenir la reutilizaci\u00f3n de contrase\u00f1as</li> <li>El \u00faltimo uso (exitoso o no exitoso) de una cuenta de usuario debe informarse al usuario     en su pr\u00f3ximo inicio de sesi\u00f3n exitoso</li> <li>Cambiar todas las contrase\u00f1as e ID de usuario predeterminados proporcionados     por el proveedor o deshabilitar las cuentas asociadas</li> <li>Volver a autenticar a los usuarios antes de realizar operaciones cr\u00edticas</li> <li>Si utiliza c\u00f3digo de terceros para la autenticaci\u00f3n, inspeccione el c\u00f3digo cuidadosamente     para asegurarse de que no est\u00e9 afectado por ning\u00fan c\u00f3digo malicioso</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/06-digital-identity/#3-autenticacion-basada-en-criptografia","title":"3. Autenticaci\u00f3n basada en criptograf\u00eda","text":"<ol> <li>Utilizar los controles de gesti\u00f3n de sesiones del servidor o del framework</li> <li>La creaci\u00f3n de identificadores de sesi\u00f3n siempre debe realizarse en un sistema confiable</li> <li>Los controles de gesti\u00f3n de sesiones deben utilizar algoritmos cuidadosamente probados que     garanticen identificadores de sesi\u00f3n suficientemente aleatorios</li> <li>Establecer el dominio y la ruta para las cookies que contienen identificadores de sesi\u00f3n autenticados     a un valor apropiadamente restringido para el sitio</li> <li>La funcionalidad de cierre de sesi\u00f3n debe terminar completamente la sesi\u00f3n o conexi\u00f3n asociada</li> <li>La funcionalidad de cierre de sesi\u00f3n debe estar disponible en todas las p\u00e1ginas protegidas por autorizaci\u00f3n</li> <li>Establecer un tiempo de espera de inactividad de sesi\u00f3n que sea lo m\u00e1s corto posible,     basado en equilibrar el riesgo y los requisitos funcionales del negocio</li> <li>No permitir inicios de sesi\u00f3n persistentes y aplicar terminaciones peri\u00f3dicas de sesi\u00f3n,     incluso cuando la sesi\u00f3n est\u00e1 activa</li> <li>Si se estableci\u00f3 una sesi\u00f3n antes del inicio de sesi\u00f3n, cierre esa sesi\u00f3n     y establezca una nueva despu\u00e9s de un inicio de sesi\u00f3n exitoso</li> <li>Genere un nuevo identificador de sesi\u00f3n en cualquier reautenticaci\u00f3n</li> <li>No permitir inicios de sesi\u00f3n concurrentes con el mismo ID de usuario</li> <li>No exponer identificadores de sesi\u00f3n en URLs, mensajes de error o registros</li> <li>Implementar controles de acceso apropiados para proteger los datos de sesi\u00f3n del lado del servidor     de acceso no autorizado por parte de otros usuarios del servidor</li> <li>Generar peri\u00f3dicamente un nuevo identificador de sesi\u00f3n y desactivar el antiguo</li> <li>Generar un nuevo identificador de sesi\u00f3n si la seguridad de la conexi\u00f3n cambia de HTTP a HTTPS,     como puede ocurrir durante la autenticaci\u00f3n</li> <li>Establecer el atributo <code>secure</code> para las cookies transmitidas a trav\u00e9s de una conexi\u00f3n TLS</li> <li>Establecer cookies con el atributo <code>HttpOnly</code>,     a menos que espec\u00edficamente requiera scripts del lado del cliente dentro de su aplicaci\u00f3n     para leer o establecer un valor de cookie</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/06-digital-identity/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Autenticaci\u00f3n de OWASP</li> <li>Hoja de Referencia: Autenticaci\u00f3n de OWASP</li> <li>Hoja de Referencia: Elegir y Usar Preguntas de Seguridad de OWASP</li> <li>Hoja de Referencia: Contrase\u00f1a Olvidada de OWASP</li> <li>Hoja de Referencia: Autenticaci\u00f3n Multifactor de OWASP</li> <li>Hoja de Referencia: Almacenamiento de Contrase\u00f1as de OWASP</li> <li>Hoja de Referencia: Gesti\u00f3n de Sesiones de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/07-access-controls/","title":"Aplicar Controles de Acceso","text":"<p>El Control de Acceso o Autorizaci\u00f3n es el proceso de conceder o denegar solicitudes espec\u00edficas de un usuario, programa o proceso.</p> <p>Consulte el control proactivo C1: Implementar Controles de Acceso y sus hojas de referencia para obtener m\u00e1s contexto del proyecto OWASP Top 10 Controles Proactivos, y utilice la lista a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada para el proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/07-access-controls/#1-autorizacion","title":"1. Autorizaci\u00f3n","text":"<ol> <li>Dise\u00f1ar el control de acceso / autorizaci\u00f3n a fondo desde el principio</li> <li>Forzar que todas las solicitudes pasen por verificaciones de control de acceso a menos que sean p\u00fablicas</li> <li>Denegar por defecto; si una solicitud no est\u00e1 espec\u00edficamente permitida, entonces es denegada</li> <li>Aplicar el privilegio m\u00ednimo, proporcionando el menor acceso que sea necesario</li> <li>Registrar todos los eventos de autorizaci\u00f3n</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/07-access-controls/#2-control-de-acceso","title":"2. Control de acceso","text":"<ol> <li>Obligar al uso de controles de autorizaci\u00f3n en cada solicitud</li> <li>Utilizar solo objetos de sistema confiables para tomar decisiones de autorizaci\u00f3n de acceso</li> <li>Utilizar un \u00fanico componente para todo el sitio para verificar la autorizaci\u00f3n de acceso</li> <li>Los controles de acceso deben fallar de manera segura</li> <li>Denegar todo acceso si la aplicaci\u00f3n no puede acceder a su informaci\u00f3n de configuraci\u00f3n de seguridad</li> <li>Segregar la l\u00f3gica privilegiada del resto del c\u00f3digo de la aplicaci\u00f3n</li> <li>Limitar el n\u00famero de transacciones que un solo usuario o dispositivo puede realizar en un per\u00edodo de tiempo determinado,     lo suficientemente bajo para disuadir ataques automatizados pero por encima del requisito real del negocio</li> <li>Si se permiten sesiones autenticadas largas, revalidar peri\u00f3dicamente la autorizaci\u00f3n de un usuario</li> <li>Implementar auditor\u00eda de cuentas y hacer obligatoria la desactivaci\u00f3n de cuentas no utilizadas</li> <li>La aplicaci\u00f3n debe admitir la terminaci\u00f3n de sesiones cuando cese la autorizaci\u00f3n</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/07-access-controls/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Autorizaci\u00f3n de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/08-protect-data/","title":"Proteger Datos en Todas Partes","text":"<p>Los datos sensibles como contrase\u00f1as, n\u00fameros de tarjetas de cr\u00e9dito, registros m\u00e9dicos, informaci\u00f3n personal y secretos comerciales requieren protecci\u00f3n adicional, particularmente si esos datos est\u00e1n sujetos a leyes de privacidad (Reglamento General de Protecci\u00f3n de Datos de la UE, GDPR), reglas de protecci\u00f3n de datos financieros como el Est\u00e1ndar de Seguridad de Datos para la Industria de Tarjetas de Pago (PCI DSS) u otras regulaciones.</p> <p>Consulte el control proactivo C2: Usar la Criptograf\u00eda de manera adecuada y sus hojas de referencia para obtener m\u00e1s contexto del proyecto OWASP Top 10 Controles Proactivos, y utilice la lista a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada para el proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/08-protect-data/#1-proteccion-de-datos","title":"1. Protecci\u00f3n de datos","text":"<ol> <li>Clasificar los datos seg\u00fan el nivel de sensibilidad</li> <li>Implementar controles de acceso apropiados para datos sensibles</li> <li>Cifrar datos en tr\u00e1nsito</li> <li>Asegurar que los canales de comunicaci\u00f3n seguros est\u00e9n configurados correctamente</li> <li>Evitar almacenar datos sensibles cuando sea posible</li> <li>Asegurar que los datos sensibles en reposo est\u00e9n protegidos criptogr\u00e1ficamente para evitar divulgaci\u00f3n     y modificaci\u00f3n no autorizada</li> <li>Eliminar datos sensibles cuando ya no sean necesarios</li> <li>Almacenar secretos a nivel de aplicaci\u00f3n en una b\u00f3veda de secretos</li> <li>Verificar que los secretos no est\u00e9n almacenados en c\u00f3digo, archivos de configuraci\u00f3n o variables de entorno</li> <li>Implementar el privilegio m\u00ednimo, restringiendo el acceso a funcionalidades, datos e informaci\u00f3n del sistema</li> <li>Proteger todas las copias en cach\u00e9 o temporales de datos sensibles contra acceso no autorizado</li> <li>Eliminar esas copias temporales de datos sensibles tan pronto como ya no sean necesarias</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/08-protect-data/#2-gestion-de-memoria","title":"2. Gesti\u00f3n de memoria","text":"<ol> <li>Inicializar expl\u00edcitamente todas las variables y almacenes de datos</li> <li>Verificar que los b\u00faferes sean tan grandes como se especifica</li> <li>Comprobar los l\u00edmites del b\u00fafer si se llama a la funci\u00f3n en un bucle y proteger contra desbordamientos</li> <li>Cerrar espec\u00edficamente los recursos, no depender del recolector de basura</li> <li>Usar pilas no ejecutables cuando est\u00e9n disponibles</li> <li>Liberar correctamente la memoria asignada al completar las funciones y en todos los puntos de salida</li> <li>Sobrescribir cualquier informaci\u00f3n sensible almacenada en la memoria asignada en todos los puntos de salida de la funci\u00f3n</li> <li>Proteger las variables y recursos compartidos contra el acceso concurrente inapropiado</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/08-protect-data/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Almacenamiento Criptogr\u00e1fico de OWASP</li> <li>Hoja de Referencia: Gesti\u00f3n de Secretos de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/09-logging-monitoring/","title":"Implementar Registro y Monitoreo de Seguridad","text":"<p>El registro es la grabaci\u00f3n de informaci\u00f3n de seguridad durante la operaci\u00f3n en tiempo de ejecuci\u00f3n de una aplicaci\u00f3n. El monitoreo es la revisi\u00f3n en vivo de los registros de aplicaciones y seguridad utilizando varias formas de automatizaci\u00f3n.</p> <p>Consulte el control proactivo C9: Implementar Registro y Monitoreo de Seguridad y sus hojas de referencia para obtener m\u00e1s contexto del proyecto OWASP Top 10 Controles Proactivos, y utilice la lista a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada para el proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/09-logging-monitoring/#1-registro-de-seguridad","title":"1. Registro de seguridad","text":"<ol> <li>Registrar datos enviados que est\u00e9n fuera de un rango num\u00e9rico esperado.</li> <li>Registrar datos enviados que impliquen cambios en datos que no deber\u00edan ser modificables</li> <li>Registrar solicitudes que violen las reglas de control de acceso del lado del servidor</li> <li>Codificar y validar cualquier car\u00e1cter peligroso antes de registrar para prevenir ataques de inyecci\u00f3n en registros</li> <li>No registrar informaci\u00f3n sensible</li> <li>Los controles de registro deben admitir tanto el \u00e9xito como el fracaso de eventos de seguridad especificados</li> <li>No almacenar informaci\u00f3n sensible en los registros, incluidos detalles innecesarios del sistema,     identificadores de sesi\u00f3n o contrase\u00f1as</li> <li>Utilizar una funci\u00f3n hash criptogr\u00e1fica para validar la integridad de las entradas de registro</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/09-logging-monitoring/#2-diseno-de-registro-de-seguridad","title":"2. Dise\u00f1o de registro de seguridad","text":"<ol> <li>Proteger la integridad del registro</li> <li>Asegurar que las entradas de registro que incluyen datos no confiables no se ejecutar\u00e1n como c\u00f3digo     en la interfaz o software de visualizaci\u00f3n de registros previsto</li> <li>Restringir el acceso a los registros solo a individuos autorizados</li> <li>Utilizar una rutina central para todas las operaciones de registro</li> <li>Reenviar registros de sistemas distribuidos a un servicio de registro central y seguro</li> <li>Seguir un formato y enfoque de registro com\u00fan dentro del sistema y entre sistemas de una organizaci\u00f3n</li> <li>Sincronizar entre nodos para garantizar que las marcas de tiempo sean consistentes</li> <li>Todos los controles de registro deben implementarse en un sistema confiable</li> <li>Asegurar que exista un mecanismo para realizar an\u00e1lisis de registros</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/09-logging-monitoring/#referencias","title":"Referencias","text":"<ul> <li>Hoja de Referencia: Registro de OWASP</li> <li>Hoja de Referencia: Vocabulario de Registro de Aplicaciones de OWASP</li> <li>Top 10 Controles Proactivos de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/04-design/02-web-app-checklist/10-handle-errors-exceptions/","title":"Manejar todos los Errores y Excepciones","text":"<p>Manejar excepciones y errores correctamente es cr\u00edtico para hacer que su c\u00f3digo sea confiable y seguro. El manejo de errores y excepciones ocurre en todas las \u00e1reas de una aplicaci\u00f3n, incluyendo la l\u00f3gica cr\u00edtica del negocio as\u00ed como las caracter\u00edsticas de seguridad y el c\u00f3digo del framework.</p> <p>Consulte el control proactivo C3: Validar todas las Entradas y Manejar Excepciones y sus hojas de referencia para obtener m\u00e1s contexto del proyecto OWASP Top 10 Controles Proactivos, y utilice la lista a continuaci\u00f3n como sugerencias para una lista de verificaci\u00f3n adaptada para el proyecto individual.</p>"},{"location":"es/04-design/02-web-app-checklist/10-handle-errors-exceptions/#1-errores-y-excepciones","title":"1. Errores y excepciones","text":"<ol> <li>Gestionar las excepciones de manera centralizada para evitar bloques try/catch duplicados en el c\u00f3digo</li> <li>Asegurar que todo comportamiento inesperado se maneje correctamente dentro de la aplicaci\u00f3n</li> <li>Asegurar que los mensajes de error mostrados a los usuarios no filtren datos cr\u00edticos,     pero que sean lo suficientemente detallados para permitir la respuesta adecuada del usuario</li> <li>Asegurar que los registros de excepciones proporcionen informaci\u00f3n suficiente para los equipos de soporte,     control de calidad, forense o respuesta a incidentes</li> <li>Probar y verificar cuidadosamente el c\u00f3digo de manejo de errores</li> <li>No revelar informaci\u00f3n sensible en las respuestas de error, por ejemplo     detalles del sistema, identificadores de sesi\u00f3n o informaci\u00f3n de la cuenta</li> <li>Utilizar manejadores de errores que no muestren informaci\u00f3n de depuraci\u00f3n o de seguimiento de pila</li> <li>Implementar mensajes de error gen\u00e9ricos y utilizar p\u00e1ginas de error personalizadas</li> <li>La aplicaci\u00f3n debe manejar los errores de la aplicaci\u00f3n y no depender de la configuraci\u00f3n del servidor</li> <li>Liberar adecuadamente la memoria asignada cuando ocurran condiciones de error</li> <li>La l\u00f3gica de manejo de errores asociada con los controles de seguridad debe denegar el acceso por defecto</li> </ol>"},{"location":"es/04-design/02-web-app-checklist/10-handle-errors-exceptions/#referencias","title":"Referencias","text":"<ul> <li>Gu\u00eda de Revisi\u00f3n de C\u00f3digo: Manejo de Errores de OWASP</li> <li>Manejo Inadecuado de Errores  de OWASP</li> <li>Top 10 Controles Proactivos  de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/","title":"Descripci\u00f3n","text":""},{"location":"es/05-implementation/#5-implementacion","title":"5. Implementaci\u00f3n","text":"<p>La funci\u00f3n de negocio Implementaci\u00f3n est\u00e1 descrita por el Modelo de Madurez de Aseguramiento de Software (SAMM) de OWASP. La Implementaci\u00f3n se centra en los procesos y actividades relacionadas con la manera en que una organizaci\u00f3n construye y despliega componentes de software y sus defectos relacionados. Las actividades de Implementaci\u00f3n tienen el mayor impacto en la vida diaria de los desarrolladores, y un objetivo importante de la Implementaci\u00f3n es entregar software que funcione de manera confiable con un m\u00ednimo de defectos.</p> <p>La Implementaci\u00f3n debe incluir pr\u00e1cticas de seguridad como:</p> <ul> <li>Construcci\u00f3n Segura</li> <li>Despliegue Seguro</li> <li>Gesti\u00f3n de Defectos</li> </ul> <p>La Implementaci\u00f3n es donde la aplicaci\u00f3n/sistema comienza a tomar forma; se escribe el c\u00f3digo fuente y se crean las pruebas. La implementaci\u00f3n de la aplicaci\u00f3n sigue un ciclo de vida de desarrollo seguro, con seguridad incorporada desde el inicio.</p> <p>La implementaci\u00f3n utilizar\u00e1 un m\u00e9todo seguro de control y almacenamiento del c\u00f3digo fuente para cumplir con los requisitos de seguridad del dise\u00f1o. El equipo de desarrollo se referir\u00e1 a la documentaci\u00f3n que aconseja sobre las mejores pr\u00e1cticas, utilizar\u00e1 bibliotecas seguras siempre que sea posible, adem\u00e1s de verificar y realizar seguimiento de las dependencias externas.</p> <p>Gran parte de la habilidad de implementaci\u00f3n proviene de la experiencia, y tener en cuenta lo que se debe hacer y lo que no se debe hacer durante el desarrollo seguro es en s\u00ed misma una actividad de conocimiento importante.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/04-maswe/","title":"MASWE","text":"<p>El proyecto insignia de OWASP Seguridad de Aplicaciones M\u00f3viles (MAS) proporciona est\u00e1ndares de la industria para la seguridad de aplicaciones m\u00f3viles.</p> <p>El proyecto OWASP MASWE es una de las herramientas proporcionadas por MAS, y ofrece una lista de debilidades que se han encontrado en varias aplicaciones m\u00f3viles.</p>"},{"location":"es/05-implementation/04-maswe/#que-es-el-maswe","title":"\u00bfQu\u00e9 es el MASWE?","text":"<p>La Enumeraci\u00f3n de Debilidades de MAS lista debilidades y, por lo tanto, posibles vulnerabilidades, que se han encontrado en varias aplicaciones m\u00f3viles a lo largo del tiempo.</p> <p>El MASWE se divide en categor\u00edas de debilidades que corresponden a las categor\u00edas de verificaci\u00f3n de MASVS:</p> <ul> <li>MASVS-STORAGE almacenamiento de datos sensibles</li> <li>MASVS-CRYPTO mejores pr\u00e1cticas de criptograf\u00eda</li> <li>MASVS-AUTH mecanismos de autenticaci\u00f3n y autorizaci\u00f3n</li> <li>MASVS-NETWORK comunicaciones de red</li> <li>MASVS-PLATFORM interacciones con la plataforma m\u00f3vil</li> <li>MASVS-CODE plataforma y software de terceros</li> <li>MASVS-RESILIENCE integridad   y ejecuci\u00f3n en una plataforma confiable</li> <li>MASVS-PRIVACY privacidad de usuarios, datos y recursos</li> </ul>"},{"location":"es/05-implementation/04-maswe/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>Aunque el MASWE es un proyecto relativamente nuevo desde 2024, ya proporciona un lenguaje com\u00fan para discutir y categorizar debilidades encontradas en aplicaciones m\u00f3viles. Tambi\u00e9n proporciona una lista de posibles vulnerabilidades que deben considerarse durante el ciclo de vida del dise\u00f1o y al crear o revisar requisitos de seguridad para aplicaciones m\u00f3viles.</p> <p>El MASWE es una valiosa lista de lo que podr\u00eda salir mal con las aplicaciones m\u00f3viles junto con las actividades de actores maliciosos.</p>"},{"location":"es/05-implementation/04-maswe/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>La Enumeraci\u00f3n de Debilidades Comunes (CWE), publicada por MITRE, puede ser utilizada por arquitectos de seguridad para que est\u00e9n conscientes de qu\u00e9 debilidades y vulnerabilidades potenciales podr\u00edan estar presentes en una aplicaci\u00f3n. Los equipos de desarrollo pueden usar el CWE como referencia para estas debilidades y para ayudar a comprender cualquier mitigaci\u00f3n. Estos son solo dos ejemplos de c\u00f3mo se utiliza ampliamente el CWE.</p> <p>De manera similar, el MASWE puede utilizarse en el desarrollo de aplicaciones m\u00f3viles para:</p> <ul> <li>informar a los equipos de desarrollo sobre debilidades espec\u00edficas</li> <li>identificaci\u00f3n de requisitos de seguridad</li> <li>utilizarse como ayuda para la capacitaci\u00f3n</li> <li>proporcionar categorizaci\u00f3n de debilidades</li> </ul> <p>Esta lista es solo un punto de partida; hay muchos usos para el MASWE.</p>"},{"location":"es/05-implementation/04-maswe/#referencias","title":"Referencias","text":"<ul> <li>Proyecto de Seguridad de Aplicaciones M\u00f3viles (MAS)</li> <li>Enumeraci\u00f3n de Debilidades MAS (MASWE)</li> <li>Enumeraci\u00f3n de Debilidades Comunes de MITRE (CWE)</li> <li>Est\u00e1ndar de Verificaci\u00f3n MAS (MASVS)</li> <li>Lista de Verificaci\u00f3n MAS</li> <li>Gu\u00eda de Pruebas MAS (MASTG)</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/01-documentation/","title":"Descripci\u00f3n","text":"<p>La documentaci\u00f3n se utiliza aqu\u00ed como parte de la actividad Capacitaci\u00f3n y Concienciaci\u00f3n de SAMM, que a su vez forma parte de la pr\u00e1ctica de seguridad Educaci\u00f3n y Orientaci\u00f3n de SAMM dentro de la funci\u00f3n de negocio Gobernanza.</p> <p>Es importante que los equipos de desarrollo dispongan de buena documentaci\u00f3n sobre t\u00e9cnicas de seguridad, frameworks, herramientas y amenazas. La documentaci\u00f3n ayuda a promover la concienciaci\u00f3n sobre seguridad para todos los equipos involucrados en el desarrollo de software, y proporciona orientaci\u00f3n sobre c\u00f3mo incorporar la seguridad en aplicaciones y sistemas.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/01-documentation/01-proactive-controls/","title":"Top 10 Proactive Controls","text":"<p>Los Top 10 Controles Proactivos de OWASP describen los controles y categor\u00edas de control m\u00e1s importantes que los arquitectos de seguridad y los equipos de desarrollo deber\u00edan considerar en proyectos de aplicaciones web.</p>"},{"location":"es/05-implementation/01-documentation/01-proactive-controls/#que-son-los-top-10-controles-proactivos","title":"\u00bfQu\u00e9 son los Top 10 Controles Proactivos?","text":"<p>Los Top 10 Controles Proactivos de OWASP es una lista de t\u00e9cnicas de seguridad que deber\u00edan considerarse para aplicaciones web. Est\u00e1n ordenados por orden de importancia, siendo el control n\u00famero 1 el m\u00e1s importante:</p> <ul> <li>C1: Implementar Control de Acceso, ref Hojas de Referencia</li> <li>C2: Usar Criptograf\u00eda de la manera correcta, ref Hojas de Referencia</li> <li>C3: Validar todas las Entradas y Manejar Excepciones, ref Hojas de Referencia</li> <li>C4: Encargarse de la Seguridad desde el Inicio, ref Hojas de Referencia</li> <li>C5: Configuraciones Seguras por Defecto, ref Hojas de Referencia</li> <li>C6: Mantener sus Componentes Seguros, ref Hojas de Referencia</li> <li>C7: Implementar Identidad Digital, ref Hojas de Referencia</li> <li>C8: Aprovechar las Caracter\u00edsticas de Seguridad del Navegador, ref Hojas de Referencia</li> <li>C9: Implementar Registro y Monitoreo de Seguridad, ref Hojas de Referencia</li> <li>C10: Detener la Falsificaci\u00f3n de Solicitudes del Lado del Servidor, ref Hojas de Referencia</li> </ul>"},{"location":"es/05-implementation/01-documentation/01-proactive-controls/#por-que-usarlos","title":"\u00bfPor qu\u00e9 usarlos?","text":"<p>Los Controles Proactivos son una lista bien establecida de controles de seguridad, publicada por primera vez en 2014 y revisada en 2018, por lo que considerar estos controles puede verse como una mejor pr\u00e1ctica. Seguir las mejores pr\u00e1cticas siempre es recomendable: como m\u00ednimo, una organizaci\u00f3n deber\u00eda evitar las vulnerabilidades evitables.</p> <p>Implementar estos controles proactivos puede ayudar a remediar vulnerabilidades de seguridad comunes, por ejemplo:</p> <ul> <li>Clickjacking</li> <li>Credential Stuffing (Relleno de credenciales)</li> <li>Cross-site leaks (Fugas entre sitios)</li> <li>Ataques de Denegaci\u00f3n de Servicio (DoS)</li> <li>Ataques XSS basados en DOM incluyendo DOM Clobbering</li> <li>IDOR (Referencia de Objeto Directa Insegura)</li> <li>Inyecci\u00f3n incluyendo inyecci\u00f3n de comandos del sistema operativo y XXE</li> <li>Ataques de inyecci\u00f3n espec\u00edficos de LDAP</li> <li>Contaminaci\u00f3n de prototipos</li> <li>Ataques SSRF</li> <li>Inyecci\u00f3n SQL y el uso de Parametrizaci\u00f3n de Consultas</li> <li>Redirecciones y reenv\u00edos no validados</li> <li>Ataques XSS y Evasi\u00f3n de Filtros XSS</li> </ul>"},{"location":"es/05-implementation/01-documentation/01-proactive-controls/#como-aplicarlos","title":"C\u00f3mo aplicarlos","text":"<p>La serie OWASP Spotlight proporciona una visi\u00f3n general de c\u00f3mo utilizar este proyecto de documentaci\u00f3n: 'Proyecto 8 - Controles Proactivos'.</p> <p>Durante el desarrollo de una aplicaci\u00f3n web, considere utilizar cada control de seguridad descrito en las secciones de los Controles Proactivos que sean relevantes para la aplicaci\u00f3n.</p> <p>Las Hojas de Referencia de OWASP han sido indexadas espec\u00edficamente para cada Control Proactivo, que pueden utilizarse como informaci\u00f3n adicional sobre la implementaci\u00f3n del control.</p>"},{"location":"es/05-implementation/01-documentation/01-proactive-controls/#referencias","title":"Referencias","text":"<ul> <li>Proyecto de Controles Proactivos de OWASP</li> <li>\u00cdndice de Controles Proactivos de Hojas de Referencia de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/01-documentation/02-go-scp/","title":"Go Secure Coding Practices","text":"<p>Las Pr\u00e1cticas de Codificaci\u00f3n Segura en Go de OWASP (Go-SCP) son un conjunto de pr\u00e1cticas de codificaci\u00f3n segura para el lenguaje de programaci\u00f3n Go.</p> <p>El proyecto de documentaci\u00f3n Go-SCP es un Proyecto Incubadora de OWASP que tiene suficiente soporte a largo plazo para alcanzar pronto el estado de Laboratorio. El documento publicado puede ser descargado en varios formatos desde el repositorio de GitHub.</p>"},{"location":"es/05-implementation/01-documentation/02-go-scp/#que-es-go-scp","title":"\u00bfQu\u00e9 es Go-SCP?","text":"<p>Go-SCP proporciona ejemplos y recomendaciones para ayudar a los desarrolladores a evitar errores e inconvenientes comunes, incluyendo ejemplos de c\u00f3digo en Go que proporcionan una gu\u00eda pr\u00e1ctica para implementar las recomendaciones. Go-SCP cubre la Gu\u00eda de Referencia R\u00e1pida de Pr\u00e1cticas de Codificaci\u00f3n Segura de OWASP tema por tema:</p> <ul> <li>Validaci\u00f3n de Entrada</li> <li>Sanitizaci\u00f3n y Codificaci\u00f3n de Salida</li> <li>Autenticaci\u00f3n y Gesti\u00f3n de Contrase\u00f1as</li> <li>Gesti\u00f3n de Sesiones</li> <li>Control de Acceso</li> <li>Pr\u00e1cticas Criptogr\u00e1ficas</li> <li>Manejo de Errores y Registro</li> <li>Protecci\u00f3n de Datos</li> <li>Seguridad en las Comunicaciones</li> <li>Configuraci\u00f3n del Sistema</li> <li>Seguridad de Bases de Datos</li> <li>Gesti\u00f3n de Archivos</li> <li>Gesti\u00f3n de Memoria</li> <li>Pr\u00e1cticas Generales de Codificaci\u00f3n</li> </ul> <p>El libro Pr\u00e1cticas de Codificaci\u00f3n Segura en Go est\u00e1 disponible en varios formatos:</p> <ul> <li>PDF</li> <li>ePub</li> <li>DocX</li> <li>MOBI</li> </ul>"},{"location":"es/05-implementation/01-documentation/02-go-scp/#por-que-usar-go-scp","title":"\u00bfPor qu\u00e9 usar Go-SCP?","text":"<p>Los equipos de desarrollo a menudo necesitan ayuda y soporte para implementar correctamente la seguridad en aplicaciones web, y parte de esta ayuda proviene de directrices y mejores pr\u00e1cticas de codificaci\u00f3n segura. Go-SCP proporciona esta orientaci\u00f3n para una amplia gama de temas de codificaci\u00f3n segura, adem\u00e1s de proporcionar ejemplos pr\u00e1cticos de c\u00f3digo para cada pr\u00e1ctica de codificaci\u00f3n.</p>"},{"location":"es/05-implementation/01-documentation/02-go-scp/#como-usar-go-scp","title":"C\u00f3mo usar Go-SCP","text":"<p>La audiencia principal de la Gu\u00eda de Pr\u00e1cticas de Codificaci\u00f3n Segura en Go son los desarrolladores, particularmente aquellos con experiencia previa en otros lenguajes de programaci\u00f3n.</p> <p>Descargue el documento Go-SCP en uno de los formatos: PDF, ePub, DocX y MOBI. Consulte el cap\u00edtulo espec\u00edfico del tema y luego utilice los fragmentos de c\u00f3digo de ejemplo en Go para obtener una gu\u00eda pr\u00e1ctica sobre codificaci\u00f3n segura usando Go.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/01-documentation/03-cheatsheets/","title":"Cheatsheet Series","text":"<p>La Serie de Hojas de Referencia de OWASP proporciona una colecci\u00f3n concisa de informaci\u00f3n de alto valor sobre una amplia gama de temas espec\u00edficos de seguridad en aplicaciones. Las hojas de referencia han sido creadas por una comunidad de profesionales de seguridad de aplicaciones que tienen experiencia en cada tema espec\u00edfico.</p> <p>El proyecto de documentaci\u00f3n de la Serie de Hojas de Referencia es un Proyecto Insignia (Flagship) de OWASP que se mantiene constantemente actualizado.</p>"},{"location":"es/05-implementation/01-documentation/03-cheatsheets/#que-son-las-hojas-de-referencia","title":"\u00bfQu\u00e9 son las Hojas de Referencia?","text":"<p>Las Hojas de Referencia de OWASP son una base de conocimientos com\u00fan creada por la comunidad de seguridad de software para una amplia audiencia que no se limita a la comunidad de seguridad.</p> <p>Las Hojas de Referencia son una serie de art\u00edculos aut\u00f3nomos escritos por la comunidad de seguridad sobre un tema espec\u00edfico dentro del dominio de seguridad. La gama de temas cubiertos por las hojas de referencia es amplia, casi de la A a la Z: desde Seguridad AJAX hasta vulnerabilidades XS (Cross Site). Cada hoja de referencia proporciona una introducci\u00f3n al tema y ofrece informaci\u00f3n suficiente para comprender el concepto b\u00e1sico. Luego contin\u00faa describiendo su tema con m\u00e1s detalle, a menudo proporcionando recomendaciones o mejores pr\u00e1cticas.</p>"},{"location":"es/05-implementation/01-documentation/03-cheatsheets/#por-que-usarlas","title":"\u00bfPor qu\u00e9 usarlas?","text":"<p>La Serie de Hojas de Referencia de OWASP proporciona a los desarrolladores e ingenieros de seguridad la mayor\u00eda, y quiz\u00e1s toda, la informaci\u00f3n sobre temas de seguridad que necesitar\u00e1n para hacer su trabajo. Adem\u00e1s, las Hojas de Referencia son consideradas autoritativas: se recomienda seguir los consejos de estas Hojas de Referencia. Si una aplicaci\u00f3n web no sigue las recomendaciones de una hoja de referencia, por ejemplo, la implementaci\u00f3n podr\u00eda ser cuestionada durante los procesos de prueba o revisi\u00f3n.</p>"},{"location":"es/05-implementation/01-documentation/03-cheatsheets/#como-usarlas","title":"C\u00f3mo usarlas","text":"<p>La serie OWASP Spotlight proporciona una buena visi\u00f3n general del uso de esta documentaci\u00f3n: 'Proyecto 4 - Serie de Hojas de Referencia'.</p> <p>Hay muchas hojas de referencia en la Serie de Hojas de Referencia de OWASP; 91 de ellas hasta marzo de 2024 y este n\u00famero est\u00e1 empezando a aumentar. La comunidad de OWASP reconoce que esto puede resultar abrumador al principio, por lo que las ha organizado de varias formas:</p> <ul> <li>Alfab\u00e9ticamente</li> <li>Indexadas para seguir el proyecto ASVS o el proyecto MASVS</li> <li>Organizadas en secciones del Top 10 de OWASP o los Controles Proactivos de OWASP</li> </ul> <p>Las hojas de referencia se actualizan continuamente y siempre est\u00e1n abiertas a contribuciones de la comunidad de seguridad.</p>"},{"location":"es/05-implementation/01-documentation/03-cheatsheets/#referencias","title":"Referencias","text":"<ul> <li>Serie de Hojas de Referencia de OWASP</li> <li>\u00cdndice ASVS de las Hojas de Referencia de OWASP</li> <li>\u00cdndice MASVS de las Hojas de Referencia de OWASP</li> <li>\u00cdndice de Controles Proactivos de las Hojas de Referencia de OWASP</li> <li>\u00cdndice Top 10 de las Hojas de Referencia de OWASP</li> <li>Proyecto de Hojas de Referencia de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/02-dependencies/","title":"Descripci\u00f3n","text":"<p>La gesti\u00f3n de dependencias de software se describe en la actividad Dependencias de Software de SAMM, que a su vez forma parte de la pr\u00e1ctica de seguridad Construcci\u00f3n Segura de SAMM dentro de la funci\u00f3n de negocio Implementaci\u00f3n.</p> <p>Es importante registrar todas las dependencias utilizadas en todo el entorno de producci\u00f3n de la aplicaci\u00f3n. Esto puede lograrse mediante el An\u00e1lisis de Composici\u00f3n de Software (SCA) para identificar las dependencias de terceros.</p> <p>Una Lista de Materiales de Software (SBOM) proporciona un registro de las dependencias dentro del sistema/aplicaci\u00f3n, y ofrece informaci\u00f3n sobre cada dependencia para que pueda ser rastreada:</p> <ul> <li>D\u00f3nde se utiliza o referencia</li> <li>Versi\u00f3n utilizada</li> <li>Licencia</li> <li>Informaci\u00f3n de origen y repositorio</li> <li>Estado de soporte y mantenimiento de la dependencia</li> </ul> <p>Disponer de un SBOM proporciona la capacidad de averiguar r\u00e1pidamente qu\u00e9 aplicaciones se ven afectadas por una Vulnerabilidad y Exposici\u00f3n Com\u00fan (CVE) espec\u00edfica, o qu\u00e9 CVEs est\u00e1n presentes en una aplicaci\u00f3n particular.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/02-dependencies/01-dependency-check/","title":"Dependency-Check","text":"<p>OWASP Dependency-Check es una herramienta que proporciona An\u00e1lisis de Composici\u00f3n de Software (SCA) desde la l\u00ednea de comandos. Identifica las bibliotecas de terceros en un proyecto de aplicaci\u00f3n web y verifica si estas bibliotecas son vulnerables utilizando la base de datos NVD.</p> <p>Dependency-Check es un proyecto Insignia (Flagship) de OWASP y puede descargarse desde el \u00e1rea de versiones de GitHub. Dependency-Check se inici\u00f3 en septiembre de 2012 y desde entonces ha recibido soporte continuo con versiones regulares.</p>"},{"location":"es/05-implementation/02-dependencies/01-dependency-check/#que-es-dependency-check","title":"\u00bfQu\u00e9 es Dependency-Check?","text":"<p>Dependency-Check es una herramienta de An\u00e1lisis de Composici\u00f3n de Software (SCA) que intenta detectar vulnerabilidades p\u00fablicas contenidas dentro de las dependencias de un proyecto. Lo hace determinando si existe un identificador de enumeracion de plataforma com\u00fan - Common Platform Enumeration (CPE) para una dependencia dada.</p> <p>El motor principal contiene una serie de analizadores que inspeccionan las dependencias del proyecto e identifican el CPE para la dependencia dada. Si se identifica un CPE, entonces se hace referencia cruzada con la base de datos CVE de NIST y cualquier entrada Common Vulnerability and Exposure (CVE) asociada se lista en el informe.</p> <p>El motor de an\u00e1lisis principal de Dependency-Check puede usarse como:</p> <ul> <li>una Tarea Ant</li> <li>una Herramienta de L\u00ednea de Comandos</li> <li>Plugin de Gradle</li> <li>Plugin de Jenkins</li> <li>Plugin de Maven</li> <li>Plugin de SBT</li> </ul>"},{"location":"es/05-implementation/02-dependencies/01-dependency-check/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>La verificaci\u00f3n de componentes vulnerables, 'A06 Componentes Vulnerables y Desactualizados', est\u00e1 en el OWASP Top 10 y es una de las actividades de seguridad m\u00e1s directas y efectivas para implementar. La herramienta Dependency-Check proporciona verificaciones de componentes vulnerables que podr\u00edan ejecutarse desde la l\u00ednea de comandos.</p> <p>Esto es \u00fatil para los equipos de desarrollo; la capacidad de verificar componentes vulnerables de la aplicaci\u00f3n desde la l\u00ednea de comandos proporciona retroalimentaci\u00f3n inmediata al desarrollador sin tener que esperar a que se ejecute un pipeline.</p> <p>Dependency-Check tambi\u00e9n proporciona plugins para verificar componentes vulnerables en pipelines CI/CD.</p>"},{"location":"es/05-implementation/02-dependencies/01-dependency-check/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>La serie OWASP Spotlight proporciona un ejemplo de los riesgos involucrados en el uso de bibliotecas desactualizadas y vulnerables, y c\u00f3mo usar Dependency-Check: 'Project 2 - OWASP Dependency Check'.</p> <p>Consulte la documentaci\u00f3n de Dependency-Check para comenzar a ejecutarlo desde la l\u00ednea de comandos:</p> <ul> <li>aseg\u00farese de que Java est\u00e1 instalado, por ejemplo desde Eclipse Adoptium</li> <li>descargue y descomprima la \u00faltima versi\u00f3n de Dependency-Check</li> <li>navegue al directorio 'bin' de Dependency-Check y ejec\u00fatelo, usando Threat Dragon como ejemplo:   <code>./dependency-check.sh --project \"Threat Dragon\" --scan ~/github/threat-dragon</code></li> <li>abra el archivo de salida html y act\u00fae seg\u00fan los hallazgos</li> </ul> <p>La l\u00ednea de comandos es \u00fatil para la depuraci\u00f3n inmediata durante el desarrollo. Dependiendo del entorno de automatizaci\u00f3n que est\u00e9 en funcionamiento, tambi\u00e9n se puede instalar un plugin en un pipeline que luego puede generar los informes SCA.</p>"},{"location":"es/05-implementation/02-dependencies/01-dependency-check/#referencias","title":"Referencias","text":"<ul> <li>Proyecto Dependency-Check de OWASP</li> <li>Documentaci\u00f3n de Dependency-Check de OWASP</li> <li>Hoja de Referencia de Seguridad CI/CD de OWASP</li> <li>Top 10 de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p> <p>\\newpage</p>"},{"location":"es/05-implementation/02-dependencies/02-dependency-track/","title":"Dependency-Track","text":"<p>OWASP Dependency-Track es una plataforma inteligente para el An\u00e1lisis de Componentes, incluido Software de Terceros. Permite a las organizaciones identificar y reducir riesgos en la cadena de suministro de software utilizando su capacidad para analizar una Lista de Materiales de Software (SBOM).</p> <p>Dependency-Track es un proyecto Insignia (Flagship) de OWASP y puede instalarse utilizando un archivo docker-compose desde el sitio web de Dependency-Track.</p>"},{"location":"es/05-implementation/02-dependencies/02-dependency-track/#que-es-dependency-track","title":"\u00bfQu\u00e9 es Dependency-Track?","text":"<p>La herramienta Dependency-Track proporciona a una organizaci\u00f3n un dashboard para analizar, supervisar y controlar los componentes de todos sus proyectos. Realiza un seguimiento del uso de componentes en todas las aplicaciones del portafolio de una organizaci\u00f3n mediante el an\u00e1lisis de exportaciones de m\u00faltiples proyectos dentro de la organizaci\u00f3n, a trav\u00e9s de SBOMs de CycloneDX y Vulnerability Exploitability Exchange.</p> <p>Proporciona soporte completo para todo tipo de componentes, incluidos hardware y servicios. Dependency-Track identifica m\u00faltiples formas de riesgo, incluidos componentes con vulnerabilidades conocidas, mediante la integraci\u00f3n con m\u00faltiples fuentes de inteligencia de vulnerabilidades como la Base de Datos Nacional de Vulnerabilidades (NVD), asesor\u00edas de seguridad de GitHub y otros.</p> <p>Tiene soporte incorporado para varios tipos de repositorios, y proporcionar\u00e1 riesgo y cumplimiento para seguridad, riesgo y operaciones. Consulte la Documentaci\u00f3n para obtener m\u00e1s informaci\u00f3n sobre las caracter\u00edsticas proporcionadas por Dependency-Track.</p>"},{"location":"es/05-implementation/02-dependencies/02-dependency-track/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>Al aprovechar las capacidades de la Lista de Materiales de Software (SBOM), Dependency-Track proporciona funcionalidades que las soluciones tradicionales de An\u00e1lisis de Composici\u00f3n de Software (SCA) dif\u00edcilmente podr\u00edan lograr.</p> <p>El dashboard de Dependency-Track tiene la capacidad de analizar todos los proyectos de software dentro de una organizaci\u00f3n. Se integra con numerosas plataformas de notificaci\u00f3n, por ejemplo Slack y Microsoft Teams, y puede enviar resultados a varias herramientas de agregaci\u00f3n de vulnerabilidades como DefectDojo o Fortify.</p> <p>Dependency-Track es rico en funcionalidades, proporciona integraciones y caracter\u00edsticas que la mayor\u00eda de las organizaciones necesitar\u00e1n; consulte la Introducci\u00f3n a la Documentaci\u00f3n para obtener una lista completa de estas caracter\u00edsticas.</p>"},{"location":"es/05-implementation/02-dependencies/02-dependency-track/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>La serie OWASP Spotlight proporciona una visi\u00f3n general del seguimiento de dependencias y la inspecci\u00f3n de SBOMs utilizando Dependency-Track: 'Project 15 - OWASP Dependency-Track'.</p> <p>Siga la gu\u00eda de inicio para instalar la herramienta Dependency-Track, utilizando la implementaci\u00f3n recomendada de un contenedor Docker.</p> <p>Aunque Dependency-Track se ejecutar\u00e1 con su configuraci\u00f3n predeterminada, debe configurarse seg\u00fan las necesidades espec\u00edficas de la organizaci\u00f3n. El archivo de configuraci\u00f3n de Dependency-Track es importante para ejecutar la herramienta de manera \u00f3ptima, pero esto est\u00e1 fuera del alcance de la Gu\u00eda del Desarrollador - consulte la documentaci\u00f3n de Dependency-Track para obtener una gu\u00eda paso a paso de este proceso de configuraci\u00f3n.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/02-dependencies/03-cyclonedx/","title":"CycloneDX","text":"<p>CycloneDX de OWASP es un est\u00e1ndar completo de Lista de Materiales (BOM) que proporciona capacidades avanzadas para la cadena de suministro con el fin de reducir el riesgo cibern\u00e9tico. Este proyecto es uno de los proyectos insignia de OWASP.</p>"},{"location":"es/05-implementation/02-dependencies/03-cyclonedx/#que-es-cyclonedx","title":"\u00bfQu\u00e9 es CycloneDX?","text":"<p>CycloneDX es un est\u00e1ndar ampliamente utilizado para varios tipos de Listas de Materiales. Proporciona a la cadena de suministro de una organizaci\u00f3n la reducci\u00f3n de riesgos de seguridad del software. La especificaci\u00f3n provee:</p> <ul> <li>Lista de Materiales de Software (SBOM)</li> <li>Lista de Materiales de Software como Servicio (SaaSBOM)</li> <li>Lista de Materiales de Hardware (HBOM)</li> <li>Lista de Materiales de Machine-learning (ML-BOM)</li> <li>Lista de Materiales de Fabricaci\u00f3n (MBOM)</li> <li>Lista de Materiales de Operaciones (OBOM)</li> <li>Lista de Vulnerabilidades (BOV)</li> <li>Informes de Divulgaci\u00f3n de Vulnerabilidades (VDR)</li> <li>Intercambio de Explotabilidad de Vulnerabilidades (VEX)</li> <li>Formato com\u00fan para Notas de Lanzamiento</li> <li>Sintaxis para Vinculaci\u00f3n de Lista de Materiales (BOM-Link)</li> </ul> <p>El proyecto CycloneDX proporciona est\u00e1ndares en XML, JSON y Protocol Buffers. Existe una gran colecci\u00f3n de herramientas oficiales y respaldadas por la comunidad que consumen y crean BOMs de CycloneDX o interoperan con el est\u00e1ndar CycloneDX.</p>"},{"location":"es/05-implementation/02-dependencies/03-cyclonedx/#por-que-utilizarlo","title":"\u00bfPor qu\u00e9 utilizarlo?","text":"<p>CycloneDX es un est\u00e1ndar muy bien establecido para SBOMs y varios otros tipos de BOM. Existe un enorme ecosistema construido alrededor de CycloneDX y es utilizado globalmente por muchas empresas. Adem\u00e1s, los SBOMs son obligatorios para muchas industrias y varios gobiernos - en alg\u00fan momento, todas las organizaciones tendr\u00e1n que proporcionar SBOMs para sus clientes, y CycloneDX es un est\u00e1ndar aceptado para esto.</p> <p>CycloneDX tambi\u00e9n proporciona est\u00e1ndares para otros tipos de BOMs que pueden ser requeridos en la cadena de suministro junto con est\u00e1ndares para notas de lanzamiento y divulgaci\u00f3n responsable. Es \u00fatil utilizar CycloneDX a lo largo de la cadena de suministro ya que promueve la interoperabilidad entre las diversas herramientas.</p>"},{"location":"es/05-implementation/02-dependencies/03-cyclonedx/#como-utilizarlo","title":"C\u00f3mo utilizarlo","text":"<p>La serie OWASP Spotlight proporciona una visi\u00f3n general de CycloneDX junto con una demostraci\u00f3n del uso de SBOMs: 'Proyecto 21 - OWASP CycloneDX'.</p> <p>CycloneDX es un est\u00e1ndar f\u00e1cil de entender que puede ser aumentado para adaptarse a todas las partes de una cadena de suministro, y hay muchas herramientas (m\u00e1s de 220 a febrero de 2024) que interoperan con CycloneDX.</p> <p>La forma m\u00e1s sencilla de utilizar CycloneDX es seleccionar herramientas de esta lista para cualquiera de los tipos de BOM compatibles, con herramientas tanto propietarias/comerciales como de c\u00f3digo abierto incluidas en la lista. Un ejemplo com\u00fan es cuando un cliente solicita que se proporcione un SBOM para una aplicaci\u00f3n web, y se pueden elegir varias herramientas que pueden exportar el SBOM en varios formatos.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/03-secure-libraries/","title":"Descripci\u00f3n","text":"<p>El uso de bibliotecas seguras es parte de la gesti\u00f3n tecnol\u00f3gica que ayuda a cumplir con los requisitos de seguridad. Las bibliotecas est\u00e1ndar permiten la adopci\u00f3n de patrones de dise\u00f1o comunes y soluciones de seguridad, y proporcionan tecnolog\u00edas y marcos estandarizados que pueden utilizarse en diferentes aplicaciones.</p> <p>La Gesti\u00f3n Tecnol\u00f3gica para las aplicaciones de software es descrita por SAMM como una actividad dentro de la pr\u00e1ctica de seguridad Arquitectura de Seguridad de SAMM, que a su vez es parte de la funci\u00f3n empresarial de Dise\u00f1o.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/03-secure-libraries/01-esapi/","title":"ESAPI","text":"<p>La librer\u00eda OWASP Enterprise Security API (ESAPI) library es una librer\u00eda de controles de seguridad para aplicaciones web escritas en Java.</p> <p>La librer\u00eda ESAPI es un proyecto de Laboratorio OWASP que se encuentra en desarrollo activo para controles de seguridad de Java con lanzamientos regulares.</p>"},{"location":"es/05-implementation/03-secure-libraries/01-esapi/#que-es-la-libreria-esapi","title":"\u00bfQu\u00e9 es la librer\u00eda ESAPI?","text":"<p>La librer\u00eda OWASP Enterprise Security API (ESAPI) proporciona un conjunto de interfaces de control de seguridad que definen los tipos de par\u00e1metros que se pasan a los controles de seguridad.</p> <p>ESAPI es una librer\u00eda de controles de seguridad para aplicaciones web de c\u00f3digo abierto que facilita a los programadores de Java escribir aplicaciones con menor riesgo. La librer\u00eda Java de ESAPI est\u00e1 dise\u00f1ada para ayudar a los programadores a incorporar seguridad sobre aplicaciones Java existentes, y la librer\u00eda tambi\u00e9n sirve como una base s\u00f3lida para nuevos desarrollos.</p>"},{"location":"es/05-implementation/03-secure-libraries/01-esapi/#por-que-usarla","title":"\u00bfPor qu\u00e9 usarla?","text":"<p>El uso de la librer\u00eda Java ESAPI no es f\u00e1cil de justificar, aunque su uso ciertamente debe ser considerado. Las decisiones de ingenier\u00eda que un equipo de desarrollo necesitar\u00e1 tomar al usar ESAPI se discuten en el documento '\u00bfDeber\u00eda usar ESAPI?'.</p> <p>Para proyectos nuevos o para modificar un proyecto existente, se deber\u00edan considerar seriamente las alternativas:</p> <ul> <li>Codificaci\u00f3n de salida: Proyecto OWASP Java Encoder</li> <li>Sanitizaci\u00f3n general de HTML: OWASP Java HTML Sanitizer</li> <li>Validaci\u00f3n: JSR-303/JSR-349 Bean Validation</li> <li>Criptograf\u00eda fuerte: Google Tink o Keyczar</li> <li>Autenticaci\u00f3n y autorizaci\u00f3n: Apache Shiro, autenticaci\u00f3n usando Spring Security</li> <li>Protecci\u00f3n CSRF: Proyecto OWASP CSRFGuard</li> </ul> <p>Se podr\u00eda considerar el uso de ESAPI si m\u00faltiples controles de seguridad proporcionados por esta librer\u00eda se utilizan en un proyecto; entonces podr\u00eda ser \u00fatil usar la librer\u00eda monol\u00edtica ESAPI en lugar de m\u00faltiples librer\u00edas de clases dispares.</p>"},{"location":"es/05-implementation/03-secure-libraries/01-esapi/#como-usarla","title":"C\u00f3mo usarla","text":"<p>Si la decisi\u00f3n de ingenier\u00eda es usar la librer\u00eda ESAPI, entonces puede descargarse como un archivo de paquete Java Archive (.jar). Hay una implementaci\u00f3n de referencia para cada control de seguridad.</p>"},{"location":"es/05-implementation/03-secure-libraries/01-esapi/#referencias","title":"Referencias","text":"<ul> <li>ESAPI para Java</li> <li>Documentaci\u00f3n de ESAPI</li> <li>Proyecto ESAPI</li> <li>Proyecto Java Encoder de OWASP</li> <li>Java HTML Sanitizer</li> <li>Spring Security</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/03-secure-libraries/02-csrf-guard/","title":"CSRFGuard","text":"<p>OWASP CSRFGuard es un control de seguridad que ayuda a proteger las aplicaciones Java contra ataques de Falsificaci\u00f3n de Petici\u00f3n en Sitios Cruzados (CSRF).</p> <p>El proyecto CSRFGuard Builder/Breaker Tool es un Proyecto de Producci\u00f3n OWASP y est\u00e1 siendo mantenido activamente por un grupo de voluntarios internacionales.</p>"},{"location":"es/05-implementation/03-secure-libraries/02-csrf-guard/#que-es-csrfguard","title":"\u00bfQu\u00e9 es CSRFGuard?","text":"<p>OWASP CSRFGuard es una librer\u00eda que implementa una variante del patr\u00f3n de token sincronizador para mitigar el riesgo de ataques de Falsificaci\u00f3n de Petici\u00f3n en Sitios Cruzados (CSRF) para aplicaciones Java.</p> <p>La librer\u00eda OWASP CSRFGuard se integra mediante el uso de un Filtro JavaEE y expone varias formas automatizadas y manuales para integrar tokens por sesi\u00f3n o pseudo-por-petici\u00f3n en HTML. Cuando un usuario interact\u00faa con este HTML, los tokens de prevenci\u00f3n CSRF se env\u00edan con la petici\u00f3n HTTP correspondiente. CSRFGuard asegura que el token est\u00e9 presente y sea v\u00e1lido para la petici\u00f3n HTTP actual.</p>"},{"location":"es/05-implementation/03-secure-libraries/02-csrf-guard/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>La librer\u00eda OWASP CSRFGuard es ampliamente utilizada para aplicaciones Java, y ayudar\u00e1 a mitigar contra CSRF.</p>"},{"location":"es/05-implementation/03-secure-libraries/02-csrf-guard/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>Las versiones precompiladas de la biblioteca CSRFGuard pueden descargarse desde el repositorio Maven Central o el repositorio OSS Sonatype Nexus.</p> <p>Sigue las instrucciones para integrar CSRFGuard en la aplicaci\u00f3n Java utilizando Maven.</p>"},{"location":"es/05-implementation/03-secure-libraries/02-csrf-guard/#referencias","title":"Referencias","text":"<ul> <li>CSRFGuard de OWASP</li> <li>Hoja de Referencia para Prevenci\u00f3n de Falsificaci\u00f3n de Petici\u00f3n en Sitios Cruzados de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/05-implementation/03-secure-libraries/03-secure-headers/","title":"OSHP","text":"<p>El Proyecto OWASP Secure Headers (OSHP) proporciona informaci\u00f3n sobre cabeceras de respuesta HTTP para incrementar la seguridad de una aplicaci\u00f3n web.</p> <p>El proyecto de documentaci\u00f3n OSHP es un Proyecto de Laboratorio OWASP y crea conciencia sobre las cabeceras seguras y su uso.</p>"},{"location":"es/05-implementation/03-secure-libraries/03-secure-headers/#que-es-oshp","title":"\u00bfQu\u00e9 es OSHP?","text":"<p>El proyecto OSHP proporciona explicaciones para las cabeceras de respuesta HTTP que una aplicaci\u00f3n puede utilizar para aumentar la seguridad de la aplicaci\u00f3n. Una vez establecidas, las cabeceras de respuesta HTTP pueden restringir a los navegadores modernos de ejecutar vulnerabilidades f\u00e1cilmente prevenibles.</p> <p>OSHP contiene gu\u00edas y descargas sobre:</p> <ul> <li>Explicaciones y uso de las cabeceras de respuesta</li> <li>Enlaces al soporte individual de cada navegador</li> <li>Orientaci\u00f3n y mejores pr\u00e1cticas</li> <li>Recursos t\u00e9cnicos en forma de herramientas y documentos</li> <li>Fragmentos de c\u00f3digo para ayudar a trabajar con cabeceras de seguridad HTTP</li> </ul>"},{"location":"es/05-implementation/03-secure-libraries/03-secure-headers/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>El OSHP es un proyecto de documentaci\u00f3n que explica el razonamiento y uso de las cabeceras de respuesta HTTP. Es el documento de referencia para orientaci\u00f3n y mejores pr\u00e1cticas; la informaci\u00f3n sobre cabeceras de respuesta HTTP es el mejor consejo, en una sola ubicaci\u00f3n, y se mantiene actualizada.</p>"},{"location":"es/05-implementation/03-secure-libraries/03-secure-headers/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>La serie OWASP Spotlight proporciona una visi\u00f3n general de este proyecto y sus usos: 'Proyecto 24 - Proyecto Security Headers de OWASP'.</p> <p>OSHP proporciona enlaces a bibliotecas de desarrollo que proveen cabeceras de respuesta HTTP seguras en una variedad de lenguajes y frameworks: DotNet, Go, HAPI, Java, NodeJS, PHP, Python, Ruby, Rust. El OSHP tambi\u00e9n enumera varias herramientas \u00fatiles para la inspecci\u00f3n, an\u00e1lisis y escaneo de cabeceras de respuesta HTTP.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p> <p>\\newpage</p>"},{"location":"es/06-verification/","title":"Descripci\u00f3n","text":"<p>Verificaci\u00f3n es una de las funciones de negocio descritas por OWASP SAMM.</p> <p>La verificaci\u00f3n se centra en los procesos y actividades relacionados con c\u00f3mo una organizaci\u00f3n comprueba y prueba los artefactos producidos durante el desarrollo de software. Esto t\u00edpicamente incluye trabajo de aseguramiento de calidad como pruebas, y tambi\u00e9n incluye otras actividades de revisi\u00f3n y evaluaci\u00f3n.</p> <p>Las actividades de verificaci\u00f3n deber\u00edan incluir:</p> <ul> <li>Evaluaci\u00f3n, validaci\u00f3n y mitigaci\u00f3n de la arquitectura</li> <li>Pruebas basadas en requisitos</li> <li>Verificaci\u00f3n de controles de seguridad y pruebas de mal uso/abuso</li> <li>Pruebas de seguridad automatizadas y establecimiento de l\u00edneas base</li> <li>Pruebas de seguridad manuales y pruebas de penetraci\u00f3n</li> </ul> <p>Estas actividades est\u00e1n respaldadas por:</p> <ul> <li>Gu\u00edas de seguridad</li> <li>Herramientas de prueba</li> <li>Frameworks de prueba</li> <li>Gesti\u00f3n de vulnerabilidades</li> <li>Listas de verificaci\u00f3n</li> </ul> <p>La verificaci\u00f3n es una actividad central en el ciclo de vida de desarrollo de software seguro. Consulte la secci\u00f3n del proyecto Cultura de Seguridad para los diversos tipos de pruebas de seguridad.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/01-guides/","title":"Descripci\u00f3n","text":"<p>Verificaci\u00f3n es una de las funciones de negocio descritas por OWASP SAMM. Las actividades de verificaci\u00f3n son exhaustivas, e incluir\u00e1n:</p> <ul> <li>Pruebas de controles de seguridad</li> <li>Revisi\u00f3n de controles y mecanismos de seguridad</li> <li>Evaluaci\u00f3n y valoraci\u00f3n de la arquitectura de seguridad</li> <li>y otros</li> </ul> <p>Dada la amplitud de t\u00e9cnicas y conocimientos requeridos, las gu\u00edas son un recurso importante para las actividades de verificaci\u00f3n.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/01-guides/01-wstg/","title":"WSTG","text":"<p>La Gu\u00eda de Testeo de Seguridad Web (WSTG) de OWASP es una gu\u00eda completa para probar la seguridad de aplicaciones web y servicios web.</p> <p>El proyecto de documentaci\u00f3n WSTG es un Proyecto Insignia de OWASP y se puede acceder como un documento basado en web.</p>"},{"location":"es/06-verification/01-guides/01-wstg/#que-es-wstg","title":"\u00bfQu\u00e9 es WSTG?","text":"<p>El documento Gu\u00eda de Testeo de Seguridad Web (WSTG) es una gu\u00eda completa para probar la seguridad de aplicaciones web y servicios web. La WSTG proporciona un marco de mejores pr\u00e1cticas com\u00fanmente utilizadas por testeadores de penetraci\u00f3n externos y organizaciones que realizan pruebas internas.</p> <p>El documento WSTG describe un marco de pruebas de aplicaciones web sugerido y tambi\u00e9n proporciona informaci\u00f3n general sobre c\u00f3mo probar aplicaciones web con buenas pr\u00e1cticas de prueba.</p> <p>Las pruebas se dividen en dominios:</p> <ol> <li>Gesti\u00f3n de Configuraci\u00f3n y Despliegue</li> <li>Gesti\u00f3n de Identidad</li> <li>Autenticaci\u00f3n</li> <li>Autorizaci\u00f3n</li> <li>Gesti\u00f3n de Sesiones</li> <li>Validaci\u00f3n de Entrada</li> <li>Manejo de Errores</li> <li>Criptograf\u00eda D\u00e9bil</li> <li>L\u00f3gica de Negocio</li> <li>Del lado del Cliente</li> <li>API</li> </ol> <p>Cada prueba en cada dominio tiene suficiente informaci\u00f3n para entender y ejecutar la prueba, incluyendo:</p> <ul> <li>Descripci\u00f3n resumida</li> <li>Objetivos de la prueba</li> <li>C\u00f3mo realizar la prueba</li> <li>Remediaci\u00f3n sugerida</li> <li>Herramientas recomendadas y referencias</li> </ul> <p>Las pruebas se identifican con un n\u00famero de referencia \u00fanico, por ejemplo, 'WSTG-APIT-01' se refiere a la primera prueba en el dominio 'Pruebas de API' proporcionada en el documento WSTG. Estas referencias son ampliamente utilizadas y comprendidas por las comunidades de pruebas y seguridad.</p> <p>La WSTG tambi\u00e9n proporciona un Marco de Pruebas de Seguridad Web sugerido que pueden ser adaptados a los procesos de una organizaci\u00f3n particular o puede proporcionar un marco de referencia generalmente aceptado.</p>"},{"location":"es/06-verification/01-guides/01-wstg/#por-que-usarla","title":"\u00bfPor qu\u00e9 usarla?","text":"<p>El documento WSTG es ampliamente utilizado y se ha convertido en el est\u00e1ndar de facto sobre lo que se requiere para pruebas completas de aplicaciones web. El proceso de pruebas de seguridad de una organizaci\u00f3n deber\u00eda considerar el contenido de la WSTG, o tener equivalentes, que ayuden a la organizaci\u00f3n a ajustarse a la expectativa general de la comunidad de seguridad. El documento de referencia WSTG puede ser adoptado completamente, parcialmente o no adoptarse en absoluto; seg\u00fan las necesidades y requisitos de una organizaci\u00f3n.</p>"},{"location":"es/06-verification/01-guides/01-wstg/#como-utilizarla","title":"C\u00f3mo utilizarla","text":"<p>La serie OWASP Spotlight proporciona una descripci\u00f3n  general de c\u00f3mo utilizar la WSTG: 'Proyecto 1 - Aplicando la Gu\u00eda de Pruebas de OWASP'.</p> <p>Se puede acceder a la WSTG a trav\u00e9s del documento web en l\u00ednea. La secci\u00f3n sobre principios y t\u00e9cnicas de pruebas proporciona conocimientos fundamentales, junto con consejos sobre pruebas dentro de metodolog\u00edas t\u00edpicas del Ciclo de Vida de Desarrollo Seguro (SDLC) y pruebas de penetraci\u00f3n.</p> <p>Las pruebas individuales descritas en los diversos dominios de prueba deben ser seleccionadas o descartadas seg\u00fan sea necesario; no todas las pruebas ser\u00e1n relevantes para cada aplicaci\u00f3n web o requisito organizacional, y las pruebas deben adaptarse para proporcionar al menos la cobertura m\u00ednima de pruebas sin gastar demasiado esfuerzo en las pruebas.</p>"},{"location":"es/06-verification/01-guides/01-wstg/#referencias","title":"Referencias","text":"<ul> <li>Proyecto OWASP Gu\u00eda de Pruebas de Seguridad Web (WSTG)</li> <li>Descargas de WSTG</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/01-guides/02-mastg/","title":"MASTG","text":"<p>El Est\u00e1ndar de Verificaci\u00f3n MAS (MASVS) explica los procesos, t\u00e9cnicas y herramientas utilizadas para las pruebas de seguridad de una aplicaci\u00f3n m\u00f3vil.</p> <p>El proyecto MAS de OWASP proporciona la Gu\u00eda de Pruebas de Seguridad de Aplicaciones M\u00f3viles (MASTG) que describe los procesos t\u00e9cnicos que pueden utilizarse para la verificaci\u00f3n de los controles de aplicaciones m\u00f3viles.</p>"},{"location":"es/06-verification/01-guides/02-mastg/#que-es-mastg","title":"\u00bfQu\u00e9 es MASTG?","text":"<p>La Gu\u00eda de Pruebas de Seguridad de Aplicaciones M\u00f3viles de OWASP es un manual completo para pruebas de seguridad y ingenier\u00eda inversa de aplicaciones m\u00f3viles. Describe los procesos t\u00e9cnicos utilizados para verificar los controles enumerados en el OWASP MASVS.</p> <p>La gu\u00eda MASTG proporciona varios recursos para probar los controles:</p> <ul> <li>Secciones que detallan los conceptos y teor\u00eda detr\u00e1s de las pruebas de las plataformas Android e iOS</li> <li>Listas de pruebas para cada secci\u00f3n del MASVS</li> <li>Descripciones de t\u00e9cnicas para Android o iOS utilizadas durante las pruebas</li> <li>Listas de herramientas gen\u00e9ricas y tambi\u00e9n espec\u00edficas para Android o iOS</li> <li>Aplicaciones de referencia que pueden utilizarse como material educativo</li> </ul>"},{"location":"es/06-verification/01-guides/02-mastg/#por-que-usar-mastg","title":"\u00bfPor qu\u00e9 usar MASTG?","text":"<p>El OWASP MASVS es el est\u00e1ndar de la industria para seguridad de aplicaciones m\u00f3viles, y proporciona una lista de controles de seguridad que se esperan en una aplicaci\u00f3n m\u00f3vil. Si la aplicaci\u00f3n no implementa estos controles correctamente, podr\u00eda ser vulnerable; la gu\u00eda MASTG prueba que la aplicaci\u00f3n tiene los controles enumerados en el MASVS.</p>"},{"location":"es/06-verification/01-guides/02-mastg/#como-utilizar-mastg","title":"C\u00f3mo utilizar MASTG","text":"<p>La serie OWASP Spotlight proporciona una descripci\u00f3n general del uso de la MASTG: 'Proyecto 13 - Gu\u00eda de Pruebas de Seguridad M\u00f3vil de OWASP (MSTG)'.</p> <p>El proyecto MASTG contiene una gran cantidad de recursos que pueden utilizarse durante la verificaci\u00f3n y pruebas de aplicaciones m\u00f3viles; seleccione los recursos que sean aplicables a la aplicaci\u00f3n espec\u00edfica.</p> <ul> <li>Consulte la secci\u00f3n de MASTG sobre los conceptos y teor\u00eda para asegurar una buena comprensi\u00f3n del proceso de prueba</li> <li>Seleccione las pruebas MASTG que sean aplicables a la aplicaci\u00f3n y su plataforma de Sistema Operativo</li> <li>Utilice la secci\u00f3n sobre t\u00e9cnicas MASTG para ejecutar correctamente las pruebas seleccionadas</li> <li>Familiar\u00edcese con la gama de herramientas MASTG disponibles y seleccione las que necesita</li> <li>Utilice las Listas de Verificaci\u00f3n MAS para proporcionar evidencia de cumplimiento</li> </ul>"},{"location":"es/06-verification/01-guides/02-mastg/#referencias","title":"Referencias","text":"<ul> <li>Proyecto OWASP Seguridad de Aplicaciones M\u00f3viles (MAS)</li> <li>Gu\u00eda de Pruebas MAS (MASTG) de OWASP</li> <li>Listas de Verificaci\u00f3n MAS de OWASP</li> <li>Est\u00e1ndar de Verificaci\u00f3n MAS (MASVS) de OWASP</li> <li>Hoja de Referencia de OWASP para Seguridad de Aplicaciones M\u00f3viles</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, env\u00ede un issue o edite en GitHub.</p>"},{"location":"es/06-verification/01-guides/03-asvs/","title":"ASVS","text":"<p>El Est\u00e1ndar de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS) es un proyecto insignia de OWASP establecido desde hace tiempo, y es ampliamente utilizado como gu\u00eda durante la verificaci\u00f3n de aplicaciones web.</p> <p>Se puede descargar desde la p\u00e1gina del proyecto OWASP en varios idiomas y formatos: PDF, Word, CSV, XML y JSON. Dicho esto, la forma recomendada de consumir el ASVS es acceder directamente a las p\u00e1ginas markdown en GitHub - esto asegurar\u00e1 que se use la versi\u00f3n m\u00e1s reciente.</p>"},{"location":"es/06-verification/01-guides/03-asvs/#que-es-asvs","title":"\u00bfQu\u00e9 es ASVS?","text":"<p>El ASVS es un est\u00e1ndar abierto que establece la cobertura y el \"nivel de rigor\" esperado cuando se trata de realizar la verificaci\u00f3n de seguridad de aplicaciones web. El est\u00e1ndar tambi\u00e9n proporciona una base para el testeo de cualquier control t\u00e9cnico de seguridad que se utilice para proteger contra vulnerabilidades en la aplicaci\u00f3n.</p> <p>El ASVS se divide en varias secciones:</p> <ul> <li>V1 Arquitectura, Dise\u00f1o y Modelado de Amenazas</li> <li>V2 Autenticaci\u00f3n</li> <li>V3 Gesti\u00f3n de Sesiones</li> <li>V4 Control de Acceso</li> <li>V5 Validaci\u00f3n, Sanitizaci\u00f3n y Codificaci\u00f3n</li> <li>V6 Criptograf\u00eda Almacenada</li> <li>V7 Manejo de Errores y Registro de actividad</li> <li>V8 Protecci\u00f3n de Datos</li> <li>V9 Comunicaci\u00f3n</li> <li>V10 C\u00f3digo Malicioso</li> <li>V11 L\u00f3gica de Negocio</li> <li>V12 Archivos y Recursos</li> <li>V13 API y Servicios Web</li> <li>V14 Configuraci\u00f3n</li> </ul> <p>El ASVS define tres niveles de verificaci\u00f3n de seguridad:</p> <ol> <li>aplicaciones que solo necesitan niveles bajos de garant\u00eda;   estas aplicaciones son completamente comprobables mediante pruebas de penetraci\u00f3n</li> <li>aplicaciones que contienen datos sensibles que requieren protecci\u00f3n;   el nivel recomendado para la mayor\u00eda de las aplicaciones</li> <li>las aplicaciones m\u00e1s cr\u00edticas que requieren el m\u00e1s alto nivel de confianza</li> </ol> <p>La mayor\u00eda de las aplicaciones apuntar\u00e1n al Nivel 2, con solo aquellas aplicaciones que realizan transacciones de alto valor, o contienen datos m\u00e9dicos sensibles, aspirando al m\u00e1s alto nivel de confianza de nivel 3.</p>"},{"location":"es/06-verification/01-guides/03-asvs/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>El ASVS es utilizado por muchas organizaciones como base para la verificaci\u00f3n de sus aplicaciones web. Est\u00e1 bien establecido, las primeras versiones fueron escritas en 2008, y ha tenido continuo mantenimiento desde entonces.</p> <p>El ASVS es exhaustivo, por ejemplo, la versi\u00f3n 4.0.3 tiene una lista de 286 requisitos de verificaci\u00f3n, y estos requisitos de verificaci\u00f3n han sido creados y acordados por una amplia comunidad de seguridad. Usar el ASVS como gu\u00eda proporciona una base s\u00f3lida para el proceso de verificaci\u00f3n.</p>"},{"location":"es/06-verification/01-guides/03-asvs/#como-utilizarlo","title":"C\u00f3mo utilizarlo","text":"<p>La serie OWASP Spotlight proporciona una descripci\u00f3n general del ASVS y sus usos: 'Proyecto 19 - Est\u00e1ndar OWASP de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS)'.</p> <p>El ASVS debe usarse como gu\u00eda para el proceso de verificaci\u00f3n, eligiendo el nivel apropiado de verificaci\u00f3n entre:</p> <ul> <li>Nivel 1: Primeros pasos, automatizado, o vista de todo el portafolio</li> <li>Nivel 2: La mayor\u00eda de las aplicaciones</li> <li>Nivel 3: Alto valor, alta garant\u00eda o alta seguridad</li> </ul> <p>Use el ASVS como orientaci\u00f3n en lugar de intentar implementar todos los controles posibles. Herramientas como SecurityRAT pueden ayudar a crear un subconjunto m\u00e1s manejable de los requisitos del ASVS.</p> <p>La gu\u00eda ASVS ayudar\u00e1 a los desarrolladores a construir controles de seguridad que satisfar\u00e1n los requisitos de seguridad de la aplicaci\u00f3n.</p> <p>Las Hojas de Referencia de OWASP han sido indexadas espec\u00edficamente para cada secci\u00f3n del ASVS, que pueden usarse como documentaci\u00f3n para ayudar a decidir si una categor\u00eda de requisitos debe incluirse en la verificaci\u00f3n.</p>"},{"location":"es/06-verification/01-guides/03-asvs/#referencias","title":"Referencias","text":"<ul> <li>Est\u00e1ndar OWASP de Verificaci\u00f3n de Seguridad de Aplicaciones (ASVS)</li> <li>\u00cdndice ASVS de OWASP</li> <li>Proyecto SecurityRAT de OWASP</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/02-tools/","title":"Descripci\u00f3n","text":"<p>Verificaci\u00f3n es una de las funciones de negocio descritas por OWASP SAMM.</p> <p>La actividad de Testeo de Seguridad de SAMM describe el uso tanto de pruebas de seguridad automatizadas como pruebas de seguridad manuales por expertos para descubrir defectos de seguridad. Estas pruebas de seguridad deben ser automatizadas como parte de los procesos de desarrollo, construcci\u00f3n y despliegue; y pueden ser complementadas con pruebas manuales de seguridad de penetraci\u00f3n de forma regular.</p> <p>Las herramientas automatizadas de pruebas de seguridad son r\u00e1pidas y escalan bien para numerosas aplicaciones, mientras que las pruebas de seguridad manuales de componentes de alto riesgo requieren un buen conocimiento de la aplicaci\u00f3n y su l\u00f3gica de negocio.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/02-tools/01-dast/","title":"DAST tools","text":"<p>Las pruebas din\u00e1micas de seguridad de aplicaciones (DAST) representan un proceso de prueba no funcional para identificar debilidades de seguridad y vulnerabilidades en aplicaciones. El proceso de prueba puede realizarse manualmente o automatizarse. La evaluaci\u00f3n manual de una aplicaci\u00f3n implica intervenci\u00f3n humana para identificar fallos de seguridad que podr\u00edan pasar desapercibidos para una herramienta automatizada. Normalmente, los errores de l\u00f3gica de negocio, verificaciones de condiciones de carrera y ciertas vulnerabilidades de d\u00eda cero solo pueden identificarse mediante evaluaciones manuales.</p>"},{"location":"es/06-verification/02-tools/01-dast/#621-herramientas-dast","title":"6.2.1 Herramientas DAST","text":"<p>Las herramientas DAST son programas que se comunican con una aplicaci\u00f3n web a trav\u00e9s de la interfaz web para identificar posibles vulnerabilidades de seguridad en la aplicaci\u00f3n web y debilidades arquitect\u00f3nicas. Realizan pruebas de caja negra. A diferencia de las herramientas de pruebas est\u00e1ticas de seguridad de aplicaciones, las herramientas DAST no tienen acceso al c\u00f3digo fuente y, por lo tanto, detectan vulnerabilidades realizando ataques reales.</p>"},{"location":"es/06-verification/02-tools/01-dast/#diferentes-herramientas-dast","title":"Diferentes herramientas DAST","text":"<p>La Comunidad OWASP contiene una lista de herramientas DAST que pueden utilizarse para realizar DAST. Todas estas herramientas tienen sus propias fortalezas y debilidades. Si est\u00e1 interesado en la efectividad de las herramientas DAST, consulte el proyecto OWASP Benchmark, que intenta medir cient\u00edficamente la efectividad de todos los tipos de herramientas de detecci\u00f3n de vulnerabilidades, incluyendo DAST.</p>"},{"location":"es/06-verification/02-tools/01-dast/#por-que-utilizarlas","title":"\u00bfPor qu\u00e9 utilizarlas?","text":"<p>La gran ventaja de este tipo de herramientas es que pueden escanear durante todo el a\u00f1o para buscar constantemente vulnerabilidades. Con nuevas vulnerabilidades siendo descubiertas regularmente, esto permite a las empresas encontrar y parchar vulnerabilidades antes de que puedan ser explotadas.</p>"},{"location":"es/06-verification/02-tools/01-dast/#contras","title":"Contras","text":"<p>Debido a que estas herramientas realizan pruebas din\u00e1micas, no pueden cubrir el 100% del c\u00f3digo fuente de la aplicaci\u00f3n y, por tanto, la aplicaci\u00f3n en s\u00ed misma. El evaluador de penetraci\u00f3n debe observar la cobertura de la aplicaci\u00f3n web o de su superficie de ataque para saber si la herramienta se configur\u00f3 correctamente o si fue capaz de entender la aplicaci\u00f3n web.</p>"},{"location":"es/06-verification/02-tools/01-dast/#referencias","title":"Referencias","text":"<ul> <li>Pruebas din\u00e1micas de seguridad de aplicaciones</li> <li>Herramientas de Escaneo de Vulnerabilidades</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/02-tools/02-amass/","title":"Amass","text":"<p>OWASP Amass es una herramienta que proporciona gesti\u00f3n de superficie de ataque para los sitios web y aplicaciones de una organizaci\u00f3n. Se utiliza durante pruebas de penetraci\u00f3n para el mapeo de redes de superficies de ataque y descubrimiento de activos externos mediante la integraci\u00f3n de varias herramientas de seguridad existentes.</p> <p>El proyecto atacante/herramienta Amass es un Proyecto Insignia de OWASP y los instaladores pueden descargarse desde el \u00e1rea de versiones del repositorio github del proyecto.</p>"},{"location":"es/06-verification/02-tools/02-amass/#que-es-amass","title":"\u00bfQu\u00e9 es Amass?","text":"<p>Amass es una herramienta de l\u00ednea de comandos que proporciona informaci\u00f3n sobre los sitios web de una organizaci\u00f3n, utilizando varias herramientas de recopilaci\u00f3n de informaci\u00f3n de c\u00f3digo abierto y t\u00e9cnicas de reconocimiento activo.</p> <p>Se ejecuta desde la l\u00ednea de comandos con subcomandos:</p> <ol> <li>'amass intel' recopila inteligencia sobre la organizaci\u00f3n objetivo</li> <li>'amass enum' realiza enumeraci\u00f3n DNS y mapeo de red para poblar la base de datos de resultados</li> <li>'amass db'</li> </ol> <p>Cada comando viene con un amplio conjunto de opciones que controlan las herramientas utilizadas y el formato de los hallazgos.</p>"},{"location":"es/06-verification/02-tools/02-amass/#por-que-utilizarla","title":"\u00bfPor qu\u00e9 utilizarla?","text":"<p>Amass es una herramienta importante para los equipos de testeo de seguridad. Amass est\u00e1 incluida en la distribuci\u00f3n Kali Linux, que es ampliamente utilizada por equipos de pruebas de penetraci\u00f3n, con Amass proporcionando una forma sencilla de ejecutar un amplio conjunto de herramientas de reconocimiento y enumeraci\u00f3n.</p> <p>Adem\u00e1s, Amass es una herramienta de f\u00e1cil uso que est\u00e1 disponible tanto para equipos de pruebas leg\u00edtimos como para actores maliciosos. Es muy probable que cualquier organizaci\u00f3n haya sido escaneada y enumerada por Amass en alg\u00fan momento, ya sea maliciosamente o leg\u00edtimamente, por lo que es importante ejecutar la herramienta para determinar qu\u00e9 informaci\u00f3n puede obtener un actor malicioso.</p>"},{"location":"es/06-verification/02-tools/02-amass/#como-utilizarla","title":"C\u00f3mo utilizarla","text":"<p>Si se est\u00e1 utilizando Kali Linux, entonces Amass viene ya instalado, de lo contrario, existe un amplio conjunto de instaladores para otras plataformas.</p> <p>El extenso tutorial de Amass proporciona la mejor manera de aprender a usar Amass y sus caracter\u00edsticas.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/02-tools/03-owtf/","title":"OWTF","text":"<p>El framework ofensivo de pruebas OWASP - Offensive Web Testing Framework (OWTF) es una herramienta de pruebas de penetraci\u00f3n que proporciona a los evaluadores de penetraci\u00f3n un marco para organizar y ejecutar conjuntos de pruebas de seguridad. Tambi\u00e9n ayuda a alinear las pruebas de penetraci\u00f3n con varios est\u00e1ndares y gu\u00edas de seguridad, permitiendo que las pruebas sean m\u00e1s creativas y completas.</p> <p>El proyecto defensor/herramienta OWTF es un Proyecto Insignia de OWASP y puede ser descargado desde el \u00e1rea de versiones del repositorio github del proyecto.</p>"},{"location":"es/06-verification/02-tools/03-owtf/#que-es-owtf","title":"\u00bfQu\u00e9 es OWTF?","text":"<p>La herramienta OWTF es un marco de pruebas de penetraci\u00f3n utilizado para organizar y ejecutar conjuntos de herramientas de seguridad y pruebas de penetraci\u00f3n. Est\u00e1 dise\u00f1ada para ejecutarse en Kali Linux; tambi\u00e9n puede ejecutarse en MacOS pero con algunas modificaciones de scripts y rutas.</p> <p>OWTF es claramente una herramienta para evaluadores de penetraci\u00f3n tambien llamados pentesters; existe la expectativa de que el usuario tenga una experiencia razonable y comprensi\u00f3n de los entornos y herramientas de pruebas de penetraci\u00f3n. La documentaci\u00f3n sobre la instalaci\u00f3n y ejecuci\u00f3n de OWTF no es extensa, y se requiere un conocimiento profundo del sistema objetivo para configurar la herramienta.</p>"},{"location":"es/06-verification/02-tools/03-owtf/#por-que-utilizarla","title":"\u00bfPor qu\u00e9 utilizarla?","text":"<p>OWTF es f\u00e1cilmente configurable y se pueden crear complementos o a\u00f1adir nuevas pruebas utilizando los archivos de configuraci\u00f3n. Se puede instalar r\u00e1pidamente en Kali Linux, una distribuci\u00f3n de Ubuntu ampliamente utilizada por evaluadores de penetraci\u00f3n, y permite dirigir todo un conjunto de pruebas contra el objetivo.</p>"},{"location":"es/06-verification/02-tools/03-owtf/#como-utilizarla","title":"C\u00f3mo utilizarla","text":"<p>La documentaci\u00f3n de OWTF es relativamente antigua, actualizada por \u00faltima vez en 2016, y las instrucciones de instalaci\u00f3n pueden necesitar adaptaci\u00f3n para ejecutarse en MacOS o Kali.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/02-tools/04-nettacker/","title":"Nettacker","text":""},{"location":"es/06-verification/02-tools/04-nettacker/#624-nettacker","title":"6.2.4 Nettacker","text":"<p>OWASP Nettacker es una utilidad de l\u00ednea de comandos para escaneo automatizado de redes y vulnerabilidades. Puede utilizarse durante pruebas de penetraci\u00f3n tanto para evaluaciones de seguridad internas como externas de redes.</p> <p>El proyecto atacante/herramienta Nettacker es un Proyecto Incubadora de OWASP; la \u00faltima versi\u00f3n puede descargarse desde el repositorio github del proyecto.</p>"},{"location":"es/06-verification/02-tools/04-nettacker/#que-es-nettacker","title":"\u00bfQu\u00e9 es Nettacker?","text":"<p>Nettacker es una herramienta automatizada de pruebas de penetraci\u00f3n. Se utiliza para escanear una red para descubrir nodos y servidores en la red, incluyendo subdominios. Nettacker puede luego identificar servidores, servicios y n\u00fameros de puerto en uso.</p> <p>Nettacker es una aplicaci\u00f3n modular en Python que puede extenderse con otras funciones de escaneo. Los numerosos m\u00f3dulos disponibles est\u00e1n agrupados en dominios:</p> <ul> <li>M\u00f3dulos de escaneo para reconocimiento</li> <li>M\u00f3dulos de vulnerabilidad que intentan exploits espec\u00edficos</li> <li>M\u00f3dulos de fuerza bruta</li> </ul> <p>Nettacker se ejecuta en Windows, Linux y MacOS.</p>"},{"location":"es/06-verification/02-tools/04-nettacker/#por-que-utilizarla","title":"\u00bfPor qu\u00e9 utilizarla?","text":"<p>Nettacker es f\u00e1cil de usar desde la l\u00ednea de comandos, lo que facilita su uso en scripts, y tambi\u00e9n viene con una interfaz de navegador web para una f\u00e1cil navegaci\u00f3n de los resultados. Esto lo convierte en una forma r\u00e1pida y confiable de obtener informaci\u00f3n de una red.</p> <p>Nettacker puede utilizarse tanto para fines de auditor\u00eda como para pruebas de penetraci\u00f3n.</p>"},{"location":"es/06-verification/02-tools/04-nettacker/#como-utilizarla","title":"C\u00f3mo utilizarla","text":"<p>La serie OWASP Spotlight proporciona una descripci\u00f3n general de la gesti\u00f3n de superficie de ataque utilizando Nettacker: 'Proyecto 11 - Nettacker'.</p> <p>La documentaci\u00f3n para Nettacker se proporciona en las p\u00e1ginas wiki del repositorio; siga estas instrucciones para instalarlo.</p> <p>Nettacker es una herramienta de escaneo flexible y modular que puede utilizarse de muchas formas y con muchas opciones. La mejor manera de comenzar a utilizarla es siguiendo el video de introducci\u00f3n y luego continuar desde all\u00ed.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/02-tools/05-secure-headers/","title":"OSHP verification","text":"<p>El Proyecto de Cabeceras Seguras de OWASP - OWASP Secure Headers Project (OSHP) proporciona informaci\u00f3n sobre las cabeceras de respuesta HTTP para aumentar la seguridad de una aplicaci\u00f3n web.</p> <p>El proyecto de documentaci\u00f3n OSHP es un Proyecto de Laboratorio de OWASP y concientiza sobre las cabeceras seguras y su uso.</p>"},{"location":"es/06-verification/02-tools/05-secure-headers/#que-es-oshp","title":"\u00bfQu\u00e9 es OSHP?","text":"<p>El proyecto OSHP proporciona explicaciones para las cabeceras de respuesta HTTP que una aplicaci\u00f3n puede utilizar para aumentar la seguridad de la aplicaci\u00f3n. Una vez establecidas, las cabeceras de respuesta HTTP pueden restringir a los navegadores modernos de incurrir en vulnerabilidades f\u00e1cilmente prevenibles.</p> <p>OSHP contiene orientaci\u00f3n y descargas sobre:</p> <ul> <li>Explicaciones y uso de cabeceras de respuesta</li> <li>Enlaces a soporte individual de navegadores</li> <li>Orientaci\u00f3n y mejores pr\u00e1cticas</li> <li>Recursos t\u00e9cnicos en forma de herramientas y documentos</li> <li>Fragmentos de c\u00f3digo para ayudar a trabajar con cabeceras de seguridad HTTP</li> </ul>"},{"location":"es/06-verification/02-tools/05-secure-headers/#por-que-utilizarlo","title":"\u00bfPor qu\u00e9 utilizarlo?","text":"<p>El OSHP es un proyecto de documentaci\u00f3n que explica el razonamiento y uso de las cabeceras de respuesta HTTP. Es el documento de referencia para orientaci\u00f3n y mejores pr\u00e1cticas; la informaci\u00f3n sobre cabeceras de respuesta HTTP es el mejor consejo, en una sola ubicaci\u00f3n, y se mantiene actualizada.</p>"},{"location":"es/06-verification/02-tools/05-secure-headers/#como-utilizarlo","title":"C\u00f3mo utilizarlo","text":"<p>La serie OWASP Spotlight proporciona una descripci\u00f3n general de este proyecto y sus usos: 'Proyecto 24 - OWASP Security Headers Project'.</p> <p>OSHP documenta varias herramientas \u00fatiles para la inspecci\u00f3n, an\u00e1lisis y escaneo de cabeceras de respuesta HTTP:</p> <ul> <li>hsecscan</li> <li>humble</li> <li>SecurityHeaders.com</li> <li>Mozilla Observatory</li> <li>Recx Security Analyser</li> <li>testssl.sh</li> <li>DrHEADer</li> <li>csp-evaluator</li> </ul> <p>OSHP tambi\u00e9n proporciona enlaces a bibliotecas de desarrollo que proporcionan cabeceras de respuesta HTTP seguras en una variedad de lenguajes y frameworks.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si hay algo que necesita cambios, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/03-frameworks/","title":"Descripci\u00f3n","text":"<p>La Verificaci\u00f3n es una de las funciones de negocio descritas por OWASP SAMM y tanto las Pruebas de Seguridad como las Pruebas Basadas en Requisitos son una parte importante de la verificaci\u00f3n.</p> <p>Las pruebas de verificaci\u00f3n pueden beneficiarse del uso de frameworks para apoyar pruebas de seguridad continuas y automatizadas. El uso de un framework puede proporcionar:</p> <ul> <li>automatizaci\u00f3n de un pipeline de an\u00e1lisis de seguridad</li> <li>flexibilidad para ejecutar una serie de herramientas en un pipeline</li> <li>escalabilidad para m\u00faltiples esc\u00e1neres de seguridad</li> <li>interfaces de control</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/03-frameworks/01-secure-codebox/","title":"secureCodeBox","text":"<p>OWASP secureCodeBox es una cadena de herramientas modularizada basada en Kubernetes que proporciona escaneos de seguridad continuos de los proyectos y aplicaciones web de una organizaci\u00f3n.</p> <p>El proyecto constructor/herramienta secureCodeBox es un Proyecto de Laboratorio OWASP y se instala usando Helm ChartMuseum.</p>"},{"location":"es/06-verification/03-frameworks/01-secure-codebox/#que-es-securecodebox","title":"\u00bfQu\u00e9 es secureCodeBox?","text":"<p>OWASP secureCodeBox combina herramientas de seguridad existentes en los dominios de an\u00e1lisis est\u00e1tico, an\u00e1lisis din\u00e1mico y an\u00e1lisis de red. Utiliza estas herramientas para proporcionar un panorama integral de las amenazas y vulnerabilidades que afectan a la red y las aplicaciones de una organizaci\u00f3n.</p> <p>OWASP secureCodeBox orquesta una variedad de herramientas de pruebas de seguridad en varios dominios:</p> <ul> <li>An\u00e1lisis de contenedores:</li> <li>Esc\u00e1ner de vulnerabilidades de contenedores Trivy</li> <li> <p>Esc\u00e1ner de dependencias de contenedores Trivy SBOM</p> </li> <li> <p>An\u00e1lisis de Sistemas de Gesti\u00f3n de Contenido:</p> </li> <li>CMSeeK para detectar el CMS Joomla y sus vulnerabilidades principales</li> <li>Typo3Scan para detectar el CMS Typo3 y sus extensiones instaladas</li> <li> <p>WPScan esc\u00e1ner de vulnerabilidades de Wordpress</p> </li> <li> <p>An\u00e1lisis de Kubernetes:</p> </li> <li>Kube Hunter esc\u00e1ner de vulnerabilidades</li> <li> <p>Kubeaudit esc\u00e1ner de configuraci\u00f3n</p> </li> <li> <p>An\u00e1lisis de red:</p> </li> <li>Amass esc\u00e1ner de enumeraci\u00f3n de subdominios</li> <li>doggo cliente DNS</li> <li>Ncrack fuerza bruta de autenticaci\u00f3n de red</li> <li>Nmap descubrimiento de red y auditor\u00eda de seguridad</li> <li> <p>Whatweb identificaci\u00f3n de sitios web</p> </li> <li> <p>An\u00e1lisis de repositorios:</p> </li> <li>Git Repo Scanner para descubrir repositorios Git</li> <li>Gitleaks para encontrar posibles secretos en repositorios</li> <li> <p>Semgrep an\u00e1lisis est\u00e1tico de c\u00f3digo</p> </li> <li> <p>Escaneo de configuraci\u00f3n y pol\u00edticas SSH/TLS con SSH-audit y SSLyze</p> </li> <li> <p>An\u00e1lisis de aplicaciones web:</p> </li> <li>ffuf descubrimiento de elementos y contenido de servidores web y aplicaciones web</li> <li>Nikto esc\u00e1ner de vulnerabilidades de servidores web</li> <li>Nuclei esc\u00e1ner de vulnerabilidades basado en plantillas</li> <li>Screenshooter toma capturas de pantalla de sitios web</li> <li>ZAP esc\u00e1ner avanzado de vulnerabilidades de aplicaciones web y OpenAPI</li> </ul> <p>Con el tiempo se pueden a\u00f1adir otras herramientas.</p>"},{"location":"es/06-verification/03-frameworks/01-secure-codebox/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>OWASP secureCodeBox proporciona la potencia de las principales herramientas de pruebas de seguridad de c\u00f3digo abierto con una plataforma multi-esc\u00e1ner. Esto proporciona la capacidad de ejecutar escaneos rutinarios de forma continua y autom\u00e1tica en la infraestructura de red y aplicaciones de una organizaci\u00f3n.</p> <p>OWASP secureCodeBox es completamente escalable y puede configurarse por separado para m\u00faltiples equipos, sistemas o cl\u00fasteres.</p>"},{"location":"es/06-verification/03-frameworks/01-secure-codebox/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>OWASP secureCodeBox se ejecuta en Kubernetes y utiliza Helm para la instalaci\u00f3n usando Helm ChartMuseum. Hay una excelente gu\u00eda, 'Iniciando tus primeros escaneos' para comenzar con secureCodeBox, con el resto de la documentaci\u00f3n que proporciona informaci\u00f3n clara sobre la configuraci\u00f3n y ejecuci\u00f3n de secureCodeBox.</p>"},{"location":"es/06-verification/03-frameworks/01-secure-codebox/#referencias","title":"Referencias","text":"<ul> <li>OWASP secureCodeBox</li> <li>Kubernetes orquestador de contenedores</li> <li>Helm gestor de paquetes para Kubernetes</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/04-vulnerability-management/","title":"Descripci\u00f3n","text":"<p>La Verificaci\u00f3n es una de las funciones de negocio descritas por OWASP SAMM. La gesti\u00f3n de vulnerabilidades ayuda a mantener el nivel de seguridad de la aplicaci\u00f3n despu\u00e9s de correcciones de errores, cambios o durante el mantenimiento.</p> <p>La pr\u00e1ctica de Pruebas Basadas en Requisitos de SAMM describe los resultados para una gesti\u00f3n de vulnerabilidades efectiva, y por qu\u00e9 es necesario tener estos procesos implementados. Por ejemplo, el uso de pruebas unitarias de seguridad para proporcionar pruebas de regresi\u00f3n da cierto grado de confianza de que las aplicaciones no son vulnerables a exploits conocidos.</p> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda del Desarrollador de OWASP es un esfuerzo comunitario; si ve algo que necesita cambios, entonces cree un issue o ed\u00edtelo en GitHub.</p>"},{"location":"es/06-verification/04-vulnerability-management/01-defectdojo/","title":"DefectDojo","text":"<p>OWASP DefectDojo es una herramienta DevSecOps para la gesti\u00f3n de vulnerabilidades. Proporciona una plataforma \u00fanica para orquestar pruebas de seguridad end-to-end, seguimiento de vulnerabilidades, deduplicaci\u00f3n, remediaci\u00f3n e informes.</p> <p>DefectDojo es un proyecto Flagship de OWASP y est\u00e1 bien establecido; el proyecto se inici\u00f3 en 2013 y ha estado en desarrollo/lanzamiento continuo desde entonces.</p>"},{"location":"es/06-verification/04-vulnerability-management/01-defectdojo/#que-es-defectdojo","title":"\u00bfQu\u00e9 es DefectDojo?","text":"<p>DefectDojo es una herramienta de gesti\u00f3n de vulnerabilidades de c\u00f3digo abierto que optimiza el proceso de pruebas mediante la integraci\u00f3n de plantillas, generaci\u00f3n de informes, m\u00e9tricas y herramientas de autoservicio de l\u00ednea base.</p> <p>DefectDojo optimiza el proceso de prueba a trav\u00e9s de varios 'modelos' que un administrador puede manipular con c\u00f3digo Python. Los modelos principales incluyen:</p> <ul> <li>compromisos (engagements)</li> <li>pruebas</li> <li>hallazgos (findings)</li> </ul> <p>DefectDojo tiene modelos complementarios que facilitan:</p> <ul> <li>m\u00e9tricas</li> <li>autenticaci\u00f3n</li> <li>generaci\u00f3n de informes</li> <li>herramientas</li> </ul> <p>Una buena introducci\u00f3n a DefectDojo es la discusi\u00f3n de We Hack Purple entre Matt Tesauro y Tanya Janca.</p>"},{"location":"es/06-verification/04-vulnerability-management/01-defectdojo/#por-que-usarlo","title":"\u00bfPor qu\u00e9 usarlo?","text":"<p>DefectDojo se integra con muchas herramientas de c\u00f3digo abierto y propietarias/comerciales de varios dominios:</p> <ul> <li>Pruebas de Seguridad de Aplicaciones Din\u00e1micas (DAST)</li> <li>Pruebas de Seguridad de Aplicaciones Est\u00e1ticas (SAST)</li> <li>An\u00e1lisis de Composici\u00f3n de Software (SCA)</li> <li>Listas de Materiales de Software (SBOMs)</li> <li>Escaneo de infraestructura y APIs</li> </ul> <p>Tambi\u00e9n se integra con la herramienta de modelado de amenazas Threagile, y con el tiempo estar\u00e1n disponibles m\u00e1s integraciones con herramientas de modelado de amenazas.</p>"},{"location":"es/06-verification/04-vulnerability-management/01-defectdojo/#como-usarlo","title":"C\u00f3mo usarlo","text":"<p>Probar o instalar DefectDojo es muy f\u00e1cil siguiendo las instrucciones de instalaci\u00f3n; la forma recomendada de ejecutar DefectDojo es usando un contenedor.</p> <p>Para configurar una instancia de DefectDojo, siga las instrucciones de docker compose junto con los scripts asociados que manejan las dependencias, configuran la base de datos, crean usuarios, etc. Consulte la documentaci\u00f3n de DefectDojo para obtener m\u00e1s informaci\u00f3n sobre implementaciones alternativas, configuraci\u00f3n, uso e integraciones.</p>"},{"location":"es/06-verification/04-vulnerability-management/01-defectdojo/#referencias","title":"Referencias","text":"<ul> <li>OWASP DefectDojo</li> <li>Discusi\u00f3n de We Hack Purple</li> <li>Modelado de Amenazas de Threagile</li> </ul> <p>Traducci\u00f3n de versi\u00f3n original en ingl\u00e9s.</p> <p>La Gu\u00eda para Desarrolladores de OWASP es un esfuerzo comunitario; si hay algo que necesita cambiarse, cree un issue o ed\u00edtelo en GitHub.</p>"}]}